import {
  TranslateDirective,
  TranslateModule,
  TranslatePipe,
  TranslateService
} from "./chunk-QY4VOH4S.js";
import {
  AsyncPipe,
  CommonModule,
  NgClass,
  NgForOf,
  NgIf,
  NgStyle,
  NgSwitch,
  NgSwitchCase,
  NgTemplateOutlet
} from "./chunk-5MBXI5FG.js";
import {
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  Component,
  ComponentFactoryResolver$1,
  Directive,
  ElementRef,
  EventEmitter,
  HostBinding,
  HostListener,
  Inject,
  Injectable,
  InjectionToken,
  Input,
  NgModule,
  NgZone,
  Output,
  Type,
  ViewChild,
  ViewContainerRef,
  ViewEncapsulation$1,
  setClassMetadata,
  ɵɵInheritDefinitionFeature,
  ɵɵNgOnChangesFeature,
  ɵɵProvidersFeature,
  ɵɵStandaloneFeature,
  ɵɵadvance,
  ɵɵattribute,
  ɵɵattributeInterpolate1,
  ɵɵclassMap,
  ɵɵclassMapInterpolate1,
  ɵɵclassMapInterpolate3,
  ɵɵclassProp,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjectable,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵelement,
  ɵɵelementContainer,
  ɵɵelementContainerEnd,
  ɵɵelementContainerStart,
  ɵɵelementEnd,
  ɵɵelementStart,
  ɵɵgetCurrentView,
  ɵɵinject,
  ɵɵlistener,
  ɵɵloadQuery,
  ɵɵnamespaceSVG,
  ɵɵnextContext,
  ɵɵpipe,
  ɵɵpipeBind1,
  ɵɵpipeBind2,
  ɵɵprojection,
  ɵɵprojectionDef,
  ɵɵproperty,
  ɵɵpropertyInterpolate,
  ɵɵpureFunction0,
  ɵɵpureFunction1,
  ɵɵpureFunction2,
  ɵɵpureFunction3,
  ɵɵpureFunction4,
  ɵɵpureFunction5,
  ɵɵpureFunction6,
  ɵɵqueryRefresh,
  ɵɵreference,
  ɵɵresetView,
  ɵɵrestoreView,
  ɵɵsanitizeHtml,
  ɵɵsanitizeUrl,
  ɵɵstyleMap,
  ɵɵstyleMapInterpolate1,
  ɵɵstyleProp,
  ɵɵtemplate,
  ɵɵtemplateRefExtractor,
  ɵɵtext,
  ɵɵtextInterpolate,
  ɵɵtextInterpolate1,
  ɵɵtextInterpolate2,
  ɵɵviewQuery
} from "./chunk-M7CTU4LC.js";
import {
  BehaviorSubject,
  ReplaySubject,
  Subject,
  combineLatest,
  debounceTime,
  distinctUntilChanged,
  filter,
  first,
  fromEvent,
  map,
  shareReplay,
  take,
  takeUntil,
  tap,
  timer
} from "./chunk-SKKX4QRL.js";
import {
  __async,
  __awaiter,
  __commonJS,
  __export,
  __objRest,
  __spreadProps,
  __spreadValues,
  __toESM
} from "./chunk-DXGKNO7Z.js";

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray2;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray2(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof2(o2) {
      "@babel/helpers - typeof";
      return module.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof2(o2);
    }
    module.exports = _typeof2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports, module) {
    var _typeof2 = require_typeof()["default"];
    function _regeneratorRuntime2() {
      "use strict";
      module.exports = _regeneratorRuntime2 = function _regeneratorRuntime3() {
        return e2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var t2, e2 = {}, r = Object.prototype, n = r.hasOwnProperty, o2 = Object.defineProperty || function(t3, e3, r2) {
        t3[e3] = r2.value;
      }, i = "function" == typeof Symbol ? Symbol : {}, a2 = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
      function define2(t3, e3, r2) {
        return Object.defineProperty(t3, e3, {
          value: r2,
          enumerable: true,
          configurable: true,
          writable: true
        }), t3[e3];
      }
      try {
        define2({}, "");
      } catch (t3) {
        define2 = function define3(t4, e3, r2) {
          return t4[e3] = r2;
        };
      }
      function wrap(t3, e3, r2, n2) {
        var i2 = e3 && e3.prototype instanceof Generator ? e3 : Generator, a3 = Object.create(i2.prototype), c2 = new Context(n2 || []);
        return o2(a3, "_invoke", {
          value: makeInvokeMethod(t3, r2, c2)
        }), a3;
      }
      function tryCatch(t3, e3, r2) {
        try {
          return {
            type: "normal",
            arg: t3.call(e3, r2)
          };
        } catch (t4) {
          return {
            type: "throw",
            arg: t4
          };
        }
      }
      e2.wrap = wrap;
      var h2 = "suspendedStart", l = "suspendedYield", f2 = "executing", s2 = "completed", y = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var p = {};
      define2(p, a2, function() {
        return this;
      });
      var d = Object.getPrototypeOf, v = d && d(d(values([])));
      v && v !== r && n.call(v, a2) && (p = v);
      var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
      function defineIteratorMethods(t3) {
        ["next", "throw", "return"].forEach(function(e3) {
          define2(t3, e3, function(t4) {
            return this._invoke(e3, t4);
          });
        });
      }
      function AsyncIterator(t3, e3) {
        function invoke(r3, o3, i2, a3) {
          var c2 = tryCatch(t3[r3], t3, o3);
          if ("throw" !== c2.type) {
            var u2 = c2.arg, h3 = u2.value;
            return h3 && "object" == _typeof2(h3) && n.call(h3, "__await") ? e3.resolve(h3.__await).then(function(t4) {
              invoke("next", t4, i2, a3);
            }, function(t4) {
              invoke("throw", t4, i2, a3);
            }) : e3.resolve(h3).then(function(t4) {
              u2.value = t4, i2(u2);
            }, function(t4) {
              return invoke("throw", t4, i2, a3);
            });
          }
          a3(c2.arg);
        }
        var r2;
        o2(this, "_invoke", {
          value: function value(t4, n2) {
            function callInvokeWithMethodAndArg() {
              return new e3(function(e4, r3) {
                invoke(t4, n2, e4, r3);
              });
            }
            return r2 = r2 ? r2.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(e3, r2, n2) {
        var o3 = h2;
        return function(i2, a3) {
          if (o3 === f2)
            throw new Error("Generator is already running");
          if (o3 === s2) {
            if ("throw" === i2)
              throw a3;
            return {
              value: t2,
              done: true
            };
          }
          for (n2.method = i2, n2.arg = a3; ; ) {
            var c2 = n2.delegate;
            if (c2) {
              var u2 = maybeInvokeDelegate(c2, n2);
              if (u2) {
                if (u2 === y)
                  continue;
                return u2;
              }
            }
            if ("next" === n2.method)
              n2.sent = n2._sent = n2.arg;
            else if ("throw" === n2.method) {
              if (o3 === h2)
                throw o3 = s2, n2.arg;
              n2.dispatchException(n2.arg);
            } else
              "return" === n2.method && n2.abrupt("return", n2.arg);
            o3 = f2;
            var p2 = tryCatch(e3, r2, n2);
            if ("normal" === p2.type) {
              if (o3 = n2.done ? s2 : l, p2.arg === y)
                continue;
              return {
                value: p2.arg,
                done: n2.done
              };
            }
            "throw" === p2.type && (o3 = s2, n2.method = "throw", n2.arg = p2.arg);
          }
        };
      }
      function maybeInvokeDelegate(e3, r2) {
        var n2 = r2.method, o3 = e3.iterator[n2];
        if (o3 === t2)
          return r2.delegate = null, "throw" === n2 && e3.iterator["return"] && (r2.method = "return", r2.arg = t2, maybeInvokeDelegate(e3, r2), "throw" === r2.method) || "return" !== n2 && (r2.method = "throw", r2.arg = new TypeError("The iterator does not provide a '" + n2 + "' method")), y;
        var i2 = tryCatch(o3, e3.iterator, r2.arg);
        if ("throw" === i2.type)
          return r2.method = "throw", r2.arg = i2.arg, r2.delegate = null, y;
        var a3 = i2.arg;
        return a3 ? a3.done ? (r2[e3.resultName] = a3.value, r2.next = e3.nextLoc, "return" !== r2.method && (r2.method = "next", r2.arg = t2), r2.delegate = null, y) : a3 : (r2.method = "throw", r2.arg = new TypeError("iterator result is not an object"), r2.delegate = null, y);
      }
      function pushTryEntry(t3) {
        var e3 = {
          tryLoc: t3[0]
        };
        1 in t3 && (e3.catchLoc = t3[1]), 2 in t3 && (e3.finallyLoc = t3[2], e3.afterLoc = t3[3]), this.tryEntries.push(e3);
      }
      function resetTryEntry(t3) {
        var e3 = t3.completion || {};
        e3.type = "normal", delete e3.arg, t3.completion = e3;
      }
      function Context(t3) {
        this.tryEntries = [{
          tryLoc: "root"
        }], t3.forEach(pushTryEntry, this), this.reset(true);
      }
      function values(e3) {
        if (e3 || "" === e3) {
          var r2 = e3[a2];
          if (r2)
            return r2.call(e3);
          if ("function" == typeof e3.next)
            return e3;
          if (!isNaN(e3.length)) {
            var o3 = -1, i2 = function next() {
              for (; ++o3 < e3.length; )
                if (n.call(e3, o3))
                  return next.value = e3[o3], next.done = false, next;
              return next.value = t2, next.done = true, next;
            };
            return i2.next = i2;
          }
        }
        throw new TypeError(_typeof2(e3) + " is not iterable");
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, o2(g, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), o2(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, u, "GeneratorFunction"), e2.isGeneratorFunction = function(t3) {
        var e3 = "function" == typeof t3 && t3.constructor;
        return !!e3 && (e3 === GeneratorFunction || "GeneratorFunction" === (e3.displayName || e3.name));
      }, e2.mark = function(t3) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(t3, GeneratorFunctionPrototype) : (t3.__proto__ = GeneratorFunctionPrototype, define2(t3, u, "GeneratorFunction")), t3.prototype = Object.create(g), t3;
      }, e2.awrap = function(t3) {
        return {
          __await: t3
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define2(AsyncIterator.prototype, c, function() {
        return this;
      }), e2.AsyncIterator = AsyncIterator, e2.async = function(t3, r2, n2, o3, i2) {
        void 0 === i2 && (i2 = Promise);
        var a3 = new AsyncIterator(wrap(t3, r2, n2, o3), i2);
        return e2.isGeneratorFunction(r2) ? a3 : a3.next().then(function(t4) {
          return t4.done ? t4.value : a3.next();
        });
      }, defineIteratorMethods(g), define2(g, u, "Generator"), define2(g, a2, function() {
        return this;
      }), define2(g, "toString", function() {
        return "[object Generator]";
      }), e2.keys = function(t3) {
        var e3 = Object(t3), r2 = [];
        for (var n2 in e3)
          r2.push(n2);
        return r2.reverse(), function next() {
          for (; r2.length; ) {
            var t4 = r2.pop();
            if (t4 in e3)
              return next.value = t4, next.done = false, next;
          }
          return next.done = true, next;
        };
      }, e2.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(e3) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = t2, this.done = false, this.delegate = null, this.method = "next", this.arg = t2, this.tryEntries.forEach(resetTryEntry), !e3)
            for (var r2 in this)
              "t" === r2.charAt(0) && n.call(this, r2) && !isNaN(+r2.slice(1)) && (this[r2] = t2);
        },
        stop: function stop() {
          this.done = true;
          var t3 = this.tryEntries[0].completion;
          if ("throw" === t3.type)
            throw t3.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(e3) {
          if (this.done)
            throw e3;
          var r2 = this;
          function handle(n2, o4) {
            return a3.type = "throw", a3.arg = e3, r2.next = n2, o4 && (r2.method = "next", r2.arg = t2), !!o4;
          }
          for (var o3 = this.tryEntries.length - 1; o3 >= 0; --o3) {
            var i2 = this.tryEntries[o3], a3 = i2.completion;
            if ("root" === i2.tryLoc)
              return handle("end");
            if (i2.tryLoc <= this.prev) {
              var c2 = n.call(i2, "catchLoc"), u2 = n.call(i2, "finallyLoc");
              if (c2 && u2) {
                if (this.prev < i2.catchLoc)
                  return handle(i2.catchLoc, true);
                if (this.prev < i2.finallyLoc)
                  return handle(i2.finallyLoc);
              } else if (c2) {
                if (this.prev < i2.catchLoc)
                  return handle(i2.catchLoc, true);
              } else {
                if (!u2)
                  throw new Error("try statement without catch or finally");
                if (this.prev < i2.finallyLoc)
                  return handle(i2.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(t3, e3) {
          for (var r2 = this.tryEntries.length - 1; r2 >= 0; --r2) {
            var o3 = this.tryEntries[r2];
            if (o3.tryLoc <= this.prev && n.call(o3, "finallyLoc") && this.prev < o3.finallyLoc) {
              var i2 = o3;
              break;
            }
          }
          i2 && ("break" === t3 || "continue" === t3) && i2.tryLoc <= e3 && e3 <= i2.finallyLoc && (i2 = null);
          var a3 = i2 ? i2.completion : {};
          return a3.type = t3, a3.arg = e3, i2 ? (this.method = "next", this.next = i2.finallyLoc, y) : this.complete(a3);
        },
        complete: function complete(t3, e3) {
          if ("throw" === t3.type)
            throw t3.arg;
          return "break" === t3.type || "continue" === t3.type ? this.next = t3.arg : "return" === t3.type ? (this.rval = this.arg = t3.arg, this.method = "return", this.next = "end") : "normal" === t3.type && e3 && (this.next = e3), y;
        },
        finish: function finish(t3) {
          for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
            var r2 = this.tryEntries[e3];
            if (r2.finallyLoc === t3)
              return this.complete(r2.completion, r2.afterLoc), resetTryEntry(r2), y;
          }
        },
        "catch": function _catch(t3) {
          for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
            var r2 = this.tryEntries[e3];
            if (r2.tryLoc === t3) {
              var n2 = r2.completion;
              if ("throw" === n2.type) {
                var o3 = n2.arg;
                resetTryEntry(r2);
              }
              return o3;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(e3, r2, n2) {
          return this.delegate = {
            iterator: values(e3),
            resultName: r2,
            nextLoc: n2
          }, "next" === this.method && (this.arg = t2), y;
        }
      }, e2;
    }
    module.exports = _regeneratorRuntime2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports, module) {
    var runtime = require_regeneratorRuntime()();
    module.exports = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/form-data/lib/browser.js
var require_browser = __commonJS({
  "node_modules/form-data/lib/browser.js"(exports, module) {
    module.exports = typeof self == "object" ? self.FormData : window.FormData;
  }
});

// node_modules/isomorphic-ws/browser.js
var require_browser2 = __commonJS({
  "node_modules/isomorphic-ws/browser.js"(exports, module) {
    var ws = null;
    if (typeof WebSocket !== "undefined") {
      ws = WebSocket;
    } else if (typeof MozWebSocket !== "undefined") {
      ws = MozWebSocket;
    } else if (typeof global !== "undefined") {
      ws = global.WebSocket || global.MozWebSocket;
    } else if (typeof window !== "undefined") {
      ws = window.WebSocket || window.MozWebSocket;
    } else if (typeof self !== "undefined") {
      ws = self.WebSocket || self.MozWebSocket;
    }
    module.exports = ws;
  }
});

// node_modules/pretty-bytes/index.js
var require_pretty_bytes = __commonJS({
  "node_modules/pretty-bytes/index.js"(exports, module) {
    "use strict";
    var BYTE_UNITS = [
      "B",
      "kB",
      "MB",
      "GB",
      "TB",
      "PB",
      "EB",
      "ZB",
      "YB"
    ];
    var BIBYTE_UNITS = [
      "B",
      "kiB",
      "MiB",
      "GiB",
      "TiB",
      "PiB",
      "EiB",
      "ZiB",
      "YiB"
    ];
    var BIT_UNITS = [
      "b",
      "kbit",
      "Mbit",
      "Gbit",
      "Tbit",
      "Pbit",
      "Ebit",
      "Zbit",
      "Ybit"
    ];
    var BIBIT_UNITS = [
      "b",
      "kibit",
      "Mibit",
      "Gibit",
      "Tibit",
      "Pibit",
      "Eibit",
      "Zibit",
      "Yibit"
    ];
    var toLocaleString = (number, locale, options) => {
      let result = number;
      if (typeof locale === "string" || Array.isArray(locale)) {
        result = number.toLocaleString(locale, options);
      } else if (locale === true || options !== void 0) {
        result = number.toLocaleString(void 0, options);
      }
      return result;
    };
    module.exports = (number, options) => {
      if (!Number.isFinite(number)) {
        throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);
      }
      options = Object.assign({ bits: false, binary: false }, options);
      const UNITS = options.bits ? options.binary ? BIBIT_UNITS : BIT_UNITS : options.binary ? BIBYTE_UNITS : BYTE_UNITS;
      if (options.signed && number === 0) {
        return ` 0 ${UNITS[0]}`;
      }
      const isNegative = number < 0;
      const prefix = isNegative ? "-" : options.signed ? "+" : "";
      if (isNegative) {
        number = -number;
      }
      let localeOptions;
      if (options.minimumFractionDigits !== void 0) {
        localeOptions = { minimumFractionDigits: options.minimumFractionDigits };
      }
      if (options.maximumFractionDigits !== void 0) {
        localeOptions = Object.assign({ maximumFractionDigits: options.maximumFractionDigits }, localeOptions);
      }
      if (number < 1) {
        const numberString2 = toLocaleString(number, options.locale, localeOptions);
        return prefix + numberString2 + " " + UNITS[0];
      }
      const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);
      number /= Math.pow(options.binary ? 1024 : 1e3, exponent);
      if (!localeOptions) {
        number = number.toPrecision(3);
      }
      const numberString = toLocaleString(Number(number), options.locale, localeOptions);
      const unit = UNITS[exponent];
      return prefix + numberString + " " + unit;
    };
  }
});

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/dayjs/dayjs.min.js"(exports, module) {
    !function(t2, e2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e2() : "function" == typeof define && define.amd ? define(e2) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs = e2();
    }(exports, function() {
      "use strict";
      var t2 = 1e3, e2 = 6e4, n = 36e5, r = "millisecond", i = "second", s2 = "minute", u = "hour", a2 = "day", o2 = "week", c = "month", f2 = "quarter", h2 = "year", d = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
        var e3 = ["th", "st", "nd", "rd"], n2 = t3 % 100;
        return "[" + t3 + (e3[(n2 - 20) % 10] || e3[n2] || e3[0]) + "]";
      } }, m = function(t3, e3, n2) {
        var r2 = String(t3);
        return !r2 || r2.length >= e3 ? t3 : "" + Array(e3 + 1 - r2.length).join(n2) + t3;
      }, v = { s: m, z: function(t3) {
        var e3 = -t3.utcOffset(), n2 = Math.abs(e3), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
        return (e3 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
      }, m: function t3(e3, n2) {
        if (e3.date() < n2.date())
          return -t3(n2, e3);
        var r2 = 12 * (n2.year() - e3.year()) + (n2.month() - e3.month()), i2 = e3.clone().add(r2, c), s3 = n2 - i2 < 0, u2 = e3.clone().add(r2 + (s3 ? -1 : 1), c);
        return +(-(r2 + (n2 - i2) / (s3 ? i2 - u2 : u2 - i2)) || 0);
      }, a: function(t3) {
        return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
      }, p: function(t3) {
        return { M: c, y: h2, w: o2, d: a2, D: d, h: u, m: s2, s: i, ms: r, Q: f2 }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t3) {
        return void 0 === t3;
      } }, g = "en", D = {};
      D[g] = M;
      var p = "$isDayjsObject", S = function(t3) {
        return t3 instanceof _ || !(!t3 || !t3[p]);
      }, w = function t3(e3, n2, r2) {
        var i2;
        if (!e3)
          return g;
        if ("string" == typeof e3) {
          var s3 = e3.toLowerCase();
          D[s3] && (i2 = s3), n2 && (D[s3] = n2, i2 = s3);
          var u2 = e3.split("-");
          if (!i2 && u2.length > 1)
            return t3(u2[0]);
        } else {
          var a3 = e3.name;
          D[a3] = e3, i2 = a3;
        }
        return !r2 && i2 && (g = i2), i2 || !r2 && g;
      }, O = function(t3, e3) {
        if (S(t3))
          return t3.clone();
        var n2 = "object" == typeof e3 ? e3 : {};
        return n2.date = t3, n2.args = arguments, new _(n2);
      }, b = v;
      b.l = w, b.i = S, b.w = function(t3, e3) {
        return O(t3, { locale: e3.$L, utc: e3.$u, x: e3.$x, $offset: e3.$offset });
      };
      var _ = function() {
        function M2(t3) {
          this.$L = w(t3.locale, null, true), this.parse(t3), this.$x = this.$x || t3.x || {}, this[p] = true;
        }
        var m2 = M2.prototype;
        return m2.parse = function(t3) {
          this.$d = function(t4) {
            var e3 = t4.date, n2 = t4.utc;
            if (null === e3)
              return /* @__PURE__ */ new Date(NaN);
            if (b.u(e3))
              return /* @__PURE__ */ new Date();
            if (e3 instanceof Date)
              return new Date(e3);
            if ("string" == typeof e3 && !/Z$/i.test(e3)) {
              var r2 = e3.match($);
              if (r2) {
                var i2 = r2[2] - 1 || 0, s3 = (r2[7] || "0").substring(0, 3);
                return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s3)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s3);
              }
            }
            return new Date(e3);
          }(t3), this.init();
        }, m2.init = function() {
          var t3 = this.$d;
          this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
        }, m2.$utils = function() {
          return b;
        }, m2.isValid = function() {
          return !(this.$d.toString() === l);
        }, m2.isSame = function(t3, e3) {
          var n2 = O(t3);
          return this.startOf(e3) <= n2 && n2 <= this.endOf(e3);
        }, m2.isAfter = function(t3, e3) {
          return O(t3) < this.startOf(e3);
        }, m2.isBefore = function(t3, e3) {
          return this.endOf(e3) < O(t3);
        }, m2.$g = function(t3, e3, n2) {
          return b.u(t3) ? this[e3] : this.set(n2, t3);
        }, m2.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m2.valueOf = function() {
          return this.$d.getTime();
        }, m2.startOf = function(t3, e3) {
          var n2 = this, r2 = !!b.u(e3) || e3, f3 = b.p(t3), l2 = function(t4, e4) {
            var i2 = b.w(n2.$u ? Date.UTC(n2.$y, e4, t4) : new Date(n2.$y, e4, t4), n2);
            return r2 ? i2 : i2.endOf(a2);
          }, $2 = function(t4, e4) {
            return b.w(n2.toDate()[t4].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e4)), n2);
          }, y2 = this.$W, M3 = this.$M, m3 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
          switch (f3) {
            case h2:
              return r2 ? l2(1, 0) : l2(31, 11);
            case c:
              return r2 ? l2(1, M3) : l2(0, M3 + 1);
            case o2:
              var g2 = this.$locale().weekStart || 0, D2 = (y2 < g2 ? y2 + 7 : y2) - g2;
              return l2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
            case a2:
            case d:
              return $2(v2 + "Hours", 0);
            case u:
              return $2(v2 + "Minutes", 1);
            case s2:
              return $2(v2 + "Seconds", 2);
            case i:
              return $2(v2 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m2.endOf = function(t3) {
          return this.startOf(t3, false);
        }, m2.$set = function(t3, e3) {
          var n2, o3 = b.p(t3), f3 = "set" + (this.$u ? "UTC" : ""), l2 = (n2 = {}, n2[a2] = f3 + "Date", n2[d] = f3 + "Date", n2[c] = f3 + "Month", n2[h2] = f3 + "FullYear", n2[u] = f3 + "Hours", n2[s2] = f3 + "Minutes", n2[i] = f3 + "Seconds", n2[r] = f3 + "Milliseconds", n2)[o3], $2 = o3 === a2 ? this.$D + (e3 - this.$W) : e3;
          if (o3 === c || o3 === h2) {
            var y2 = this.clone().set(d, 1);
            y2.$d[l2]($2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
          } else
            l2 && this.$d[l2]($2);
          return this.init(), this;
        }, m2.set = function(t3, e3) {
          return this.clone().$set(t3, e3);
        }, m2.get = function(t3) {
          return this[b.p(t3)]();
        }, m2.add = function(r2, f3) {
          var d2, l2 = this;
          r2 = Number(r2);
          var $2 = b.p(f3), y2 = function(t3) {
            var e3 = O(l2);
            return b.w(e3.date(e3.date() + Math.round(t3 * r2)), l2);
          };
          if ($2 === c)
            return this.set(c, this.$M + r2);
          if ($2 === h2)
            return this.set(h2, this.$y + r2);
          if ($2 === a2)
            return y2(1);
          if ($2 === o2)
            return y2(7);
          var M3 = (d2 = {}, d2[s2] = e2, d2[u] = n, d2[i] = t2, d2)[$2] || 1, m3 = this.$d.getTime() + r2 * M3;
          return b.w(m3, this);
        }, m2.subtract = function(t3, e3) {
          return this.add(-1 * t3, e3);
        }, m2.format = function(t3) {
          var e3 = this, n2 = this.$locale();
          if (!this.isValid())
            return n2.invalidDate || l;
          var r2 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i2 = b.z(this), s3 = this.$H, u2 = this.$m, a3 = this.$M, o3 = n2.weekdays, c2 = n2.months, f3 = n2.meridiem, h3 = function(t4, n3, i3, s4) {
            return t4 && (t4[n3] || t4(e3, r2)) || i3[n3].slice(0, s4);
          }, d2 = function(t4) {
            return b.s(s3 % 12 || 12, t4, "0");
          }, $2 = f3 || function(t4, e4, n3) {
            var r3 = t4 < 12 ? "AM" : "PM";
            return n3 ? r3.toLowerCase() : r3;
          };
          return r2.replace(y, function(t4, r3) {
            return r3 || function(t5) {
              switch (t5) {
                case "YY":
                  return String(e3.$y).slice(-2);
                case "YYYY":
                  return b.s(e3.$y, 4, "0");
                case "M":
                  return a3 + 1;
                case "MM":
                  return b.s(a3 + 1, 2, "0");
                case "MMM":
                  return h3(n2.monthsShort, a3, c2, 3);
                case "MMMM":
                  return h3(c2, a3);
                case "D":
                  return e3.$D;
                case "DD":
                  return b.s(e3.$D, 2, "0");
                case "d":
                  return String(e3.$W);
                case "dd":
                  return h3(n2.weekdaysMin, e3.$W, o3, 2);
                case "ddd":
                  return h3(n2.weekdaysShort, e3.$W, o3, 3);
                case "dddd":
                  return o3[e3.$W];
                case "H":
                  return String(s3);
                case "HH":
                  return b.s(s3, 2, "0");
                case "h":
                  return d2(1);
                case "hh":
                  return d2(2);
                case "a":
                  return $2(s3, u2, true);
                case "A":
                  return $2(s3, u2, false);
                case "m":
                  return String(u2);
                case "mm":
                  return b.s(u2, 2, "0");
                case "s":
                  return String(e3.$s);
                case "ss":
                  return b.s(e3.$s, 2, "0");
                case "SSS":
                  return b.s(e3.$ms, 3, "0");
                case "Z":
                  return i2;
              }
              return null;
            }(t4) || i2.replace(":", "");
          });
        }, m2.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m2.diff = function(r2, d2, l2) {
          var $2, y2 = this, M3 = b.p(d2), m3 = O(r2), v2 = (m3.utcOffset() - this.utcOffset()) * e2, g2 = this - m3, D2 = function() {
            return b.m(y2, m3);
          };
          switch (M3) {
            case h2:
              $2 = D2() / 12;
              break;
            case c:
              $2 = D2();
              break;
            case f2:
              $2 = D2() / 3;
              break;
            case o2:
              $2 = (g2 - v2) / 6048e5;
              break;
            case a2:
              $2 = (g2 - v2) / 864e5;
              break;
            case u:
              $2 = g2 / n;
              break;
            case s2:
              $2 = g2 / e2;
              break;
            case i:
              $2 = g2 / t2;
              break;
            default:
              $2 = g2;
          }
          return l2 ? $2 : b.a($2);
        }, m2.daysInMonth = function() {
          return this.endOf(c).$D;
        }, m2.$locale = function() {
          return D[this.$L];
        }, m2.locale = function(t3, e3) {
          if (!t3)
            return this.$L;
          var n2 = this.clone(), r2 = w(t3, e3, true);
          return r2 && (n2.$L = r2), n2;
        }, m2.clone = function() {
          return b.w(this.$d, this);
        }, m2.toDate = function() {
          return new Date(this.valueOf());
        }, m2.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m2.toISOString = function() {
          return this.$d.toISOString();
        }, m2.toString = function() {
          return this.$d.toUTCString();
        }, M2;
      }(), k = _.prototype;
      return O.prototype = k, [["$ms", r], ["$s", i], ["$m", s2], ["$H", u], ["$W", a2], ["$M", c], ["$y", h2], ["$D", d]].forEach(function(t3) {
        k[t3[1]] = function(e3) {
          return this.$g(e3, t3[0], t3[1]);
        };
      }), O.extend = function(t3, e3) {
        return t3.$i || (t3(e3, _, O), t3.$i = true), O;
      }, O.locale = w, O.isDayjs = S, O.unix = function(t3) {
        return O(1e3 * t3);
      }, O.en = D[g], O.Ls = D, O.p = {}, O;
    });
  }
});

// node_modules/dayjs/plugin/calendar.js
var require_calendar = __commonJS({
  "node_modules/dayjs/plugin/calendar.js"(exports, module) {
    !function(e2, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e2 = "undefined" != typeof globalThis ? globalThis : e2 || self).dayjs_plugin_calendar = t2();
    }(exports, function() {
      "use strict";
      return function(e2, t2, a2) {
        var n = "h:mm A", d = { lastDay: "[Yesterday at] " + n, sameDay: "[Today at] " + n, nextDay: "[Tomorrow at] " + n, nextWeek: "dddd [at] " + n, lastWeek: "[Last] dddd [at] " + n, sameElse: "MM/DD/YYYY" };
        t2.prototype.calendar = function(e3, t3) {
          var n2 = t3 || this.$locale().calendar || d, o2 = a2(e3 || void 0).startOf("d"), s2 = this.diff(o2, "d", true), i = "sameElse", f2 = s2 < -6 ? i : s2 < -1 ? "lastWeek" : s2 < 0 ? "lastDay" : s2 < 1 ? "sameDay" : s2 < 2 ? "nextDay" : s2 < 7 ? "nextWeek" : i, l = n2[f2] || d[f2];
          return "function" == typeof l ? l.call(this, a2()) : this.format(l);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/relativeTime.js
var require_relativeTime = __commonJS({
  "node_modules/dayjs/plugin/relativeTime.js"(exports, module) {
    !function(r, e2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e2() : "function" == typeof define && define.amd ? define(e2) : (r = "undefined" != typeof globalThis ? globalThis : r || self).dayjs_plugin_relativeTime = e2();
    }(exports, function() {
      "use strict";
      return function(r, e2, t2) {
        r = r || {};
        var n = e2.prototype, o2 = { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" };
        function i(r2, e3, t3, o3) {
          return n.fromToBase(r2, e3, t3, o3);
        }
        t2.en.relativeTime = o2, n.fromToBase = function(e3, n2, i2, d2, u) {
          for (var f2, a2, s2, l = i2.$locale().relativeTime || o2, h2 = r.thresholds || [{ l: "s", r: 44, d: "second" }, { l: "m", r: 89 }, { l: "mm", r: 44, d: "minute" }, { l: "h", r: 89 }, { l: "hh", r: 21, d: "hour" }, { l: "d", r: 35 }, { l: "dd", r: 25, d: "day" }, { l: "M", r: 45 }, { l: "MM", r: 10, d: "month" }, { l: "y", r: 17 }, { l: "yy", d: "year" }], m = h2.length, c = 0; c < m; c += 1) {
            var y = h2[c];
            y.d && (f2 = d2 ? t2(e3).diff(i2, y.d, true) : i2.diff(e3, y.d, true));
            var p = (r.rounding || Math.round)(Math.abs(f2));
            if (s2 = f2 > 0, p <= y.r || !y.r) {
              p <= 1 && c > 0 && (y = h2[c - 1]);
              var v = l[y.l];
              u && (p = u("" + p)), a2 = "string" == typeof v ? v.replace("%d", p) : v(p, n2, y.l, s2);
              break;
            }
          }
          if (n2)
            return a2;
          var M = s2 ? l.future : l.past;
          return "function" == typeof M ? M(a2) : M.replace("%s", a2);
        }, n.to = function(r2, e3) {
          return i(r2, e3, this, true);
        }, n.from = function(r2, e3) {
          return i(r2, e3, this);
        };
        var d = function(r2) {
          return r2.$u ? t2.utc() : t2();
        };
        n.toNow = function(r2) {
          return this.to(d(this), r2);
        }, n.fromNow = function(r2) {
          return this.from(d(this), r2);
        };
      };
    });
  }
});

// node_modules/lodash.deburr/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.deburr/index.js"(exports, module) {
    var INFINITY = 1 / 0;
    var symbolTag = "[object Symbol]";
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23";
    var rsComboSymbolsRange = "\\u20d0-\\u20f0";
    var rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]";
    var reComboMark = RegExp(rsCombo, "g");
    var deburredLetters = {
      // Latin-1 Supplement block.
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ã": "A",
      "Ä": "A",
      "Å": "A",
      "à": "a",
      "á": "a",
      "â": "a",
      "ã": "a",
      "ä": "a",
      "å": "a",
      "Ç": "C",
      "ç": "c",
      "Ð": "D",
      "ð": "d",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ë": "E",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ë": "e",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ï": "I",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ï": "i",
      "Ñ": "N",
      "ñ": "n",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Õ": "O",
      "Ö": "O",
      "Ø": "O",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "õ": "o",
      "ö": "o",
      "ø": "o",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ü": "U",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ü": "u",
      "Ý": "Y",
      "ý": "y",
      "ÿ": "y",
      "Æ": "Ae",
      "æ": "ae",
      "Þ": "Th",
      "þ": "th",
      "ß": "ss",
      // Latin Extended-A block.
      "Ā": "A",
      "Ă": "A",
      "Ą": "A",
      "ā": "a",
      "ă": "a",
      "ą": "a",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "Ď": "D",
      "Đ": "D",
      "ď": "d",
      "đ": "d",
      "Ē": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ę": "E",
      "Ě": "E",
      "ē": "e",
      "ĕ": "e",
      "ė": "e",
      "ę": "e",
      "ě": "e",
      "Ĝ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ģ": "G",
      "ĝ": "g",
      "ğ": "g",
      "ġ": "g",
      "ģ": "g",
      "Ĥ": "H",
      "Ħ": "H",
      "ĥ": "h",
      "ħ": "h",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "Į": "I",
      "İ": "I",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "į": "i",
      "ı": "i",
      "Ĵ": "J",
      "ĵ": "j",
      "Ķ": "K",
      "ķ": "k",
      "ĸ": "k",
      "Ĺ": "L",
      "Ļ": "L",
      "Ľ": "L",
      "Ŀ": "L",
      "Ł": "L",
      "ĺ": "l",
      "ļ": "l",
      "ľ": "l",
      "ŀ": "l",
      "ł": "l",
      "Ń": "N",
      "Ņ": "N",
      "Ň": "N",
      "Ŋ": "N",
      "ń": "n",
      "ņ": "n",
      "ň": "n",
      "ŋ": "n",
      "Ō": "O",
      "Ŏ": "O",
      "Ő": "O",
      "ō": "o",
      "ŏ": "o",
      "ő": "o",
      "Ŕ": "R",
      "Ŗ": "R",
      "Ř": "R",
      "ŕ": "r",
      "ŗ": "r",
      "ř": "r",
      "Ś": "S",
      "Ŝ": "S",
      "Ş": "S",
      "Š": "S",
      "ś": "s",
      "ŝ": "s",
      "ş": "s",
      "š": "s",
      "Ţ": "T",
      "Ť": "T",
      "Ŧ": "T",
      "ţ": "t",
      "ť": "t",
      "ŧ": "t",
      "Ũ": "U",
      "Ū": "U",
      "Ŭ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ų": "U",
      "ũ": "u",
      "ū": "u",
      "ŭ": "u",
      "ů": "u",
      "ű": "u",
      "ų": "u",
      "Ŵ": "W",
      "ŵ": "w",
      "Ŷ": "Y",
      "ŷ": "y",
      "Ÿ": "Y",
      "Ź": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "ź": "z",
      "ż": "z",
      "ž": "z",
      "Ĳ": "IJ",
      "ĳ": "ij",
      "Œ": "Oe",
      "œ": "oe",
      "ŉ": "'n",
      "ſ": "ss"
    };
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var Symbol2 = root.Symbol;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString3(value) {
      return value == null ? "" : baseToString(value);
    }
    function deburr(string) {
      string = toString3(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    module.exports = deburr;
  }
});

// node_modules/stream-chat/dist/browser.es.js
var import_base64_js = __toESM(require_base64_js());

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o2) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof(o2);
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}

// node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}

// node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n = Object.prototype.toString.call(o2).slice(8, -1);
  if (n === "Object" && o2.constructor)
    n = o2.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o2);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o2, minLen);
}

// node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

// node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self2 = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self2, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/stream-chat/dist/browser.es.js
var import_regenerator = __toESM(require_regenerator());

// node_modules/stream-chat/node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/stream-chat/node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined")
    return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a2, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a2[key] = bind(val, thisArg);
    } else {
      a2[key] = val;
    }
  }, { allOwnKeys });
  return a2;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter3, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter3 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter3 || filter3(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i = thing.length;
  if (!isNumber(i))
    return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define2 = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
var ALPHA = "abcdefghijklmnopqrstuvwxyz";
var DIGIT = "0123456789";
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
var generateString = (size2 = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = "";
  const { length } = alphabet;
  while (size2--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};

// node_modules/stream-chat/node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter3(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/stream-chat/node_modules/axios/lib/helpers/null.js
var null_default = null;

// node_modules/stream-chat/node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter2(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/stream-chat/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/stream-chat/node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/stream-chat/node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h2) {
      if (h2 !== null) {
        fn(h2);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/stream-chat/node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/stream-chat/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// node_modules/stream-chat/node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== "undefined" ? FormData : null;

// node_modules/stream-chat/node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== "undefined" ? Blob : null;

// node_modules/stream-chat/node_modules/axios/lib/platform/browser/index.js
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// node_modules/stream-chat/node_modules/axios/lib/platform/common/utils.js
var utils_exports = {};
__export(utils_exports, {
  hasBrowserEnv: () => hasBrowserEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv
});
var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
var hasStandardBrowserEnv = ((product) => {
  return hasBrowserEnv && ["ReactNative", "NativeScript", "NS"].indexOf(product) < 0;
})(typeof navigator !== "undefined" && navigator.product);
var hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();

// node_modules/stream-chat/node_modules/axios/lib/platform/index.js
var platform_default = __spreadValues(__spreadValues({}, utils_exports), browser_default);

// node_modules/stream-chat/node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// node_modules/stream-chat/node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__")
      return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/stream-chat/node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e2) {
      if (e2.name !== "SyntaxError") {
        throw e2;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e2) {
        if (strictJSONParsing) {
          if (e2.name === "SyntaxError") {
            throw AxiosError_default.from(e2, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e2;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform_default.classes.FormData,
    Blob: platform_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
var defaults_default = defaults;

// node_modules/stream-chat/node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/stream-chat/node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter3, isHeaderNameFilter) {
  if (utils_default.isFunction(filter3)) {
    return filter3.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter3)) {
    return value.indexOf(filter3) !== -1;
  }
  if (utils_default.isRegExp(filter3)) {
    return filter3.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;
    while (i--) {
      const key = keys[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first2, ...targets) {
    const computed = new this(first2);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/stream-chat/node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// node_modules/stream-chat/node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/stream-chat/node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/stream-chat/node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// node_modules/stream-chat/node_modules/axios/lib/helpers/cookies.js
var cookies_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils_default.isString(path) && cookie.push("path=" + path);
      utils_default.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);

// node_modules/stream-chat/node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// node_modules/stream-chat/node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/stream-chat/node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/stream-chat/node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    function resolveURL(url) {
      let href = url;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin(requestURL) {
      const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }()
) : (
  // Non standard browser envs (web workers, react-native) lack needed support.
  function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  }()
);

// node_modules/stream-chat/node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// node_modules/stream-chat/node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min2) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min2 = min2 !== void 0 ? min2 : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min2) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/stream-chat/node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e2) => {
    const loaded = e2.loaded;
    const total = e2.lengthComputable ? e2.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e2
    };
    data[isDownloadStream ? "download" : "upload"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
    let { responseType, withXSRFToken } = config;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }
      if (config.signal) {
        config.signal.removeEventListener("abort", onCanceled);
      }
    }
    let contentType;
    if (utils_default.isFormData(requestData)) {
      if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false);
      } else if ((contentType = requestHeaders.getContentType()) !== false) {
        const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
        requestHeaders.setContentType([type || "multipart/form-data", ...tokens].join("; "));
      }
    }
    let request = new XMLHttpRequest();
    if (config.auth) {
      const username = config.auth.username || "";
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
      requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
    }
    const fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
    request.timeout = config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = config.transitional || transitional_default;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    if (platform_default.hasStandardBrowserEnv) {
      withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));
      if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(fullPath)) {
        const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
        if (xsrfValue) {
          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = config.responseType;
    }
    if (typeof config.onDownloadProgress === "function") {
      request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
    }
    if (typeof config.onUploadProgress === "function" && request.upload) {
      request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
    }
    if (config.cancelToken || config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// node_modules/stream-chat/node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e2) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var renderReason = (reason) => `- ${reason}`;
var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
        if (adapter === void 0) {
          throw new AxiosError_default(`Unknown adapter '${id}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id || "#" + i] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s2 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError_default(
        `There is no suitable adapter to dispatch the request ` + s2,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter;
  },
  adapters: knownAdapters
};

// node_modules/stream-chat/node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/stream-chat/node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a2, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a2, b, caseless);
    } else if (!utils_default.isUndefined(a2)) {
      return getMergedValue(void 0, a2, caseless);
    }
  }
  function valueFromConfig2(a2, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a2, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a2)) {
      return getMergedValue(void 0, a2);
    }
  }
  function mergeDirectKeys(a2, b, prop) {
    if (prop in config2) {
      return getMergedValue(a2, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a2);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a2, b) => mergeDeepProperties(headersToObject(a2), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/stream-chat/node_modules/axios/lib/env/data.js
var VERSION = "1.6.5";

// node_modules/stream-chat/node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version2, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version2 + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/stream-chat/node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    headers && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/stream-chat/node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class _CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new _CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/stream-chat/node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/stream-chat/node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/stream-chat/node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/stream-chat/node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters_default.getAdapter;
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// node_modules/stream-chat/node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  getAdapter,
  mergeConfig: mergeConfig2
} = axios_default;

// node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}

// node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(r, l) {
  var t2 = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t2) {
    var e2, n, i, u, a2 = [], f2 = true, o2 = false;
    try {
      if (i = (t2 = t2.call(r)).next, 0 === l) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a2.push(e2.value), a2.length !== l); f2 = true)
          ;
    } catch (r2) {
      o2 = true, n = r2;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u = t2["return"](), Object(u) !== u))
          return;
      } finally {
        if (o2)
          throw n;
      }
    }
    return a2;
  }
}

// node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

// node_modules/stream-chat/dist/browser.es.js
var import_form_data = __toESM(require_browser());
var import_isomorphic_ws = __toESM(require_browser2());

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o2, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p2) {
    o3.__proto__ = p2;
    return o3;
  };
  return _setPrototypeOf(o2, p);
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o2) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
    return o3.__proto__ || Object.getPrototypeOf(o3);
  };
  return _getPrototypeOf(o2);
}

// node_modules/@babel/runtime/helpers/esm/isNativeFunction.js
function _isNativeFunction(fn) {
  try {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  } catch (e2) {
    return typeof fn === "function";
  }
}

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}

// node_modules/@babel/runtime/helpers/esm/construct.js
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a2 = [null];
      a2.push.apply(a2, args2);
      var Constructor = Function.bind.apply(Parent2, a2);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}

// node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}

// node_modules/stream-chat/dist/browser.es.js
function isString$1(arrayOrString) {
  return typeof arrayOrString === "string";
}
function isMapStringCallback(arrayOrString, callback) {
  return !!callback && isString$1(arrayOrString);
}
function map2(arrayOrString, callback) {
  var res = [];
  if (isString$1(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {
    for (var k = 0, len = arrayOrString.length; k < len; k++) {
      if (arrayOrString.charAt(k)) {
        var kValue = arrayOrString.charAt(k);
        var mappedValue = callback(kValue, k, arrayOrString);
        res[k] = mappedValue;
      }
    }
  } else if (!isString$1(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {
    for (var _k = 0, _len = arrayOrString.length; _k < _len; _k++) {
      if (_k in arrayOrString) {
        var _kValue = arrayOrString[_k];
        var _mappedValue = callback(_kValue, _k, arrayOrString);
        res[_k] = _mappedValue;
      }
    }
  }
  return res;
}
var encodeBase64 = function encodeBase642(data) {
  return (0, import_base64_js.fromByteArray)(new Uint8Array(map2(data, function(char) {
    return char.charCodeAt(0);
  })));
};
var decodeBase64 = function decodeBase642(s2) {
  var e2 = {}, w = String.fromCharCode, L = s2.length;
  var i, b = 0, c, x, l = 0, a2, r = "";
  var A = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (i = 0; i < 64; i++) {
    e2[A.charAt(i)] = i;
  }
  for (x = 0; x < L; x++) {
    c = e2[s2.charAt(x)];
    b = (b << 6) + c;
    l += 6;
    while (l >= 8) {
      ((a2 = b >>> (l -= 8) & 255) || x < L - 2) && (r += w(a2));
    }
  }
  return r;
};
var https = null;
function ownKeys$6(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$6(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$6(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$6(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var ChannelState = function() {
  function ChannelState2(channel) {
    var _this = this, _channel$state;
    _classCallCheck(this, ChannelState2);
    _defineProperty(this, "_channel", void 0);
    _defineProperty(this, "watcher_count", void 0);
    _defineProperty(this, "typing", void 0);
    _defineProperty(this, "read", void 0);
    _defineProperty(this, "pinnedMessages", void 0);
    _defineProperty(this, "pending_messages", void 0);
    _defineProperty(this, "threads", void 0);
    _defineProperty(this, "mutedUsers", void 0);
    _defineProperty(this, "watchers", void 0);
    _defineProperty(this, "members", void 0);
    _defineProperty(this, "unreadCount", void 0);
    _defineProperty(this, "membership", void 0);
    _defineProperty(this, "last_message_at", void 0);
    _defineProperty(this, "isUpToDate", void 0);
    _defineProperty(this, "messageSets", []);
    _defineProperty(this, "setIsUpToDate", function(isUpToDate) {
      _this.isUpToDate = isUpToDate;
    });
    _defineProperty(this, "removeMessageFromArray", function(msgArray, msg) {
      var result = msgArray.filter(function(message) {
        return !(!!message.id && !!msg.id && message.id === msg.id);
      });
      return {
        removed: result.length < msgArray.length,
        result
      };
    });
    _defineProperty(this, "updateUserMessages", function(user) {
      var _updateUserMessages = function _updateUserMessages2(messages, user2) {
        for (var i = 0; i < messages.length; i++) {
          var _m$user;
          var m = messages[i];
          if (((_m$user = m.user) === null || _m$user === void 0 ? void 0 : _m$user.id) === user2.id) {
            messages[i] = _objectSpread$6(_objectSpread$6({}, m), {}, {
              user: user2
            });
          }
        }
      };
      _this.messageSets.forEach(function(set) {
        return _updateUserMessages(set.messages, user);
      });
      for (var parentId in _this.threads) {
        _updateUserMessages(_this.threads[parentId], user);
      }
      _updateUserMessages(_this.pinnedMessages, user);
    });
    _defineProperty(this, "deleteUserMessages", function(user) {
      var hardDelete = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var _deleteUserMessages = function _deleteUserMessages2(messages, user2) {
        var hardDelete2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        for (var i = 0; i < messages.length; i++) {
          var _m$user2;
          var m = messages[i];
          if (((_m$user2 = m.user) === null || _m$user2 === void 0 ? void 0 : _m$user2.id) !== user2.id) {
            continue;
          }
          if (hardDelete2) {
            messages[i] = {
              cid: m.cid,
              created_at: m.created_at,
              deleted_at: user2.deleted_at,
              id: m.id,
              latest_reactions: [],
              mentioned_users: [],
              own_reactions: [],
              parent_id: m.parent_id,
              reply_count: m.reply_count,
              status: m.status,
              thread_participants: m.thread_participants,
              type: "deleted",
              updated_at: m.updated_at,
              user: m.user
            };
          } else {
            messages[i] = _objectSpread$6(_objectSpread$6({}, m), {}, {
              type: "deleted",
              deleted_at: user2.deleted_at
            });
          }
        }
      };
      _this.messageSets.forEach(function(set) {
        return _deleteUserMessages(set.messages, user, hardDelete);
      });
      for (var parentId in _this.threads) {
        _deleteUserMessages(_this.threads[parentId], user, hardDelete);
      }
      _deleteUserMessages(_this.pinnedMessages, user, hardDelete);
    });
    this._channel = channel;
    this.watcher_count = 0;
    this.typing = {};
    this.read = {};
    this.initMessages();
    this.pinnedMessages = [];
    this.pending_messages = [];
    this.threads = {};
    this.mutedUsers = [];
    this.watchers = {};
    this.members = {};
    this.membership = {};
    this.unreadCount = 0;
    this.isUpToDate = true;
    this.last_message_at = (channel === null || channel === void 0 ? void 0 : (_channel$state = channel.state) === null || _channel$state === void 0 ? void 0 : _channel$state.last_message_at) != null ? new Date(channel.state.last_message_at) : null;
  }
  _createClass(ChannelState2, [{
    key: "messages",
    get: function get() {
      var _this$messageSets$fin;
      return ((_this$messageSets$fin = this.messageSets.find(function(s2) {
        return s2.isCurrent;
      })) === null || _this$messageSets$fin === void 0 ? void 0 : _this$messageSets$fin.messages) || [];
    },
    set: function set(messages) {
      var index = this.messageSets.findIndex(function(s2) {
        return s2.isCurrent;
      });
      this.messageSets[index].messages = messages;
    }
    /**
     * The list of latest messages
     * The messages array not always contains the latest messages (for example if a user searched for an earlier message, that is in a different message set)
     */
  }, {
    key: "latestMessages",
    get: function get() {
      var _this$messageSets$fin2;
      return ((_this$messageSets$fin2 = this.messageSets.find(function(s2) {
        return s2.isLatest;
      })) === null || _this$messageSets$fin2 === void 0 ? void 0 : _this$messageSets$fin2.messages) || [];
    },
    set: function set(messages) {
      var index = this.messageSets.findIndex(function(s2) {
        return s2.isLatest;
      });
      this.messageSets[index].messages = messages;
    }
    /**
     * addMessageSorted - Add a message to the state
     *
     * @param {MessageResponse<StreamChatGenerics>} newMessage A new message
     * @param {boolean} timestampChanged Whether updating a message with changed created_at value.
     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.
     * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if message is not in the list (only used if addIfDoesNotExist is true)
     */
  }, {
    key: "addMessageSorted",
    value: function addMessageSorted(newMessage) {
      var timestampChanged = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var addIfDoesNotExist = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var messageSetToAddToIfDoesNotExist = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "latest";
      return this.addMessagesSorted([newMessage], timestampChanged, false, addIfDoesNotExist, messageSetToAddToIfDoesNotExist);
    }
    /**
     * formatMessage - Takes the message object. Parses the dates, sets __html
     * and sets the status to received if missing. Returns a message object
     *
     * @param {MessageResponse<StreamChatGenerics>} message a message object
     *
     */
  }, {
    key: "formatMessage",
    value: function formatMessage(message) {
      return _objectSpread$6(_objectSpread$6({}, message), {}, {
        /**
         * @deprecated please use `html`
         */
        __html: message.html,
        // parse the date..
        pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,
        created_at: message.created_at ? new Date(message.created_at) : /* @__PURE__ */ new Date(),
        updated_at: message.updated_at ? new Date(message.updated_at) : /* @__PURE__ */ new Date(),
        status: message.status || "received"
      });
    }
    /**
     * addMessagesSorted - Add the list of messages to state and resorts the messages
     *
     * @param {Array<MessageResponse<StreamChatGenerics>>} newMessages A list of messages
     * @param {boolean} timestampChanged Whether updating messages with changed created_at value.
     * @param {boolean} initializing Whether channel is being initialized.
     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.
     * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if messages are not in the list (only used if addIfDoesNotExist is true)
     *
     */
  }, {
    key: "addMessagesSorted",
    value: function addMessagesSorted(newMessages) {
      var timestampChanged = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var initializing = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var addIfDoesNotExist = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var messageSetToAddToIfDoesNotExist = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "current";
      var _this$findTargetMessa = this.findTargetMessageSet(newMessages, addIfDoesNotExist, messageSetToAddToIfDoesNotExist), messagesToAdd = _this$findTargetMessa.messagesToAdd, targetMessageSetIndex = _this$findTargetMessa.targetMessageSetIndex;
      for (var i = 0; i < messagesToAdd.length; i += 1) {
        var isFromShadowBannedUser = messagesToAdd[i].shadowed;
        if (isFromShadowBannedUser) {
          continue;
        }
        var isMessageFormatted = messagesToAdd[i].created_at instanceof Date;
        var message = void 0;
        if (isMessageFormatted) {
          message = messagesToAdd[i];
        } else {
          var _this$_channel;
          message = this.formatMessage(messagesToAdd[i]);
          if (message.user && (_this$_channel = this._channel) !== null && _this$_channel !== void 0 && _this$_channel.cid) {
            this._channel.getClient().state.updateUserReference(message.user, this._channel.cid);
          }
          if (initializing && message.id && this.threads[message.id]) {
            delete this.threads[message.id];
          }
          if (!this.last_message_at) {
            this.last_message_at = new Date(message.created_at.getTime());
          }
          if (message.created_at.getTime() > this.last_message_at.getTime()) {
            this.last_message_at = new Date(message.created_at.getTime());
          }
        }
        var parentID = message.parent_id;
        if ((!parentID || message.show_in_channel) && targetMessageSetIndex !== -1) {
          this.messageSets[targetMessageSetIndex].messages = this._addToMessageList(this.messageSets[targetMessageSetIndex].messages, message, timestampChanged, "created_at", addIfDoesNotExist);
        }
        if (parentID && !initializing) {
          var thread = this.threads[parentID] || [];
          var threadMessages = this._addToMessageList(thread, message, timestampChanged, "created_at", addIfDoesNotExist);
          this.threads[parentID] = threadMessages;
        }
      }
      return {
        messageSet: this.messageSets[targetMessageSetIndex]
      };
    }
    /**
     * addPinnedMessages - adds messages in pinnedMessages property
     *
     * @param {Array<MessageResponse<StreamChatGenerics>>} pinnedMessages A list of pinned messages
     *
     */
  }, {
    key: "addPinnedMessages",
    value: function addPinnedMessages(pinnedMessages) {
      for (var i = 0; i < pinnedMessages.length; i += 1) {
        this.addPinnedMessage(pinnedMessages[i]);
      }
    }
    /**
     * addPinnedMessage - adds message in pinnedMessages
     *
     * @param {MessageResponse<StreamChatGenerics>} pinnedMessage message to update
     *
     */
  }, {
    key: "addPinnedMessage",
    value: function addPinnedMessage(pinnedMessage) {
      this.pinnedMessages = this._addToMessageList(this.pinnedMessages, this.formatMessage(pinnedMessage), false, "pinned_at");
    }
    /**
     * removePinnedMessage - removes pinned message from pinnedMessages
     *
     * @param {MessageResponse<StreamChatGenerics>} message message to remove
     *
     */
  }, {
    key: "removePinnedMessage",
    value: function removePinnedMessage(message) {
      var _this$removeMessageFr = this.removeMessageFromArray(this.pinnedMessages, message), result = _this$removeMessageFr.result;
      this.pinnedMessages = result;
    }
  }, {
    key: "addReaction",
    value: function addReaction(reaction, message, enforce_unique) {
      var _this2 = this;
      if (!message)
        return;
      var messageWithReaction = message;
      this._updateMessage(message, function(msg) {
        messageWithReaction.own_reactions = _this2._addOwnReactionToMessage(msg.own_reactions, reaction, enforce_unique);
        return _this2.formatMessage(messageWithReaction);
      });
      return messageWithReaction;
    }
  }, {
    key: "_addOwnReactionToMessage",
    value: function _addOwnReactionToMessage(ownReactions, reaction, enforce_unique) {
      if (enforce_unique) {
        ownReactions = [];
      } else {
        ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);
      }
      ownReactions = ownReactions || [];
      if (this._channel.getClient().userID === reaction.user_id) {
        ownReactions.push(reaction);
      }
      return ownReactions;
    }
  }, {
    key: "_removeOwnReactionFromMessage",
    value: function _removeOwnReactionFromMessage(ownReactions, reaction) {
      if (ownReactions) {
        return ownReactions.filter(function(item) {
          return item.user_id !== reaction.user_id || item.type !== reaction.type;
        });
      }
      return ownReactions;
    }
  }, {
    key: "removeReaction",
    value: function removeReaction(reaction, message) {
      var _this3 = this;
      if (!message)
        return;
      var messageWithReaction = message;
      this._updateMessage(message, function(msg) {
        messageWithReaction.own_reactions = _this3._removeOwnReactionFromMessage(msg.own_reactions, reaction);
        return _this3.formatMessage(messageWithReaction);
      });
      return messageWithReaction;
    }
  }, {
    key: "removeQuotedMessageReferences",
    value: function removeQuotedMessageReferences(message) {
      var _this4 = this;
      var parseMessage = function parseMessage2(m) {
        var _m$pinned_at, _m$updated_at;
        return _objectSpread$6(_objectSpread$6({}, m), {}, {
          created_at: m.created_at.toISOString(),
          pinned_at: (_m$pinned_at = m.pinned_at) === null || _m$pinned_at === void 0 ? void 0 : _m$pinned_at.toISOString(),
          updated_at: (_m$updated_at = m.updated_at) === null || _m$updated_at === void 0 ? void 0 : _m$updated_at.toISOString()
        });
      };
      this.messageSets.forEach(function(set) {
        var updatedMessages = set.messages.filter(function(msg) {
          return msg.quoted_message_id === message.id;
        }).map(parseMessage).map(function(msg) {
          return _objectSpread$6(_objectSpread$6({}, msg), {}, {
            quoted_message: _objectSpread$6(_objectSpread$6({}, message), {}, {
              attachments: []
            })
          });
        });
        _this4.addMessagesSorted(updatedMessages, true);
      });
    }
    /**
     * Updates all instances of given message in channel state
     * @param message
     * @param updateFunc
     */
  }, {
    key: "_updateMessage",
    value: function _updateMessage(message, updateFunc) {
      var parent_id = message.parent_id, show_in_channel = message.show_in_channel, pinned = message.pinned;
      if (parent_id && this.threads[parent_id]) {
        var thread = this.threads[parent_id];
        var msgIndex = thread.findIndex(function(msg) {
          return msg.id === message.id;
        });
        if (msgIndex !== -1) {
          thread[msgIndex] = updateFunc(thread[msgIndex]);
          this.threads[parent_id] = thread;
        }
      }
      if (!show_in_channel && !parent_id || show_in_channel) {
        var messageSetIndex = this.findMessageSetIndex(message);
        if (messageSetIndex !== -1) {
          var _msgIndex = this.messageSets[messageSetIndex].messages.findIndex(function(msg) {
            return msg.id === message.id;
          });
          if (_msgIndex !== -1) {
            this.messageSets[messageSetIndex].messages[_msgIndex] = updateFunc(this.messageSets[messageSetIndex].messages[_msgIndex]);
          }
        }
      }
      if (pinned) {
        var _msgIndex2 = this.pinnedMessages.findIndex(function(msg) {
          return msg.id === message.id;
        });
        if (_msgIndex2 !== -1) {
          this.pinnedMessages[_msgIndex2] = updateFunc(this.pinnedMessages[_msgIndex2]);
        }
      }
    }
    /**
     * Setter for isUpToDate.
     *
     * @param isUpToDate  Flag which indicates if channel state contain latest/recent messages or no.
     *                    This flag should be managed by UI sdks using a setter - setIsUpToDate.
     *                    When false, any new message (received by websocket event - message.new) will not
     *                    be pushed on to message list.
     */
  }, {
    key: "_addToMessageList",
    value: (
      /**
       * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found
       *
       * @param {Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>} messages A list of messages
       * @param message
       * @param {boolean} timestampChanged Whether updating a message with changed created_at value.
       * @param {string} sortBy field name to use to sort the messages by
       * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.
       */
      function _addToMessageList(messages, message) {
        var timestampChanged = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var sortBy = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "created_at";
        var addIfDoesNotExist = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
        var addMessageToList = addIfDoesNotExist || timestampChanged;
        var messageArr = messages;
        if (timestampChanged) {
          messageArr = messageArr.filter(function(msg) {
            return !(msg.id && message.id === msg.id);
          });
        }
        var messageArrayLength = messageArr.length;
        if (messageArrayLength === 0 && addMessageToList) {
          return messageArr.concat(message);
        } else if (messageArrayLength === 0) {
          return _toConsumableArray(messageArr);
        }
        var messageTime = message[sortBy].getTime();
        var messageIsNewest = messageArr[messageArrayLength - 1][sortBy].getTime() < messageTime;
        if (messageIsNewest && addMessageToList) {
          return messageArr.concat(message);
        } else if (messageIsNewest) {
          return _toConsumableArray(messageArr);
        }
        var left = 0;
        var middle = 0;
        var right = messageArrayLength - 1;
        while (left <= right) {
          middle = Math.floor((right + left) / 2);
          if (messageArr[middle][sortBy].getTime() <= messageTime)
            left = middle + 1;
          else
            right = middle - 1;
        }
        if (!timestampChanged && message.id) {
          if (messageArr[left] && message.id === messageArr[left].id) {
            messageArr[left] = message;
            return _toConsumableArray(messageArr);
          }
          if (messageArr[left - 1] && message.id === messageArr[left - 1].id) {
            messageArr[left - 1] = message;
            return _toConsumableArray(messageArr);
          }
        }
        if (addMessageToList) {
          messageArr.splice(left, 0, message);
        }
        return _toConsumableArray(messageArr);
      }
    )
    /**
     * removeMessage - Description
     *
     * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.
     *
     * @return {boolean} Returns if the message was removed
     */
  }, {
    key: "removeMessage",
    value: function removeMessage(messageToRemove) {
      var isRemoved = false;
      if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {
        var _this$removeMessageFr2 = this.removeMessageFromArray(this.threads[messageToRemove.parent_id], messageToRemove), removed = _this$removeMessageFr2.removed, threadMessages = _this$removeMessageFr2.result;
        this.threads[messageToRemove.parent_id] = threadMessages;
        isRemoved = removed;
      } else {
        var _messageToRemove$mess;
        var messageSetIndex = (_messageToRemove$mess = messageToRemove.messageSetIndex) !== null && _messageToRemove$mess !== void 0 ? _messageToRemove$mess : this.findMessageSetIndex(messageToRemove);
        if (messageSetIndex !== -1) {
          var _this$removeMessageFr3 = this.removeMessageFromArray(this.messageSets[messageSetIndex].messages, messageToRemove), _removed = _this$removeMessageFr3.removed, messages = _this$removeMessageFr3.result;
          this.messageSets[messageSetIndex].messages = messages;
          isRemoved = _removed;
        }
      }
      return isRemoved;
    }
  }, {
    key: "filterErrorMessages",
    value: (
      /**
       * filterErrorMessages - Removes error messages from the channel state.
       *
       */
      function filterErrorMessages() {
        var filteredMessages = this.latestMessages.filter(function(message) {
          return message.type !== "error";
        });
        this.latestMessages = filteredMessages;
      }
    )
    /**
     * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds
     */
  }, {
    key: "clean",
    value: function clean() {
      var now = /* @__PURE__ */ new Date();
      for (var _i = 0, _Object$entries = Object.entries(this.typing); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), userID = _Object$entries$_i[0], lastEvent = _Object$entries$_i[1];
        var receivedAt = typeof lastEvent.received_at === "string" ? new Date(lastEvent.received_at) : lastEvent.received_at || /* @__PURE__ */ new Date();
        if (now.getTime() - receivedAt.getTime() > 7e3) {
          delete this.typing[userID];
          this._channel.getClient().dispatchEvent({
            cid: this._channel.cid,
            type: "typing.stop",
            user: {
              id: userID
            }
          });
        }
      }
    }
  }, {
    key: "clearMessages",
    value: function clearMessages() {
      this.initMessages();
      this.pinnedMessages = [];
    }
  }, {
    key: "initMessages",
    value: function initMessages() {
      this.messageSets = [{
        messages: [],
        isLatest: true,
        isCurrent: true
      }];
    }
    /**
     * loadMessageIntoState - Loads a given message (and messages around it) into the state
     *
     * @param {string} messageId The id of the message, or 'latest' to indicate switching to the latest messages
     * @param {string} parentMessageId The id of the parent message, if we want load a thread reply
     */
  }, {
    key: "loadMessageIntoState",
    value: function() {
      var _loadMessageIntoState = _asyncToGenerator(import_regenerator.default.mark(function _callee(messageId, parentMessageId) {
        var _this$threads$parentM;
        var limit, messageSetIndex, switchedToMessageSet, loadedMessageThread, messageIdToFind, _args = arguments;
        return import_regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                limit = _args.length > 2 && _args[2] !== void 0 ? _args[2] : 25;
                switchedToMessageSet = false;
                loadedMessageThread = false;
                messageIdToFind = parentMessageId || messageId;
                if (!(messageId === "latest")) {
                  _context.next = 10;
                  break;
                }
                if (!(this.messages === this.latestMessages)) {
                  _context.next = 7;
                  break;
                }
                return _context.abrupt("return");
              case 7:
                messageSetIndex = this.messageSets.findIndex(function(s2) {
                  return s2.isLatest;
                });
                _context.next = 11;
                break;
              case 10:
                messageSetIndex = this.findMessageSetIndex({
                  id: messageIdToFind
                });
              case 11:
                if (messageSetIndex !== -1) {
                  this.switchToMessageSet(messageSetIndex);
                  switchedToMessageSet = true;
                }
                loadedMessageThread = !parentMessageId || !!((_this$threads$parentM = this.threads[parentMessageId]) !== null && _this$threads$parentM !== void 0 && _this$threads$parentM.find(function(m) {
                  return m.id === messageId;
                }));
                if (!(switchedToMessageSet && loadedMessageThread)) {
                  _context.next = 15;
                  break;
                }
                return _context.abrupt("return");
              case 15:
                if (switchedToMessageSet) {
                  _context.next = 18;
                  break;
                }
                _context.next = 18;
                return this._channel.query({
                  messages: {
                    id_around: messageIdToFind,
                    limit
                  }
                }, "new");
              case 18:
                if (!(!loadedMessageThread && parentMessageId)) {
                  _context.next = 21;
                  break;
                }
                _context.next = 21;
                return this._channel.getReplies(parentMessageId, {
                  id_around: messageId,
                  limit
                });
              case 21:
                messageSetIndex = this.findMessageSetIndex({
                  id: messageIdToFind
                });
                if (messageSetIndex !== -1) {
                  this.switchToMessageSet(messageSetIndex);
                }
              case 23:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function loadMessageIntoState(_x, _x2) {
        return _loadMessageIntoState.apply(this, arguments);
      }
      return loadMessageIntoState;
    }()
    /**
     * findMessage - Finds a message inside the state
     *
     * @param {string} messageId The id of the message
     * @param {string} parentMessageId The id of the parent message, if we want load a thread reply
     *
     * @return {ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>} Returns the message, or undefined if the message wasn't found
     */
  }, {
    key: "findMessage",
    value: function findMessage(messageId, parentMessageId) {
      if (parentMessageId) {
        var messages = this.threads[parentMessageId];
        if (!messages) {
          return void 0;
        }
        return messages.find(function(m) {
          return m.id === messageId;
        });
      }
      var messageSetIndex = this.findMessageSetIndex({
        id: messageId
      });
      if (messageSetIndex === -1) {
        return void 0;
      }
      return this.messageSets[messageSetIndex].messages.find(function(m) {
        return m.id === messageId;
      });
    }
  }, {
    key: "switchToMessageSet",
    value: function switchToMessageSet(index) {
      var currentMessages = this.messageSets.find(function(s2) {
        return s2.isCurrent;
      });
      if (!currentMessages) {
        return;
      }
      currentMessages.isCurrent = false;
      this.messageSets[index].isCurrent = true;
    }
  }, {
    key: "areMessageSetsOverlap",
    value: function areMessageSetsOverlap(messages1, messages2) {
      return messages1.some(function(m1) {
        return messages2.find(function(m2) {
          return m1.id === m2.id;
        });
      });
    }
  }, {
    key: "findMessageSetIndex",
    value: function findMessageSetIndex(message) {
      return this.messageSets.findIndex(function(set) {
        return !!set.messages.find(function(m) {
          return m.id === message.id;
        });
      });
    }
  }, {
    key: "findTargetMessageSet",
    value: function findTargetMessageSet(newMessages) {
      var _this5 = this;
      var addIfDoesNotExist = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var messageSetToAddToIfDoesNotExist = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "current";
      var messagesToAdd = newMessages;
      var targetMessageSetIndex;
      if (addIfDoesNotExist) {
        var overlappingMessageSetIndices = this.messageSets.map(function(_, i) {
          return i;
        }).filter(function(i) {
          return _this5.areMessageSetsOverlap(_this5.messageSets[i].messages, newMessages);
        });
        switch (messageSetToAddToIfDoesNotExist) {
          case "new":
            if (overlappingMessageSetIndices.length > 0) {
              targetMessageSetIndex = overlappingMessageSetIndices[0];
            } else if (newMessages.some(function(m) {
              return !m.parent_id;
            })) {
              this.messageSets.push({
                messages: [],
                isCurrent: false,
                isLatest: false
              });
              targetMessageSetIndex = this.messageSets.length - 1;
            }
            break;
          case "current":
            targetMessageSetIndex = this.messageSets.findIndex(function(s2) {
              return s2.isCurrent;
            });
            break;
          case "latest":
            targetMessageSetIndex = this.messageSets.findIndex(function(s2) {
              return s2.isLatest;
            });
            break;
          default:
            targetMessageSetIndex = -1;
        }
        var mergeTargetMessageSetIndex = overlappingMessageSetIndices.splice(0, 1)[0];
        var mergeSourceMessageSetIndices = _toConsumableArray(overlappingMessageSetIndices);
        if (mergeTargetMessageSetIndex !== void 0 && mergeTargetMessageSetIndex !== targetMessageSetIndex) {
          mergeSourceMessageSetIndices.push(targetMessageSetIndex);
        }
        if (mergeSourceMessageSetIndices.length > 0) {
          var target = this.messageSets[mergeTargetMessageSetIndex];
          var sources = this.messageSets.filter(function(_, i) {
            return mergeSourceMessageSetIndices.indexOf(i) !== -1;
          });
          sources.forEach(function(messageSet) {
            target.isLatest = target.isLatest || messageSet.isLatest;
            target.isCurrent = target.isCurrent || messageSet.isCurrent;
            messagesToAdd = [].concat(_toConsumableArray(messagesToAdd), _toConsumableArray(messageSet.messages));
          });
          sources.forEach(function(s2) {
            return _this5.messageSets.splice(_this5.messageSets.indexOf(s2), 1);
          });
          var overlappingMessageSetIndex = this.messageSets.findIndex(function(s2) {
            return _this5.areMessageSetsOverlap(s2.messages, newMessages);
          });
          targetMessageSetIndex = overlappingMessageSetIndex;
        }
      } else {
        targetMessageSetIndex = this.findMessageSetIndex(newMessages[0]);
      }
      return {
        targetMessageSetIndex,
        messagesToAdd
      };
    }
  }]);
  return ChannelState2;
}();
function _createForOfIteratorHelper$3(o2, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (!it) {
    if (Array.isArray(o2) || (it = _unsupportedIterableToArray$3(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
      if (it)
        o2 = it;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o2.length)
          return { done: true };
        return { done: false, value: o2[i++] };
      }, e: function(_e) {
        function e2(_x) {
          return _e.apply(this, arguments);
        }
        e2.toString = function() {
          return _e.toString();
        };
        return e2;
      }(function(e2) {
        throw e2;
      }), f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it = it.call(o2);
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function(_e2) {
    function e2(_x2) {
      return _e2.apply(this, arguments);
    }
    e2.toString = function() {
      return _e2.toString();
    };
    return e2;
  }(function(e2) {
    didErr = true;
    err = e2;
  }), f: function f2() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$3(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray$3(o2, minLen);
  var n = Object.prototype.toString.call(o2).slice(8, -1);
  if (n === "Object" && o2.constructor)
    n = o2.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o2);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$3(o2, minLen);
}
function _arrayLikeToArray$3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function logChatPromiseExecution(promise, name) {
  promise.then().catch(function(error) {
    console.warn("failed to do ".concat(name, ", ran into error: "), error);
  });
}
var sleep = function sleep2(m) {
  return new Promise(function(r) {
    return setTimeout(r, m);
  });
};
function isFunction2(value) {
  return value && (Object.prototype.toString.call(value) === "[object Function]" || "function" === typeof value || value instanceof Function);
}
var chatCodes = {
  TOKEN_EXPIRED: 40,
  WS_CLOSED_SUCCESS: 1e3
};
function isReadableStream(obj) {
  return obj !== null && _typeof(obj) === "object" && (obj.readable || typeof obj._read === "function");
}
function isBuffer2(obj) {
  return obj != null && obj.constructor != null && // @ts-expect-error
  typeof obj.constructor.isBuffer === "function" && // @ts-expect-error
  obj.constructor.isBuffer(obj);
}
function isFileWebAPI(uri) {
  return typeof window !== "undefined" && "File" in window && uri instanceof File;
}
function isBlobWebAPI(uri) {
  return typeof window !== "undefined" && "Blob" in window && uri instanceof Blob;
}
function isOwnUserBaseProperty(property) {
  var ownUserBaseProperties = {
    channel_mutes: true,
    devices: true,
    mutes: true,
    total_unread_count: true,
    unread_channels: true,
    unread_count: true,
    invisible: true,
    roles: true
  };
  return ownUserBaseProperties[property];
}
function addFileToFormData(uri, name, contentType) {
  var data = new import_form_data.default();
  if (isReadableStream(uri) || isBuffer2(uri) || isFileWebAPI(uri) || isBlobWebAPI(uri)) {
    if (name)
      data.append("file", uri, name);
    else
      data.append("file", uri);
  } else {
    data.append("file", {
      uri,
      name: name || uri.split("/").reverse()[0],
      contentType: contentType || void 0,
      type: contentType || void 0
    });
  }
  return data;
}
function normalizeQuerySort(sort) {
  var sortFields = [];
  var sortArr = Array.isArray(sort) ? sort : [sort];
  var _iterator = _createForOfIteratorHelper$3(sortArr), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var item = _step.value;
      var entries = Object.entries(item);
      if (entries.length > 1) {
        console.warn("client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed");
      }
      for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {
        var _entries$_i = _slicedToArray(_entries[_i], 2), field = _entries$_i[0], direction = _entries$_i[1];
        sortFields.push({
          field,
          direction
        });
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return sortFields;
}
function retryInterval(numberOfFailures) {
  var max2 = Math.min(500 + numberOfFailures * 2e3, 25e3);
  var min2 = Math.min(Math.max(250, (numberOfFailures - 1) * 2e3), 25e3);
  return Math.floor(Math.random() * (max2 - min2) + min2);
}
function randomId() {
  return generateUUIDv4();
}
function hex(bytes) {
  var s2 = "";
  for (var i = 0; i < bytes.length; i++) {
    s2 += bytes[i].toString(16).padStart(2, "0");
  }
  return s2;
}
function generateUUIDv4() {
  var bytes = getRandomBytes(16);
  bytes[6] = bytes[6] & 15 | 64;
  bytes[8] = bytes[8] & 191 | 128;
  return hex(bytes.subarray(0, 4)) + "-" + hex(bytes.subarray(4, 6)) + "-" + hex(bytes.subarray(6, 8)) + "-" + hex(bytes.subarray(8, 10)) + "-" + hex(bytes.subarray(10, 16));
}
function getRandomValuesWithMathRandom(bytes) {
  var max2 = Math.pow(2, 8 * bytes.byteLength / bytes.length);
  for (var i = 0; i < bytes.length; i++) {
    bytes[i] = Math.random() * max2;
  }
}
var getRandomValues = function() {
  var _crypto;
  if (typeof crypto !== "undefined" && typeof ((_crypto = crypto) === null || _crypto === void 0 ? void 0 : _crypto.getRandomValues) !== "undefined") {
    return crypto.getRandomValues.bind(crypto);
  } else if (typeof msCrypto !== "undefined") {
    return msCrypto.getRandomValues.bind(msCrypto);
  } else {
    return getRandomValuesWithMathRandom;
  }
}();
function getRandomBytes(length) {
  var bytes = new Uint8Array(length);
  getRandomValues(bytes);
  return bytes;
}
function convertErrorToJson(err) {
  var jsonObj = {};
  if (!err)
    return jsonObj;
  try {
    Object.getOwnPropertyNames(err).forEach(function(key) {
      jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);
    });
  } catch (_) {
    return {
      error: "failed to serialize the error"
    };
  }
  return jsonObj;
}
function isOnline() {
  var nav = typeof navigator !== "undefined" ? navigator : typeof window !== "undefined" && window.navigator ? window.navigator : void 0;
  if (!nav) {
    console.warn("isOnline failed to access window.navigator and assume browser is online");
    return true;
  }
  if (typeof nav.onLine !== "boolean") {
    return true;
  }
  return nav.onLine;
}
function addConnectionEventListeners(cb) {
  if (typeof window !== "undefined" && window.addEventListener) {
    window.addEventListener("offline", cb);
    window.addEventListener("online", cb);
  }
}
function removeConnectionEventListeners(cb) {
  if (typeof window !== "undefined" && window.removeEventListener) {
    window.removeEventListener("offline", cb);
    window.removeEventListener("online", cb);
  }
}
var axiosParamsSerializer = function axiosParamsSerializer2(params) {
  var newParams = [];
  for (var k in params) {
    if (params[k] === void 0)
      continue;
    if (Array.isArray(params[k]) || _typeof(params[k]) === "object") {
      newParams.push("".concat(k, "=").concat(encodeURIComponent(JSON.stringify(params[k]))));
    } else {
      newParams.push("".concat(k, "=").concat(encodeURIComponent(params[k])));
    }
  }
  return newParams.join("&");
};
function _createForOfIteratorHelper$2(o2, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (!it) {
    if (Array.isArray(o2) || (it = _unsupportedIterableToArray$2(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
      if (it)
        o2 = it;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o2.length)
          return { done: true };
        return { done: false, value: o2[i++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it = it.call(o2);
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$2(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray$2(o2, minLen);
  var n = Object.prototype.toString.call(o2).slice(8, -1);
  if (n === "Object" && o2.constructor)
    n = o2.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o2);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$2(o2, minLen);
}
function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function ownKeys$5(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$5(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$5(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var Channel = function() {
  function Channel2(client, type, id, data) {
    var _this = this;
    _classCallCheck(this, Channel2);
    _defineProperty(this, "_client", void 0);
    _defineProperty(this, "type", void 0);
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "data", void 0);
    _defineProperty(this, "_data", void 0);
    _defineProperty(this, "cid", void 0);
    _defineProperty(this, "listeners", void 0);
    _defineProperty(this, "state", void 0);
    _defineProperty(this, "initialized", void 0);
    _defineProperty(this, "offlineMode", void 0);
    _defineProperty(this, "lastKeyStroke", void 0);
    _defineProperty(this, "lastTypingEvent", void 0);
    _defineProperty(this, "isTyping", void 0);
    _defineProperty(this, "disconnected", void 0);
    _defineProperty(this, "create", function() {
      var _ref = _asyncToGenerator(import_regenerator.default.mark(function _callee(options) {
        var defaultOptions;
        return import_regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                defaultOptions = _objectSpread$5(_objectSpread$5({}, options), {}, {
                  watch: false,
                  state: false,
                  presence: false
                });
                _context.next = 3;
                return _this.query(defaultOptions, "latest");
              case 3:
                return _context.abrupt("return", _context.sent);
              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return function(_x) {
        return _ref.apply(this, arguments);
      };
    }());
    _defineProperty(this, "_callChannelListeners", function(event) {
      var channel = _this;
      var listeners = [];
      if (channel.listeners.all) {
        listeners.push.apply(listeners, _toConsumableArray(channel.listeners.all));
      }
      if (channel.listeners[event.type]) {
        listeners.push.apply(listeners, _toConsumableArray(channel.listeners[event.type]));
      }
      for (var _i = 0, _listeners = listeners; _i < _listeners.length; _i++) {
        var listener = _listeners[_i];
        if (typeof listener !== "string") {
          listener(event);
        }
      }
    });
    _defineProperty(this, "_channelURL", function() {
      if (!_this.id) {
        throw new Error("channel id is not defined");
      }
      return "".concat(_this.getClient().baseURL, "/channels/").concat(_this.type, "/").concat(_this.id);
    });
    var validTypeRe = /^[\w_-]+$/;
    var validIDRe = /^[\w!_-]+$/;
    if (!validTypeRe.test(type)) {
      throw new Error("Invalid chat type ".concat(type, ', letters, numbers and "_-" are allowed'));
    }
    if (typeof id === "string" && !validIDRe.test(id)) {
      throw new Error("Invalid chat id ".concat(id, ', letters, numbers and "!-_" are allowed'));
    }
    this._client = client;
    this.type = type;
    this.id = id;
    this.data = data;
    this._data = _objectSpread$5({}, data);
    this.cid = "".concat(type, ":").concat(id);
    this.listeners = {};
    this.state = new ChannelState(this);
    this.initialized = false;
    this.offlineMode = false;
    this.lastTypingEvent = null;
    this.isTyping = false;
    this.disconnected = false;
  }
  _createClass(Channel2, [{
    key: "getClient",
    value: function getClient() {
      if (this.disconnected === true) {
        throw Error("You can't use a channel after client.disconnect() was called");
      }
      return this._client;
    }
    /**
     * getConfig - Get the config for this channel id (cid)
     *
     * @return {Record<string, unknown>}
     */
  }, {
    key: "getConfig",
    value: function getConfig() {
      var client = this.getClient();
      return client.configs[this.cid];
    }
    /**
     * sendMessage - Send a message to this channel
     *
     * @param {Message<StreamChatGenerics>} message The Message object
     * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message
     * @param {boolean} [options.skip_push] Skip sending push notifications
     * @param {boolean} [options.is_pending_message] DEPRECATED, please use `pending` instead.
     * @param {boolean} [options.pending] Make this message pending
     * @param {Record<string,string>} [options.pending_message_metadata] Metadata for the pending message
     * @param {boolean} [options.force_moderation] Apply force moderation for server-side requests
     *
     * @return {Promise<SendMessageAPIResponse<StreamChatGenerics>>} The Server Response
     */
  }, {
    key: "sendMessage",
    value: function() {
      var _sendMessage = _asyncToGenerator(import_regenerator.default.mark(function _callee2(message, options) {
        var sendMessageResponse;
        return import_regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getClient().post(this._channelURL() + "/message", _objectSpread$5({
                  message
                }, options));
              case 2:
                sendMessageResponse = _context2.sent;
                this.state.unreadCount = 0;
                return _context2.abrupt("return", sendMessageResponse);
              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function sendMessage(_x2, _x3) {
        return _sendMessage.apply(this, arguments);
      }
      return sendMessage;
    }()
  }, {
    key: "sendFile",
    value: function sendFile(uri, name, contentType, user) {
      return this.getClient().sendFile("".concat(this._channelURL(), "/file"), uri, name, contentType, user);
    }
  }, {
    key: "sendImage",
    value: function sendImage(uri, name, contentType, user) {
      return this.getClient().sendFile("".concat(this._channelURL(), "/image"), uri, name, contentType, user);
    }
  }, {
    key: "deleteFile",
    value: function deleteFile(url) {
      return this.getClient().delete("".concat(this._channelURL(), "/file"), {
        url
      });
    }
  }, {
    key: "deleteImage",
    value: function deleteImage(url) {
      return this.getClient().delete("".concat(this._channelURL(), "/image"), {
        url
      });
    }
    /**
     * sendEvent - Send an event on this channel
     *
     * @param {Event<StreamChatGenerics>} event for example {type: 'message.read'}
     *
     * @return {Promise<EventAPIResponse<StreamChatGenerics>>} The Server Response
     */
  }, {
    key: "sendEvent",
    value: function() {
      var _sendEvent = _asyncToGenerator(import_regenerator.default.mark(function _callee3(event) {
        return import_regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this._checkInitialized();
                _context3.next = 3;
                return this.getClient().post(this._channelURL() + "/event", {
                  event
                });
              case 3:
                return _context3.abrupt("return", _context3.sent);
              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function sendEvent(_x4) {
        return _sendEvent.apply(this, arguments);
      }
      return sendEvent;
    }()
    /**
     * search - Query messages
     *
     * @param {MessageFilters<StreamChatGenerics> | string}  query search query or object MongoDB style filters
     * @param {{client_id?: string; connection_id?: string; query?: string; message_filter_conditions?: MessageFilters<StreamChatGenerics>}} options Option object, {user_id: 'tommaso'}
     *
     * @return {Promise<SearchAPIResponse<StreamChatGenerics>>} search messages response
     */
  }, {
    key: "search",
    value: function() {
      var _search = _asyncToGenerator(import_regenerator.default.mark(function _callee4(query) {
        var options, payload, _args4 = arguments;
        return import_regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 1 && _args4[1] !== void 0 ? _args4[1] : {};
                if (!(options.offset && options.next)) {
                  _context4.next = 3;
                  break;
                }
                throw Error("Cannot specify offset with next");
              case 3:
                payload = _objectSpread$5(_objectSpread$5({
                  filter_conditions: {
                    cid: this.cid
                  }
                }, options), {}, {
                  sort: options.sort ? normalizeQuerySort(options.sort) : void 0
                });
                if (!(typeof query === "string")) {
                  _context4.next = 8;
                  break;
                }
                payload.query = query;
                _context4.next = 13;
                break;
              case 8:
                if (!(_typeof(query) === "object")) {
                  _context4.next = 12;
                  break;
                }
                payload.message_filter_conditions = query;
                _context4.next = 13;
                break;
              case 12:
                throw Error("Invalid type ".concat(_typeof(query), " for query parameter"));
              case 13:
                _context4.next = 15;
                return this.getClient().wsPromise;
              case 15:
                _context4.next = 17;
                return this.getClient().get(this.getClient().baseURL + "/search", {
                  payload
                });
              case 17:
                return _context4.abrupt("return", _context4.sent);
              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function search(_x5) {
        return _search.apply(this, arguments);
      }
      return search;
    }()
    /**
     * queryMembers - Query Members
     *
     * @param {UserFilters<StreamChatGenerics>}  filterConditions object MongoDB style filters
     * @param {MemberSort<StreamChatGenerics>} [sort] Sort options, for instance [{created_at: -1}].
     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{name: -1}, {created_at: 1}]
     * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}
     *
     * @return {Promise<ChannelMemberAPIResponse<StreamChatGenerics>>} Query Members response
     */
  }, {
    key: "queryMembers",
    value: function() {
      var _queryMembers = _asyncToGenerator(import_regenerator.default.mark(function _callee5(filterConditions) {
        var _this$data;
        var sort, options, id, type, members, _args5 = arguments;
        return import_regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                sort = _args5.length > 1 && _args5[1] !== void 0 ? _args5[1] : [];
                options = _args5.length > 2 && _args5[2] !== void 0 ? _args5[2] : {};
                type = this.type;
                if (this.id) {
                  id = this.id;
                } else if ((_this$data = this.data) !== null && _this$data !== void 0 && _this$data.members && Array.isArray(this.data.members)) {
                  members = this.data.members;
                }
                _context5.next = 6;
                return this.getClient().get(this.getClient().baseURL + "/members", {
                  payload: _objectSpread$5({
                    type,
                    id,
                    members,
                    sort: normalizeQuerySort(sort),
                    filter_conditions: filterConditions
                  }, options)
                });
              case 6:
                return _context5.abrupt("return", _context5.sent);
              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      function queryMembers(_x6) {
        return _queryMembers.apply(this, arguments);
      }
      return queryMembers;
    }()
    /**
     * sendReaction - Send a reaction about a message
     *
     * @param {string} messageID the message id
     * @param {Reaction<StreamChatGenerics>} reaction the reaction object for instance {type: 'love'}
     * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications
     *
     * @return {Promise<ReactionAPIResponse<StreamChatGenerics>>} The Server Response
     */
  }, {
    key: "sendReaction",
    value: function() {
      var _sendReaction = _asyncToGenerator(import_regenerator.default.mark(function _callee6(messageID, reaction, options) {
        return import_regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (messageID) {
                  _context6.next = 2;
                  break;
                }
                throw Error("Message id is missing");
              case 2:
                if (!(!reaction || Object.keys(reaction).length === 0)) {
                  _context6.next = 4;
                  break;
                }
                throw Error("Reaction object is missing");
              case 4:
                _context6.next = 6;
                return this.getClient().post(this.getClient().baseURL + "/messages/".concat(messageID, "/reaction"), _objectSpread$5({
                  reaction
                }, options));
              case 6:
                return _context6.abrupt("return", _context6.sent);
              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
      function sendReaction(_x7, _x8, _x9) {
        return _sendReaction.apply(this, arguments);
      }
      return sendReaction;
    }()
    /**
     * deleteReaction - Delete a reaction by user and type
     *
     * @param {string} messageID the id of the message from which te remove the reaction
     * @param {string} reactionType the type of reaction that should be removed
     * @param {string} [user_id] the id of the user (used only for server side request) default null
     *
     * @return {Promise<ReactionAPIResponse<StreamChatGenerics>>} The Server Response
     */
  }, {
    key: "deleteReaction",
    value: function deleteReaction(messageID, reactionType, user_id) {
      this._checkInitialized();
      if (!reactionType || !messageID) {
        throw Error("Deleting a reaction requires specifying both the message and reaction type");
      }
      var url = this.getClient().baseURL + "/messages/".concat(messageID, "/reaction/").concat(reactionType);
      if (user_id) {
        return this.getClient().delete(url, {
          user_id
        });
      }
      return this.getClient().delete(url, {});
    }
    /**
     * update - Edit the channel's custom properties
     *
     * @param {ChannelData<StreamChatGenerics>} channelData The object to update the custom properties of this channel with
     * @param {Message<StreamChatGenerics>} [updateMessage] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "update",
    value: function() {
      var _update2 = _asyncToGenerator(import_regenerator.default.mark(function _callee7() {
        var channelData, updateMessage, options, reserved, _args7 = arguments;
        return import_regenerator.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                channelData = _args7.length > 0 && _args7[0] !== void 0 ? _args7[0] : {};
                updateMessage = _args7.length > 1 ? _args7[1] : void 0;
                options = _args7.length > 2 ? _args7[2] : void 0;
                reserved = ["config", "cid", "created_by", "id", "member_count", "type", "created_at", "updated_at", "last_message_at", "own_capabilities"];
                reserved.forEach(function(key) {
                  delete channelData[key];
                });
                _context7.next = 7;
                return this._update(_objectSpread$5({
                  message: updateMessage,
                  data: channelData
                }, options));
              case 7:
                return _context7.abrupt("return", _context7.sent);
              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));
      function update() {
        return _update2.apply(this, arguments);
      }
      return update;
    }()
    /**
     * updatePartial - partial update channel properties
     *
     * @param {PartialUpdateChannel<StreamChatGenerics>} partial update request
     *
     * @return {Promise<PartialUpdateChannelAPIResponse<StreamChatGenerics>>}
     */
  }, {
    key: "updatePartial",
    value: function() {
      var _updatePartial = _asyncToGenerator(import_regenerator.default.mark(function _callee8(update) {
        var data;
        return import_regenerator.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.getClient().patch(this._channelURL(), update);
              case 2:
                data = _context8.sent;
                this.data = data.channel;
                return _context8.abrupt("return", data);
              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));
      function updatePartial(_x10) {
        return _updatePartial.apply(this, arguments);
      }
      return updatePartial;
    }()
    /**
     * enableSlowMode - enable slow mode
     *
     * @param {number} coolDownInterval the cooldown interval in seconds
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "enableSlowMode",
    value: function() {
      var _enableSlowMode = _asyncToGenerator(import_regenerator.default.mark(function _callee9(coolDownInterval) {
        var data;
        return import_regenerator.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.getClient().post(this._channelURL(), {
                  cooldown: coolDownInterval
                });
              case 2:
                data = _context9.sent;
                this.data = data.channel;
                return _context9.abrupt("return", data);
              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));
      function enableSlowMode(_x11) {
        return _enableSlowMode.apply(this, arguments);
      }
      return enableSlowMode;
    }()
    /**
     * disableSlowMode - disable slow mode
     *
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "disableSlowMode",
    value: function() {
      var _disableSlowMode = _asyncToGenerator(import_regenerator.default.mark(function _callee10() {
        var data;
        return import_regenerator.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.getClient().post(this._channelURL(), {
                  cooldown: 0
                });
              case 2:
                data = _context10.sent;
                this.data = data.channel;
                return _context10.abrupt("return", data);
              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));
      function disableSlowMode() {
        return _disableSlowMode.apply(this, arguments);
      }
      return disableSlowMode;
    }()
    /**
     * delete - Delete the channel. Messages are permanently removed.
     *
     * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not
     *
     * @return {Promise<DeleteChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "delete",
    value: function() {
      var _delete2 = _asyncToGenerator(import_regenerator.default.mark(function _callee11() {
        var options, _args11 = arguments;
        return import_regenerator.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                options = _args11.length > 0 && _args11[0] !== void 0 ? _args11[0] : {};
                _context11.next = 3;
                return this.getClient().delete(this._channelURL(), _objectSpread$5({}, options));
              case 3:
                return _context11.abrupt("return", _context11.sent);
              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));
      function _delete() {
        return _delete2.apply(this, arguments);
      }
      return _delete;
    }()
    /**
     * truncate - Removes all messages from the channel
     * @param {TruncateOptions<StreamChatGenerics>} [options] Defines truncation options
     * @return {Promise<TruncateChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "truncate",
    value: function() {
      var _truncate = _asyncToGenerator(import_regenerator.default.mark(function _callee12() {
        var options, _args12 = arguments;
        return import_regenerator.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                options = _args12.length > 0 && _args12[0] !== void 0 ? _args12[0] : {};
                _context12.next = 3;
                return this.getClient().post(this._channelURL() + "/truncate", options);
              case 3:
                return _context12.abrupt("return", _context12.sent);
              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));
      function truncate() {
        return _truncate.apply(this, arguments);
      }
      return truncate;
    }()
    /**
     * acceptInvite - accept invitation to the channel
     *
     * @param {InviteOptions<StreamChatGenerics>} [options] The object to update the custom properties of this channel with
     *
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "acceptInvite",
    value: function() {
      var _acceptInvite = _asyncToGenerator(import_regenerator.default.mark(function _callee13() {
        var options, _args13 = arguments;
        return import_regenerator.default.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                options = _args13.length > 0 && _args13[0] !== void 0 ? _args13[0] : {};
                _context13.next = 3;
                return this._update(_objectSpread$5({
                  accept_invite: true
                }, options));
              case 3:
                return _context13.abrupt("return", _context13.sent);
              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));
      function acceptInvite() {
        return _acceptInvite.apply(this, arguments);
      }
      return acceptInvite;
    }()
    /**
     * rejectInvite - reject invitation to the channel
     *
     * @param {InviteOptions<StreamChatGenerics>} [options] The object to update the custom properties of this channel with
     *
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "rejectInvite",
    value: function() {
      var _rejectInvite = _asyncToGenerator(import_regenerator.default.mark(function _callee14() {
        var options, _args14 = arguments;
        return import_regenerator.default.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                options = _args14.length > 0 && _args14[0] !== void 0 ? _args14[0] : {};
                _context14.next = 3;
                return this._update(_objectSpread$5({
                  reject_invite: true
                }, options));
              case 3:
                return _context14.abrupt("return", _context14.sent);
              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));
      function rejectInvite() {
        return _rejectInvite.apply(this, arguments);
      }
      return rejectInvite;
    }()
    /**
     * addMembers - add members to the channel
     *
     * @param {{user_id: string, channel_role?: Role}[]} members An array of members to add to the channel
     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "addMembers",
    value: function() {
      var _addMembers = _asyncToGenerator(import_regenerator.default.mark(function _callee15(members, message) {
        var options, _args15 = arguments;
        return import_regenerator.default.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                options = _args15.length > 2 && _args15[2] !== void 0 ? _args15[2] : {};
                _context15.next = 3;
                return this._update(_objectSpread$5({
                  add_members: members,
                  message
                }, options));
              case 3:
                return _context15.abrupt("return", _context15.sent);
              case 4:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));
      function addMembers(_x12, _x13) {
        return _addMembers.apply(this, arguments);
      }
      return addMembers;
    }()
    /**
     * addModerators - add moderators to the channel
     *
     * @param {string[]} members An array of member identifiers
     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "addModerators",
    value: function() {
      var _addModerators = _asyncToGenerator(import_regenerator.default.mark(function _callee16(members, message) {
        var options, _args16 = arguments;
        return import_regenerator.default.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                options = _args16.length > 2 && _args16[2] !== void 0 ? _args16[2] : {};
                _context16.next = 3;
                return this._update(_objectSpread$5({
                  add_moderators: members,
                  message
                }, options));
              case 3:
                return _context16.abrupt("return", _context16.sent);
              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));
      function addModerators(_x14, _x15) {
        return _addModerators.apply(this, arguments);
      }
      return addModerators;
    }()
    /**
     * assignRoles - sets member roles in a channel
     *
     * @param {{channel_role: Role, user_id: string}[]} roles List of role assignments
     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "assignRoles",
    value: function() {
      var _assignRoles = _asyncToGenerator(import_regenerator.default.mark(function _callee17(roles, message) {
        var options, _args17 = arguments;
        return import_regenerator.default.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                options = _args17.length > 2 && _args17[2] !== void 0 ? _args17[2] : {};
                _context17.next = 3;
                return this._update(_objectSpread$5({
                  assign_roles: roles,
                  message
                }, options));
              case 3:
                return _context17.abrupt("return", _context17.sent);
              case 4:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));
      function assignRoles(_x16, _x17) {
        return _assignRoles.apply(this, arguments);
      }
      return assignRoles;
    }()
    /**
     * inviteMembers - invite members to the channel
     *
     * @param {{user_id: string, channel_role?: Role}[]} members An array of members to invite to the channel
     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "inviteMembers",
    value: function() {
      var _inviteMembers = _asyncToGenerator(import_regenerator.default.mark(function _callee18(members, message) {
        var options, _args18 = arguments;
        return import_regenerator.default.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                options = _args18.length > 2 && _args18[2] !== void 0 ? _args18[2] : {};
                _context18.next = 3;
                return this._update(_objectSpread$5({
                  invites: members,
                  message
                }, options));
              case 3:
                return _context18.abrupt("return", _context18.sent);
              case 4:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));
      function inviteMembers(_x18, _x19) {
        return _inviteMembers.apply(this, arguments);
      }
      return inviteMembers;
    }()
    /**
     * removeMembers - remove members from channel
     *
     * @param {string[]} members An array of member identifiers
     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "removeMembers",
    value: function() {
      var _removeMembers = _asyncToGenerator(import_regenerator.default.mark(function _callee19(members, message) {
        var options, _args19 = arguments;
        return import_regenerator.default.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                options = _args19.length > 2 && _args19[2] !== void 0 ? _args19[2] : {};
                _context19.next = 3;
                return this._update(_objectSpread$5({
                  remove_members: members,
                  message
                }, options));
              case 3:
                return _context19.abrupt("return", _context19.sent);
              case 4:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));
      function removeMembers(_x20, _x21) {
        return _removeMembers.apply(this, arguments);
      }
      return removeMembers;
    }()
    /**
     * demoteModerators - remove moderator role from channel members
     *
     * @param {string[]} members An array of member identifiers
     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "demoteModerators",
    value: function() {
      var _demoteModerators = _asyncToGenerator(import_regenerator.default.mark(function _callee20(members, message) {
        var options, _args20 = arguments;
        return import_regenerator.default.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                options = _args20.length > 2 && _args20[2] !== void 0 ? _args20[2] : {};
                _context20.next = 3;
                return this._update(_objectSpread$5({
                  demote_moderators: members,
                  message
                }, options));
              case 3:
                return _context20.abrupt("return", _context20.sent);
              case 4:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));
      function demoteModerators(_x22, _x23) {
        return _demoteModerators.apply(this, arguments);
      }
      return demoteModerators;
    }()
    /**
     * _update - executes channel update request
     * @param payload Object Update Channel payload
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     * TODO: introduce new type instead of Object in the next major update
     */
  }, {
    key: "_update",
    value: function() {
      var _update3 = _asyncToGenerator(import_regenerator.default.mark(function _callee21(payload) {
        var data;
        return import_regenerator.default.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return this.getClient().post(this._channelURL(), payload);
              case 2:
                data = _context21.sent;
                this.data = data.channel;
                return _context21.abrupt("return", data);
              case 5:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));
      function _update(_x24) {
        return _update3.apply(this, arguments);
      }
      return _update;
    }()
    /**
     * mute - mutes the current channel
     * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id
     * @return {Promise<MuteChannelAPIResponse<StreamChatGenerics>>} The server response
     *
     * example with expiration:
     * await channel.mute({expiration: moment.duration(2, 'weeks')});
     *
     * example server side:
     * await channel.mute({user_id: userId});
     *
     */
  }, {
    key: "mute",
    value: function() {
      var _mute = _asyncToGenerator(import_regenerator.default.mark(function _callee22() {
        var opts, _args22 = arguments;
        return import_regenerator.default.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                opts = _args22.length > 0 && _args22[0] !== void 0 ? _args22[0] : {};
                _context22.next = 3;
                return this.getClient().post(this.getClient().baseURL + "/moderation/mute/channel", _objectSpread$5({
                  channel_cid: this.cid
                }, opts));
              case 3:
                return _context22.abrupt("return", _context22.sent);
              case 4:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));
      function mute() {
        return _mute.apply(this, arguments);
      }
      return mute;
    }()
    /**
     * unmute - mutes the current channel
     * @param {{ user_id?: string}} opts user_id
     * @return {Promise<APIResponse>} The server response
     *
     * example server side:
     * await channel.unmute({user_id: userId});
     */
  }, {
    key: "unmute",
    value: function() {
      var _unmute = _asyncToGenerator(import_regenerator.default.mark(function _callee23() {
        var opts, _args23 = arguments;
        return import_regenerator.default.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                opts = _args23.length > 0 && _args23[0] !== void 0 ? _args23[0] : {};
                _context23.next = 3;
                return this.getClient().post(this.getClient().baseURL + "/moderation/unmute/channel", _objectSpread$5({
                  channel_cid: this.cid
                }, opts));
              case 3:
                return _context23.abrupt("return", _context23.sent);
              case 4:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));
      function unmute() {
        return _unmute.apply(this, arguments);
      }
      return unmute;
    }()
    /**
     * muteStatus - returns the mute status for the current channel
     * @return {{ muted: boolean; createdAt: Date | null; expiresAt: Date | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}
     */
  }, {
    key: "muteStatus",
    value: function muteStatus() {
      this._checkInitialized();
      return this.getClient()._muteStatus(this.cid);
    }
  }, {
    key: "sendAction",
    value: function sendAction(messageID, formData) {
      this._checkInitialized();
      if (!messageID) {
        throw Error("Message id is missing");
      }
      return this.getClient().post(this.getClient().baseURL + "/messages/".concat(messageID, "/action"), {
        message_id: messageID,
        form_data: formData,
        id: this.id,
        type: this.type
      });
    }
    /**
     * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.
     * Call this on every keystroke
     * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}
     * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread
     */
  }, {
    key: "keystroke",
    value: function() {
      var _keystroke = _asyncToGenerator(import_regenerator.default.mark(function _callee24(parent_id) {
        var _this$getConfig;
        var now, diff;
        return import_regenerator.default.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                if ((_this$getConfig = this.getConfig()) !== null && _this$getConfig !== void 0 && _this$getConfig.typing_events) {
                  _context24.next = 2;
                  break;
                }
                return _context24.abrupt("return");
              case 2:
                now = /* @__PURE__ */ new Date();
                diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();
                this.lastKeyStroke = now;
                this.isTyping = true;
                if (!(diff === null || diff > 2e3)) {
                  _context24.next = 10;
                  break;
                }
                this.lastTypingEvent = /* @__PURE__ */ new Date();
                _context24.next = 10;
                return this.sendEvent({
                  type: "typing.start",
                  parent_id
                });
              case 10:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));
      function keystroke(_x25) {
        return _keystroke.apply(this, arguments);
      }
      return keystroke;
    }()
    /**
     * stopTyping - Sets last typing to null and sends the typing.stop event
     * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}
     * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread
     */
  }, {
    key: "stopTyping",
    value: function() {
      var _stopTyping = _asyncToGenerator(import_regenerator.default.mark(function _callee25(parent_id) {
        var _this$getConfig2;
        return import_regenerator.default.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                if ((_this$getConfig2 = this.getConfig()) !== null && _this$getConfig2 !== void 0 && _this$getConfig2.typing_events) {
                  _context25.next = 2;
                  break;
                }
                return _context25.abrupt("return");
              case 2:
                this.lastTypingEvent = null;
                this.isTyping = false;
                _context25.next = 6;
                return this.sendEvent({
                  type: "typing.stop",
                  parent_id
                });
              case 6:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));
      function stopTyping(_x26) {
        return _stopTyping.apply(this, arguments);
      }
      return stopTyping;
    }()
    /**
     * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted
     *
     * @return {ReturnType<ChannelState<StreamChatGenerics>['formatMessage']> | undefined} Description
     */
  }, {
    key: "lastMessage",
    value: function lastMessage() {
      var min2 = this.state.latestMessages.length - 5;
      if (min2 < 0) {
        min2 = 0;
      }
      var max2 = this.state.latestMessages.length + 1;
      var messageSlice = this.state.latestMessages.slice(min2, max2);
      messageSlice.sort(function(a2, b) {
        return b.created_at.getTime() - a2.created_at.getTime();
      });
      return messageSlice[0];
    }
    /**
     * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled
     *
     * @param {MarkReadOptions<StreamChatGenerics>} data
     * @return {Promise<EventAPIResponse<StreamChatGenerics> | null>} Description
     */
  }, {
    key: "markRead",
    value: function() {
      var _markRead = _asyncToGenerator(import_regenerator.default.mark(function _callee26() {
        var _this$getConfig3;
        var data, _args26 = arguments;
        return import_regenerator.default.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                data = _args26.length > 0 && _args26[0] !== void 0 ? _args26[0] : {};
                this._checkInitialized();
                if ((_this$getConfig3 = this.getConfig()) !== null && _this$getConfig3 !== void 0 && _this$getConfig3.read_events) {
                  _context26.next = 4;
                  break;
                }
                return _context26.abrupt("return", Promise.resolve(null));
              case 4:
                _context26.next = 6;
                return this.getClient().post(this._channelURL() + "/read", _objectSpread$5({}, data));
              case 6:
                return _context26.abrupt("return", _context26.sent);
              case 7:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));
      function markRead() {
        return _markRead.apply(this, arguments);
      }
      return markRead;
    }()
    /**
     * markUnread - Mark the channel as unread from messageID, only works if the `read_events` setting is enabled
     *
     * @param {MarkUnreadOptions<StreamChatGenerics>} data
     * @return {APIResponse} An API response
     */
  }, {
    key: "markUnread",
    value: function() {
      var _markUnread = _asyncToGenerator(import_regenerator.default.mark(function _callee27(data) {
        var _this$getConfig4;
        return import_regenerator.default.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                this._checkInitialized();
                if ((_this$getConfig4 = this.getConfig()) !== null && _this$getConfig4 !== void 0 && _this$getConfig4.read_events) {
                  _context27.next = 3;
                  break;
                }
                return _context27.abrupt("return", Promise.resolve(null));
              case 3:
                _context27.next = 5;
                return this.getClient().post(this._channelURL() + "/unread", _objectSpread$5({}, data));
              case 5:
                return _context27.abrupt("return", _context27.sent);
              case 6:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));
      function markUnread(_x27) {
        return _markUnread.apply(this, arguments);
      }
      return markUnread;
    }()
    /**
     * clean - Cleans the channel state and fires stop typing if needed
     */
  }, {
    key: "clean",
    value: function clean() {
      if (this.lastKeyStroke) {
        var now = /* @__PURE__ */ new Date();
        var diff = now.getTime() - this.lastKeyStroke.getTime();
        if (diff > 1e3 && this.isTyping) {
          logChatPromiseExecution(this.stopTyping(), "stop typing event");
        }
      }
      this.state.clean();
    }
    /**
     * watch - Loads the initial channel state and watches for changes
     *
     * @param {ChannelQueryOptions<StreamChatGenerics>} options additional options for the query endpoint
     *
     * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} The server response
     */
  }, {
    key: "watch",
    value: function() {
      var _watch = _asyncToGenerator(import_regenerator.default.mark(function _callee28(options) {
        var defaultOptions, combined, state;
        return import_regenerator.default.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                defaultOptions = {
                  state: true,
                  watch: true,
                  presence: false
                };
                _context28.next = 3;
                return this.getClient().wsPromise;
              case 3:
                if (!this.getClient()._hasConnectionID()) {
                  defaultOptions.watch = false;
                }
                combined = _objectSpread$5(_objectSpread$5({}, defaultOptions), options);
                _context28.next = 7;
                return this.query(combined, "latest");
              case 7:
                state = _context28.sent;
                this.initialized = true;
                this.data = state.channel;
                this._client.logger("info", "channel:watch() - started watching channel ".concat(this.cid), {
                  tags: ["channel"],
                  channel: this
                });
                return _context28.abrupt("return", state);
              case 12:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));
      function watch(_x28) {
        return _watch.apply(this, arguments);
      }
      return watch;
    }()
    /**
     * stopWatching - Stops watching the channel
     *
     * @return {Promise<APIResponse>} The server response
     */
  }, {
    key: "stopWatching",
    value: function() {
      var _stopWatching = _asyncToGenerator(import_regenerator.default.mark(function _callee29() {
        var response;
        return import_regenerator.default.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                _context29.next = 2;
                return this.getClient().post(this._channelURL() + "/stop-watching", {});
              case 2:
                response = _context29.sent;
                this._client.logger("info", "channel:watch() - stopped watching channel ".concat(this.cid), {
                  tags: ["channel"],
                  channel: this
                });
                return _context29.abrupt("return", response);
              case 5:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));
      function stopWatching() {
        return _stopWatching.apply(this, arguments);
      }
      return stopWatching;
    }()
    /**
     * getReplies - List the message replies for a parent message
     *
     * @param {string} parent_id The message parent id, ie the top of the thread
     * @param {MessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}
     *
     * @return {Promise<GetRepliesAPIResponse<StreamChatGenerics>>} A response with a list of messages
     */
  }, {
    key: "getReplies",
    value: function() {
      var _getReplies = _asyncToGenerator(import_regenerator.default.mark(function _callee30(parent_id, options) {
        var data;
        return import_regenerator.default.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                _context30.next = 2;
                return this.getClient().get(this.getClient().baseURL + "/messages/".concat(parent_id, "/replies"), _objectSpread$5({}, options));
              case 2:
                data = _context30.sent;
                if (data.messages) {
                  this.state.addMessagesSorted(data.messages);
                }
                return _context30.abrupt("return", data);
              case 5:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this);
      }));
      function getReplies(_x29, _x30) {
        return _getReplies.apply(this, arguments);
      }
      return getReplies;
    }()
    /**
     * getPinnedMessages - List list pinned messages of the channel
     *
     * @param {PinnedMessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}
     * @param {PinnedMessagesSort} sort defines sorting direction of pinned messages
     *
     * @return {Promise<GetRepliesAPIResponse<StreamChatGenerics>>} A response with a list of messages
     */
  }, {
    key: "getPinnedMessages",
    value: function() {
      var _getPinnedMessages = _asyncToGenerator(import_regenerator.default.mark(function _callee31(options) {
        var sort, _args31 = arguments;
        return import_regenerator.default.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                sort = _args31.length > 1 && _args31[1] !== void 0 ? _args31[1] : [];
                _context31.next = 3;
                return this.getClient().get(this.getClient().baseURL + "/channels/".concat(this.type, "/").concat(this.id, "/pinned_messages"), {
                  payload: _objectSpread$5(_objectSpread$5({}, options), {}, {
                    sort: normalizeQuerySort(sort)
                  })
                });
              case 3:
                return _context31.abrupt("return", _context31.sent);
              case 4:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));
      function getPinnedMessages(_x31) {
        return _getPinnedMessages.apply(this, arguments);
      }
      return getPinnedMessages;
    }()
    /**
     * getReactions - List the reactions, supports pagination
     *
     * @param {string} message_id The message id
     * @param {{ limit?: number; offset?: number }} options The pagination options
     *
     * @return {Promise<GetReactionsAPIResponse<StreamChatGenerics>>} Server response
     */
  }, {
    key: "getReactions",
    value: function getReactions(message_id, options) {
      return this.getClient().get(this.getClient().baseURL + "/messages/".concat(message_id, "/reactions"), _objectSpread$5({}, options));
    }
    /**
     * getMessagesById - Retrieves a list of messages by ID
     *
     * @param {string[]} messageIds The ids of the messages to retrieve from this channel
     *
     * @return {Promise<GetMultipleMessagesAPIResponse<StreamChatGenerics>>} Server response
     */
  }, {
    key: "getMessagesById",
    value: function getMessagesById(messageIds) {
      return this.getClient().get(this._channelURL() + "/messages", {
        ids: messageIds.join(",")
      });
    }
    /**
     * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null
     * @return {Date | null | undefined}
     */
  }, {
    key: "lastRead",
    value: function lastRead() {
      var _this$getClient = this.getClient(), userID = _this$getClient.userID;
      if (userID) {
        return this.state.read[userID] ? this.state.read[userID].last_read : null;
      }
    }
  }, {
    key: "_countMessageAsUnread",
    value: function _countMessageAsUnread(message) {
      var _message$user, _message$user2, _this$data2, _this$data3;
      if (message.shadowed)
        return false;
      if (message.silent)
        return false;
      if (message.parent_id && !message.show_in_channel)
        return false;
      if (((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.id) === this.getClient().userID)
        return false;
      if ((_message$user2 = message.user) !== null && _message$user2 !== void 0 && _message$user2.id && this.getClient().userMuteStatus(message.user.id))
        return false;
      if (message.type === "system")
        return false;
      if (Array.isArray((_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.own_capabilities) && !((_this$data3 = this.data) !== null && _this$data3 !== void 0 && _this$data3.own_capabilities.includes("read-events")))
        return false;
      if (this.muteStatus().muted)
        return false;
      return true;
    }
    /**
     * countUnread - Count of unread messages
     *
     * @param {Date | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state
     *
     * @return {number} Unread count
     */
  }, {
    key: "countUnread",
    value: function countUnread(lastRead) {
      if (!lastRead)
        return this.state.unreadCount;
      var count = 0;
      for (var i = 0; i < this.state.latestMessages.length; i += 1) {
        var message = this.state.latestMessages[i];
        if (message.created_at > lastRead && this._countMessageAsUnread(message)) {
          count++;
        }
      }
      return count;
    }
    /**
     * countUnreadMentions - Count the number of unread messages mentioning the current user
     *
     * @return {number} Unread mentions count
     */
  }, {
    key: "countUnreadMentions",
    value: function countUnreadMentions() {
      var lastRead = this.lastRead();
      var userID = this.getClient().userID;
      var count = 0;
      for (var i = 0; i < this.state.latestMessages.length; i += 1) {
        var _message$mentioned_us;
        var message = this.state.latestMessages[i];
        if (this._countMessageAsUnread(message) && (!lastRead || message.created_at > lastRead) && (_message$mentioned_us = message.mentioned_users) !== null && _message$mentioned_us !== void 0 && _message$mentioned_us.some(function(user) {
          return user.id === userID;
        })) {
          count++;
        }
      }
      return count;
    }
    /**
     * create - Creates a new channel
     *
     * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} The Server Response
     *
     */
  }, {
    key: "query",
    value: (
      /**
       * query - Query the API, get messages, members or other channel fields
       *
       * @param {ChannelQueryOptions<StreamChatGenerics>} options The query options
       * @param {MessageSetType} messageSetToAddToIfDoesNotExist It's possible to load disjunct sets of a channel's messages into state, use `current` to load the initial channel state or if you want to extend the currently displayed messages, use `latest` if you want to load/extend the latest messages, `new` is used for loading a specific message and it's surroundings
       *
       * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} Returns a query response
       */
      function() {
        var _query = _asyncToGenerator(import_regenerator.default.mark(function _callee32(options) {
          var _this$data4, _this$data5;
          var messageSetToAddToIfDoesNotExist, queryURL, state, membersStr, tempChannelCid, _this$_initializeStat, messageSet, areCapabilitiesChanged, _args32 = arguments;
          return import_regenerator.default.wrap(function _callee32$(_context32) {
            while (1) {
              switch (_context32.prev = _context32.next) {
                case 0:
                  messageSetToAddToIfDoesNotExist = _args32.length > 1 && _args32[1] !== void 0 ? _args32[1] : "current";
                  _context32.next = 3;
                  return this.getClient().wsPromise;
                case 3:
                  queryURL = "".concat(this.getClient().baseURL, "/channels/").concat(this.type);
                  if (this.id) {
                    queryURL += "/".concat(this.id);
                  }
                  _context32.next = 7;
                  return this.getClient().post(queryURL + "/query", _objectSpread$5({
                    data: this._data,
                    state: true
                  }, options));
                case 7:
                  state = _context32.sent;
                  if (!this.id) {
                    this.id = state.channel.id;
                    this.cid = state.channel.cid;
                    membersStr = state.members.map(function(member) {
                      var _member$user;
                      return member.user_id || ((_member$user = member.user) === null || _member$user === void 0 ? void 0 : _member$user.id);
                    }).sort().join(",");
                    tempChannelCid = "".concat(this.type, ":!members-").concat(membersStr);
                    if (tempChannelCid in this.getClient().activeChannels) {
                      delete this.getClient().activeChannels[tempChannelCid];
                    }
                    if (!(this.cid in this.getClient().activeChannels)) {
                      this.getClient().activeChannels[this.cid] = this;
                    }
                  }
                  this.getClient()._addChannelConfig(state.channel);
                  _this$_initializeStat = this._initializeState(state, messageSetToAddToIfDoesNotExist), messageSet = _this$_initializeStat.messageSet;
                  areCapabilitiesChanged = _toConsumableArray(state.channel.own_capabilities || []).sort().join() !== _toConsumableArray(Array.isArray((_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.own_capabilities) ? (_this$data5 = this.data) === null || _this$data5 === void 0 ? void 0 : _this$data5.own_capabilities : []).sort().join();
                  this.data = state.channel;
                  this.offlineMode = false;
                  if (areCapabilitiesChanged) {
                    this.getClient().dispatchEvent({
                      type: "capabilities.changed",
                      cid: this.cid,
                      own_capabilities: state.channel.own_capabilities
                    });
                  }
                  this.getClient().dispatchEvent({
                    type: "channels.queried",
                    queriedChannels: {
                      channels: [state],
                      isLatestMessageSet: messageSet.isLatest
                    }
                  });
                  return _context32.abrupt("return", state);
                case 17:
                case "end":
                  return _context32.stop();
              }
            }
          }, _callee32, this);
        }));
        function query(_x32) {
          return _query.apply(this, arguments);
        }
        return query;
      }()
    )
    /**
     * banUser - Bans a user from a channel
     *
     * @param {string} targetUserID
     * @param {BanUserOptions<StreamChatGenerics>} options
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "banUser",
    value: function() {
      var _banUser = _asyncToGenerator(import_regenerator.default.mark(function _callee33(targetUserID, options) {
        return import_regenerator.default.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                this._checkInitialized();
                _context33.next = 3;
                return this.getClient().banUser(targetUserID, _objectSpread$5(_objectSpread$5({}, options), {}, {
                  type: this.type,
                  id: this.id
                }));
              case 3:
                return _context33.abrupt("return", _context33.sent);
              case 4:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));
      function banUser(_x33, _x34) {
        return _banUser.apply(this, arguments);
      }
      return banUser;
    }()
    /**
     * hides the channel from queryChannels for the user until a message is added
     * If clearHistory is set to true - all messages will be removed for the user
     *
     * @param {string | null} userId
     * @param {boolean} clearHistory
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "hide",
    value: function() {
      var _hide = _asyncToGenerator(import_regenerator.default.mark(function _callee34() {
        var userId, clearHistory, _args34 = arguments;
        return import_regenerator.default.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                userId = _args34.length > 0 && _args34[0] !== void 0 ? _args34[0] : null;
                clearHistory = _args34.length > 1 && _args34[1] !== void 0 ? _args34[1] : false;
                this._checkInitialized();
                _context34.next = 5;
                return this.getClient().post("".concat(this._channelURL(), "/hide"), {
                  user_id: userId,
                  clear_history: clearHistory
                });
              case 5:
                return _context34.abrupt("return", _context34.sent);
              case 6:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));
      function hide2() {
        return _hide.apply(this, arguments);
      }
      return hide2;
    }()
    /**
     * removes the hidden status for a channel
     *
     * @param {string | null} userId
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "show",
    value: function() {
      var _show = _asyncToGenerator(import_regenerator.default.mark(function _callee35() {
        var userId, _args35 = arguments;
        return import_regenerator.default.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                userId = _args35.length > 0 && _args35[0] !== void 0 ? _args35[0] : null;
                this._checkInitialized();
                _context35.next = 4;
                return this.getClient().post("".concat(this._channelURL(), "/show"), {
                  user_id: userId
                });
              case 4:
                return _context35.abrupt("return", _context35.sent);
              case 5:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));
      function show() {
        return _show.apply(this, arguments);
      }
      return show;
    }()
    /**
     * unbanUser - Removes the bans for a user on a channel
     *
     * @param {string} targetUserID
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "unbanUser",
    value: function() {
      var _unbanUser = _asyncToGenerator(import_regenerator.default.mark(function _callee36(targetUserID) {
        return import_regenerator.default.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                this._checkInitialized();
                _context36.next = 3;
                return this.getClient().unbanUser(targetUserID, {
                  type: this.type,
                  id: this.id
                });
              case 3:
                return _context36.abrupt("return", _context36.sent);
              case 4:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36, this);
      }));
      function unbanUser(_x35) {
        return _unbanUser.apply(this, arguments);
      }
      return unbanUser;
    }()
    /**
     * shadowBan - Shadow bans a user from a channel
     *
     * @param {string} targetUserID
     * @param {BanUserOptions<StreamChatGenerics>} options
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "shadowBan",
    value: function() {
      var _shadowBan = _asyncToGenerator(import_regenerator.default.mark(function _callee37(targetUserID, options) {
        return import_regenerator.default.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                this._checkInitialized();
                _context37.next = 3;
                return this.getClient().shadowBan(targetUserID, _objectSpread$5(_objectSpread$5({}, options), {}, {
                  type: this.type,
                  id: this.id
                }));
              case 3:
                return _context37.abrupt("return", _context37.sent);
              case 4:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));
      function shadowBan(_x36, _x37) {
        return _shadowBan.apply(this, arguments);
      }
      return shadowBan;
    }()
    /**
     * removeShadowBan - Removes the shadow ban for a user on a channel
     *
     * @param {string} targetUserID
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "removeShadowBan",
    value: function() {
      var _removeShadowBan = _asyncToGenerator(import_regenerator.default.mark(function _callee38(targetUserID) {
        return import_regenerator.default.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                this._checkInitialized();
                _context38.next = 3;
                return this.getClient().removeShadowBan(targetUserID, {
                  type: this.type,
                  id: this.id
                });
              case 3:
                return _context38.abrupt("return", _context38.sent);
              case 4:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));
      function removeShadowBan(_x38) {
        return _removeShadowBan.apply(this, arguments);
      }
      return removeShadowBan;
    }()
    /**
     * createCall - creates a call for the current channel
     *
     * @param {CreateCallOptions} options
     * @returns {Promise<CreateCallResponse>}
     */
  }, {
    key: "createCall",
    value: function() {
      var _createCall = _asyncToGenerator(import_regenerator.default.mark(function _callee39(options) {
        return import_regenerator.default.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                _context39.next = 2;
                return this.getClient().post(this._channelURL() + "/call", options);
              case 2:
                return _context39.abrupt("return", _context39.sent);
              case 3:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));
      function createCall(_x39) {
        return _createCall.apply(this, arguments);
      }
      return createCall;
    }()
    /**
     * on - Listen to events on this channel.
     *
     * channel.on('message.new', event => {console.log("my new message", event, channel.state.messages)})
     * or
     * channel.on(event => {console.log(event.type)})
     *
     * @param {EventHandler<StreamChatGenerics> | EventTypes} callbackOrString  The event type to listen for (optional)
     * @param {EventHandler<StreamChatGenerics>} [callbackOrNothing] The callback to call
     */
  }, {
    key: "on",
    value: function on(callbackOrString, callbackOrNothing) {
      var _this2 = this;
      var key = callbackOrNothing ? callbackOrString : "all";
      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;
      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }
      this._client.logger("info", "Attaching listener for ".concat(key, " event on channel ").concat(this.cid), {
        tags: ["event", "channel"],
        channel: this
      });
      this.listeners[key].push(callback);
      return {
        unsubscribe: function unsubscribe() {
          _this2._client.logger("info", "Removing listener for ".concat(key, " event from channel ").concat(_this2.cid), {
            tags: ["event", "channel"],
            channel: _this2
          });
          _this2.listeners[key] = _this2.listeners[key].filter(function(el) {
            return el !== callback;
          });
        }
      };
    }
    /**
     * off - Remove the event handler
     *
     */
  }, {
    key: "off",
    value: function off(callbackOrString, callbackOrNothing) {
      var key = callbackOrNothing ? callbackOrString : "all";
      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;
      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }
      this._client.logger("info", "Removing listener for ".concat(key, " event from channel ").concat(this.cid), {
        tags: ["event", "channel"],
        channel: this
      });
      this.listeners[key] = this.listeners[key].filter(function(value) {
        return value !== callback;
      });
    }
    // eslint-disable-next-line sonarjs/cognitive-complexity
  }, {
    key: "_handleChannelEvent",
    value: function _handleChannelEvent(event) {
      var _event$user, _event$user2, _event$user3, _event$user5, _event$user6, _event$channel, _event$member, _event$user9, _event$user10, _channelState$members, _event$user11, _channelState$members2;
      var channel = this;
      this._client.logger("info", "channel:_handleChannelEvent - Received event of type { ".concat(event.type, " } on ").concat(this.cid), {
        tags: ["event", "channel"],
        channel: this
      });
      var channelState = channel.state;
      switch (event.type) {
        case "typing.start":
          if ((_event$user = event.user) !== null && _event$user !== void 0 && _event$user.id) {
            channelState.typing[event.user.id] = event;
          }
          break;
        case "typing.stop":
          if ((_event$user2 = event.user) !== null && _event$user2 !== void 0 && _event$user2.id) {
            delete channelState.typing[event.user.id];
          }
          break;
        case "message.read":
          if ((_event$user3 = event.user) !== null && _event$user3 !== void 0 && _event$user3.id && event.created_at) {
            var _event$user4, _this$getClient$user;
            channelState.read[event.user.id] = {
              // because in client.ts the handleEvent call that flows to this sets this `event.received_at = new Date();`
              last_read: new Date(event.created_at),
              last_read_message_id: event.last_read_message_id,
              user: event.user,
              unread_messages: 0
            };
            if (((_event$user4 = event.user) === null || _event$user4 === void 0 ? void 0 : _event$user4.id) === ((_this$getClient$user = this.getClient().user) === null || _this$getClient$user === void 0 ? void 0 : _this$getClient$user.id)) {
              channelState.unreadCount = 0;
            }
          }
          break;
        case "user.watching.start":
        case "user.updated":
          if ((_event$user5 = event.user) !== null && _event$user5 !== void 0 && _event$user5.id) {
            channelState.watchers[event.user.id] = event.user;
          }
          break;
        case "user.watching.stop":
          if ((_event$user6 = event.user) !== null && _event$user6 !== void 0 && _event$user6.id) {
            delete channelState.watchers[event.user.id];
          }
          break;
        case "message.deleted":
          if (event.message) {
            this._extendEventWithOwnReactions(event);
            if (event.hard_delete)
              channelState.removeMessage(event.message);
            else
              channelState.addMessageSorted(event.message, false, false);
            channelState.removeQuotedMessageReferences(event.message);
            if (event.message.pinned) {
              channelState.removePinnedMessage(event.message);
            }
          }
          break;
        case "message.new":
          if (event.message) {
            var _event$user7, _this$getClient$user2, _event$user8;
            var ownMessage = ((_event$user7 = event.user) === null || _event$user7 === void 0 ? void 0 : _event$user7.id) === ((_this$getClient$user2 = this.getClient().user) === null || _this$getClient$user2 === void 0 ? void 0 : _this$getClient$user2.id);
            var isThreadMessage = event.message.parent_id && !event.message.show_in_channel;
            if (this.state.isUpToDate || isThreadMessage) {
              channelState.addMessageSorted(event.message, ownMessage);
            }
            if (event.message.pinned) {
              channelState.addPinnedMessage(event.message);
            }
            if ((_event$user8 = event.user) !== null && _event$user8 !== void 0 && _event$user8.id) {
              for (var userId in channelState.read) {
                if (userId === event.user.id) {
                  channelState.read[event.user.id] = {
                    last_read: new Date(event.created_at),
                    user: event.user,
                    unread_messages: 0
                  };
                } else {
                  channelState.read[userId].unread_messages += 1;
                }
              }
            }
            if (ownMessage) {
              channelState.unreadCount = 0;
            } else if (this._countMessageAsUnread(event.message)) {
              channelState.unreadCount = channelState.unreadCount + 1;
            }
          }
          break;
        case "message.updated":
          if (event.message) {
            this._extendEventWithOwnReactions(event);
            channelState.addMessageSorted(event.message, false, false);
            if (event.message.pinned) {
              channelState.addPinnedMessage(event.message);
            } else {
              channelState.removePinnedMessage(event.message);
            }
          }
          break;
        case "channel.truncated":
          if ((_event$channel = event.channel) !== null && _event$channel !== void 0 && _event$channel.truncated_at) {
            var truncatedAt = +new Date(event.channel.truncated_at);
            channelState.messageSets.forEach(function(messageSet, messageSetIndex) {
              messageSet.messages.forEach(function(_ref2) {
                var createdAt = _ref2.created_at, id = _ref2.id;
                if (truncatedAt > +createdAt)
                  channelState.removeMessage({
                    id,
                    messageSetIndex
                  });
              });
            });
            channelState.pinnedMessages.forEach(function(_ref3) {
              var id = _ref3.id, createdAt = _ref3.created_at;
              if (truncatedAt > +createdAt)
                channelState.removePinnedMessage({
                  id
                });
            });
          } else {
            channelState.clearMessages();
          }
          channelState.unreadCount = 0;
          if (event.message) {
            channelState.addMessageSorted(event.message);
            if (event.message.pinned) {
              channelState.addPinnedMessage(event.message);
            }
          }
          break;
        case "member.added":
        case "member.updated":
          if ((_event$member = event.member) !== null && _event$member !== void 0 && _event$member.user_id) {
            channelState.members[event.member.user_id] = event.member;
          }
          break;
        case "member.removed":
          if ((_event$user9 = event.user) !== null && _event$user9 !== void 0 && _event$user9.id) {
            delete channelState.members[event.user.id];
          }
          break;
        case "channel.updated":
          if (event.channel) {
            var _event$channel2, _channel$data, _event$channel$hidden, _event$channel3, _channel$data2, _event$channel$own_ca, _event$channel4, _channel$data3;
            var isFrozenChanged = ((_event$channel2 = event.channel) === null || _event$channel2 === void 0 ? void 0 : _event$channel2.frozen) !== void 0 && event.channel.frozen !== ((_channel$data = channel.data) === null || _channel$data === void 0 ? void 0 : _channel$data.frozen);
            if (isFrozenChanged) {
              this.query({
                state: false,
                messages: {
                  limit: 0
                },
                watchers: {
                  limit: 0
                }
              });
            }
            channel.data = _objectSpread$5(_objectSpread$5({}, event.channel), {}, {
              hidden: (_event$channel$hidden = (_event$channel3 = event.channel) === null || _event$channel3 === void 0 ? void 0 : _event$channel3.hidden) !== null && _event$channel$hidden !== void 0 ? _event$channel$hidden : (_channel$data2 = channel.data) === null || _channel$data2 === void 0 ? void 0 : _channel$data2.hidden,
              own_capabilities: (_event$channel$own_ca = (_event$channel4 = event.channel) === null || _event$channel4 === void 0 ? void 0 : _event$channel4.own_capabilities) !== null && _event$channel$own_ca !== void 0 ? _event$channel$own_ca : (_channel$data3 = channel.data) === null || _channel$data3 === void 0 ? void 0 : _channel$data3.own_capabilities
            });
          }
          break;
        case "reaction.new":
          if (event.message && event.reaction) {
            event.message = channelState.addReaction(event.reaction, event.message);
          }
          break;
        case "reaction.deleted":
          if (event.reaction) {
            event.message = channelState.removeReaction(event.reaction, event.message);
          }
          break;
        case "reaction.updated":
          if (event.reaction) {
            event.message = channelState.addReaction(event.reaction, event.message, true);
          }
          break;
        case "channel.hidden":
          channel.data = _objectSpread$5(_objectSpread$5({}, channel.data), {}, {
            hidden: true
          });
          if (event.clear_history) {
            channelState.clearMessages();
          }
          break;
        case "channel.visible":
          channel.data = _objectSpread$5(_objectSpread$5({}, channel.data), {}, {
            hidden: false
          });
          break;
        case "user.banned":
          if (!((_event$user10 = event.user) !== null && _event$user10 !== void 0 && _event$user10.id))
            break;
          channelState.members[event.user.id] = _objectSpread$5(_objectSpread$5({}, channelState.members[event.user.id] || {}), {}, {
            shadow_banned: !!event.shadow,
            banned: !event.shadow,
            user: _objectSpread$5(_objectSpread$5({}, ((_channelState$members = channelState.members[event.user.id]) === null || _channelState$members === void 0 ? void 0 : _channelState$members.user) || {}), event.user)
          });
          break;
        case "user.unbanned":
          if (!((_event$user11 = event.user) !== null && _event$user11 !== void 0 && _event$user11.id))
            break;
          channelState.members[event.user.id] = _objectSpread$5(_objectSpread$5({}, channelState.members[event.user.id] || {}), {}, {
            shadow_banned: false,
            banned: false,
            user: _objectSpread$5(_objectSpread$5({}, ((_channelState$members2 = channelState.members[event.user.id]) === null || _channelState$members2 === void 0 ? void 0 : _channelState$members2.user) || {}), event.user)
          });
          break;
      }
      if (event.watcher_count !== void 0) {
        channel.state.watcher_count = event.watcher_count;
      }
    }
  }, {
    key: "_checkInitialized",
    value: function _checkInitialized() {
      if (!this.initialized && !this.offlineMode && !this.getClient()._isUsingServerAuth()) {
        throw Error("Channel ".concat(this.cid, " hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve"));
      }
    }
    // eslint-disable-next-line sonarjs/cognitive-complexity
  }, {
    key: "_initializeState",
    value: function _initializeState(state) {
      var messageSetToAddToIfDoesNotExist = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "latest";
      var _this$getClient2 = this.getClient(), clientState = _this$getClient2.state, user = _this$getClient2.user, userID = _this$getClient2.userID;
      if (state.members) {
        var _iterator = _createForOfIteratorHelper$2(state.members), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var member = _step.value;
            if (member.user) {
              clientState.updateUserReference(member.user, this.cid);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      this.state.membership = state.membership || {};
      var messages = state.messages || [];
      if (!this.state.messages) {
        this.state.initMessages();
      }
      var _this$state$addMessag = this.state.addMessagesSorted(messages, false, true, true, messageSetToAddToIfDoesNotExist), messageSet = _this$state$addMessag.messageSet;
      if (!this.state.pinnedMessages) {
        this.state.pinnedMessages = [];
      }
      this.state.addPinnedMessages(state.pinned_messages || []);
      if (state.pending_messages) {
        this.state.pending_messages = state.pending_messages;
      }
      if (state.watcher_count !== void 0) {
        this.state.watcher_count = state.watcher_count;
      }
      if (state.watchers) {
        var _iterator2 = _createForOfIteratorHelper$2(state.watchers), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var watcher = _step2.value;
            if (watcher) {
              clientState.updateUserReference(watcher, this.cid);
              this.state.watchers[watcher.id] = watcher;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      if (userID != null) {
        var last_read = this.state.last_message_at || /* @__PURE__ */ new Date();
        if (user) {
          this.state.read[user.id] = {
            user,
            last_read,
            unread_messages: 0
          };
        }
      }
      if (state.read) {
        var _iterator3 = _createForOfIteratorHelper$2(state.read), _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
            var _read$unread_messages;
            var read = _step3.value;
            this.state.read[read.user.id] = {
              last_read: new Date(read.last_read),
              last_read_message_id: read.last_read_message_id,
              unread_messages: (_read$unread_messages = read.unread_messages) !== null && _read$unread_messages !== void 0 ? _read$unread_messages : 0,
              user: read.user
            };
            if (read.user.id === (user === null || user === void 0 ? void 0 : user.id)) {
              this.state.unreadCount = this.state.read[read.user.id].unread_messages;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
      if (state.members) {
        this.state.members = state.members.reduce(function(acc, member2) {
          if (member2.user) {
            acc[member2.user.id] = member2;
          }
          return acc;
        }, {});
      }
      return {
        messageSet
      };
    }
  }, {
    key: "_extendEventWithOwnReactions",
    value: function _extendEventWithOwnReactions(event) {
      if (!event.message) {
        return;
      }
      var message = this.state.findMessage(event.message.id, event.message.parent_id);
      if (message) {
        event.message.own_reactions = message.own_reactions;
      }
    }
  }, {
    key: "_disconnect",
    value: function _disconnect() {
      this._client.logger("info", "channel:disconnect() - Disconnecting the channel ".concat(this.cid), {
        tags: ["connection", "channel"],
        channel: this
      });
      this.disconnected = true;
      this.state.setIsUpToDate(false);
    }
  }]);
  return Channel2;
}();
function _createForOfIteratorHelper$1(o2, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (!it) {
    if (Array.isArray(o2) || (it = _unsupportedIterableToArray$1(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
      if (it)
        o2 = it;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o2.length)
          return { done: true };
        return { done: false, value: o2[i++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it = it.call(o2);
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$1(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray$1(o2, minLen);
  var n = Object.prototype.toString.call(o2).slice(8, -1);
  if (n === "Object" && o2.constructor)
    n = o2.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o2);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$1(o2, minLen);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var ClientState = function() {
  function ClientState2() {
    _classCallCheck(this, ClientState2);
    _defineProperty(this, "users", void 0);
    _defineProperty(this, "userChannelReferences", void 0);
    this.users = {};
    this.userChannelReferences = {};
  }
  _createClass(ClientState2, [{
    key: "updateUsers",
    value: function updateUsers(users) {
      var _iterator = _createForOfIteratorHelper$1(users), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var user = _step.value;
          this.updateUser(user);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "updateUser",
    value: function updateUser(user) {
      if (user != null) {
        this.users[user.id] = user;
      }
    }
  }, {
    key: "updateUserReference",
    value: function updateUserReference(user, channelID) {
      if (user == null) {
        return;
      }
      this.updateUser(user);
      if (!this.userChannelReferences[user.id]) {
        this.userChannelReferences[user.id] = {};
      }
      this.userChannelReferences[user.id][channelID] = true;
    }
  }, {
    key: "deleteAllChannelReference",
    value: function deleteAllChannelReference(channelID) {
      for (var userID in this.userChannelReferences) {
        delete this.userChannelReferences[userID][channelID];
      }
    }
  }]);
  return ClientState2;
}();
function ownKeys$4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$4(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$4(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var InsightMetrics = function InsightMetrics2() {
  _classCallCheck(this, InsightMetrics2);
  _defineProperty(this, "connectionStartTimestamp", void 0);
  _defineProperty(this, "wsConsecutiveFailures", void 0);
  _defineProperty(this, "wsTotalFailures", void 0);
  _defineProperty(this, "instanceClientId", void 0);
  this.connectionStartTimestamp = null;
  this.wsTotalFailures = 0;
  this.wsConsecutiveFailures = 0;
  this.instanceClientId = randomId();
};
var postInsights = function() {
  var _ref = _asyncToGenerator(import_regenerator.default.mark(function _callee(insightType, insights) {
    var maxAttempts, i;
    return import_regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            maxAttempts = 3;
            i = 0;
          case 2:
            if (!(i < maxAttempts)) {
              _context.next = 17;
              break;
            }
            _context.prev = 3;
            _context.next = 6;
            return axios_default.post("https://chat-insights.getstream.io/insights/".concat(insightType), insights);
          case 6:
            _context.next = 13;
            break;
          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](3);
            _context.next = 12;
            return sleep((i + 1) * 3e3);
          case 12:
            return _context.abrupt("continue", 14);
          case 13:
            return _context.abrupt("break", 17);
          case 14:
            i++;
            _context.next = 2;
            break;
          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 8]]);
  }));
  return function postInsights2(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
function buildWsFatalInsight(connection, event) {
  return _objectSpread$4(_objectSpread$4({}, event), buildWsBaseInsight(connection));
}
function buildWsBaseInsight(connection) {
  var _connection$ws, _navigator, _navigator2;
  var client = connection.client;
  return {
    ready_state: (_connection$ws = connection.ws) === null || _connection$ws === void 0 ? void 0 : _connection$ws.readyState,
    url: connection._buildUrl(),
    api_key: client.key,
    start_ts: client.insightMetrics.connectionStartTimestamp,
    end_ts: (/* @__PURE__ */ new Date()).getTime(),
    auth_type: client.getAuthType(),
    token: client.tokenManager.token,
    user_id: client.userID,
    user_details: client._user,
    device: client.options.device,
    client_id: connection.connectionID,
    ws_details: connection.ws,
    ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,
    ws_total_failures: client.insightMetrics.wsTotalFailures,
    request_id: connection.requestID,
    online: typeof navigator !== "undefined" ? (_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.onLine : null,
    user_agent: typeof navigator !== "undefined" ? (_navigator2 = navigator) === null || _navigator2 === void 0 ? void 0 : _navigator2.userAgent : null,
    instance_client_id: client.insightMetrics.instanceClientId
  };
}
function buildWsSuccessAfterFailureInsight(connection) {
  return buildWsBaseInsight(connection);
}
function ownKeys$3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$3(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var isCloseEvent = function isCloseEvent2(res) {
  return res.code !== void 0;
};
var isErrorEvent = function isErrorEvent2(res) {
  return res.error !== void 0;
};
var StableWSConnection = function() {
  function StableWSConnection2(_ref) {
    var _this = this;
    var client = _ref.client;
    _classCallCheck(this, StableWSConnection2);
    _defineProperty(this, "client", void 0);
    _defineProperty(this, "connectionID", void 0);
    _defineProperty(this, "connectionOpen", void 0);
    _defineProperty(this, "consecutiveFailures", void 0);
    _defineProperty(this, "pingInterval", void 0);
    _defineProperty(this, "healthCheckTimeoutRef", void 0);
    _defineProperty(this, "isConnecting", void 0);
    _defineProperty(this, "isDisconnected", void 0);
    _defineProperty(this, "isHealthy", void 0);
    _defineProperty(this, "isResolved", void 0);
    _defineProperty(this, "lastEvent", void 0);
    _defineProperty(this, "connectionCheckTimeout", void 0);
    _defineProperty(this, "connectionCheckTimeoutRef", void 0);
    _defineProperty(this, "rejectPromise", void 0);
    _defineProperty(this, "requestID", void 0);
    _defineProperty(this, "resolvePromise", void 0);
    _defineProperty(this, "totalFailures", void 0);
    _defineProperty(this, "ws", void 0);
    _defineProperty(this, "wsID", void 0);
    _defineProperty(this, "_buildUrl", function() {
      var qs = encodeURIComponent(_this.client._buildWSPayload(_this.requestID));
      var token = _this.client.tokenManager.getToken();
      return "".concat(_this.client.wsBaseURL, "/connect?json=").concat(qs, "&api_key=").concat(_this.client.key, "&authorization=").concat(token, "&stream-auth-type=").concat(_this.client.getAuthType(), "&X-Stream-Client=").concat(_this.client.getUserAgent());
    });
    _defineProperty(this, "onlineStatusChanged", function(event) {
      if (event.type === "offline") {
        _this._log("onlineStatusChanged() - Status changing to offline");
        _this._setHealth(false);
      } else if (event.type === "online") {
        _this._log("onlineStatusChanged() - Status changing to online. isHealthy: ".concat(_this.isHealthy));
        if (!_this.isHealthy) {
          _this._reconnect({
            interval: 10
          });
        }
      }
    });
    _defineProperty(this, "onopen", function(wsID) {
      if (_this.wsID !== wsID)
        return;
      _this._log("onopen() - onopen callback", {
        wsID
      });
    });
    _defineProperty(this, "onmessage", function(wsID, event) {
      if (_this.wsID !== wsID)
        return;
      _this._log("onmessage() - onmessage callback", {
        event,
        wsID
      });
      var data = typeof event.data === "string" ? JSON.parse(event.data) : null;
      if (!_this.isResolved && data) {
        var _this$resolvePromise;
        _this.isResolved = true;
        if (data.error) {
          var _this$rejectPromise;
          (_this$rejectPromise = _this.rejectPromise) === null || _this$rejectPromise === void 0 ? void 0 : _this$rejectPromise.call(_this, _this._errorFromWSEvent(data, false));
          return;
        }
        (_this$resolvePromise = _this.resolvePromise) === null || _this$resolvePromise === void 0 ? void 0 : _this$resolvePromise.call(_this, data);
        _this._setHealth(true);
      }
      _this.lastEvent = /* @__PURE__ */ new Date();
      if (data && data.type === "health.check") {
        _this.scheduleNextPing();
      }
      _this.client.handleEvent(event);
      _this.scheduleConnectionCheck();
    });
    _defineProperty(this, "onclose", function(wsID, event) {
      if (_this.wsID !== wsID)
        return;
      _this._log("onclose() - onclose callback - " + event.code, {
        event,
        wsID
      });
      if (event.code === chatCodes.WS_CLOSED_SUCCESS) {
        var _this$rejectPromise2;
        var error = new Error("WS connection reject with error ".concat(event.reason));
        error.reason = event.reason;
        error.code = event.code;
        error.wasClean = event.wasClean;
        error.target = event.target;
        (_this$rejectPromise2 = _this.rejectPromise) === null || _this$rejectPromise2 === void 0 ? void 0 : _this$rejectPromise2.call(_this, error);
        _this._log("onclose() - WS connection reject with error ".concat(event.reason), {
          event
        });
      } else {
        var _this$rejectPromise3;
        _this.consecutiveFailures += 1;
        _this.totalFailures += 1;
        _this._setHealth(false);
        _this.isConnecting = false;
        (_this$rejectPromise3 = _this.rejectPromise) === null || _this$rejectPromise3 === void 0 ? void 0 : _this$rejectPromise3.call(_this, _this._errorFromWSEvent(event));
        _this._log("onclose() - WS connection closed. Calling reconnect ...", {
          event
        });
        _this._reconnect();
      }
    });
    _defineProperty(this, "onerror", function(wsID, event) {
      var _this$rejectPromise4;
      if (_this.wsID !== wsID)
        return;
      _this.consecutiveFailures += 1;
      _this.totalFailures += 1;
      _this._setHealth(false);
      _this.isConnecting = false;
      (_this$rejectPromise4 = _this.rejectPromise) === null || _this$rejectPromise4 === void 0 ? void 0 : _this$rejectPromise4.call(_this, _this._errorFromWSEvent(event));
      _this._log("onerror() - WS connection resulted into error", {
        event
      });
      _this._reconnect();
    });
    _defineProperty(this, "_setHealth", function(healthy) {
      if (healthy === _this.isHealthy)
        return;
      _this.isHealthy = healthy;
      if (_this.isHealthy) {
        _this.client.dispatchEvent({
          type: "connection.changed",
          online: _this.isHealthy
        });
        return;
      }
      setTimeout(function() {
        if (_this.isHealthy)
          return;
        _this.client.dispatchEvent({
          type: "connection.changed",
          online: _this.isHealthy
        });
      }, 5e3);
    });
    _defineProperty(this, "_errorFromWSEvent", function(event) {
      var isWSFailure2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var code;
      var statusCode;
      var message;
      if (isCloseEvent(event)) {
        code = event.code;
        statusCode = "unknown";
        message = event.reason;
      }
      if (isErrorEvent(event)) {
        code = event.error.code;
        statusCode = event.error.StatusCode;
        message = event.error.message;
      }
      _this._log("_errorFromWSEvent() - WS failed with code ".concat(code), {
        event
      }, "warn");
      var error = new Error("WS failed with code ".concat(code, " and reason - ").concat(message));
      error.code = code;
      error.StatusCode = statusCode;
      error.isWSFailure = isWSFailure2;
      return error;
    });
    _defineProperty(this, "_setupConnectionPromise", function() {
      _this.isResolved = false;
      _this.connectionOpen = new Promise(function(resolve, reject) {
        _this.resolvePromise = resolve;
        _this.rejectPromise = reject;
      });
    });
    _defineProperty(this, "scheduleNextPing", function() {
      if (_this.healthCheckTimeoutRef) {
        clearTimeout(_this.healthCheckTimeoutRef);
      }
      _this.healthCheckTimeoutRef = setTimeout(function() {
        var data = [{
          type: "health.check",
          client_id: _this.client.clientID
        }];
        try {
          var _this$ws;
          (_this$ws = _this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.send(JSON.stringify(data));
        } catch (e2) {
        }
      }, _this.pingInterval);
    });
    _defineProperty(this, "scheduleConnectionCheck", function() {
      if (_this.connectionCheckTimeoutRef) {
        clearTimeout(_this.connectionCheckTimeoutRef);
      }
      _this.connectionCheckTimeoutRef = setTimeout(function() {
        var now = /* @__PURE__ */ new Date();
        if (_this.lastEvent && now.getTime() - _this.lastEvent.getTime() > _this.connectionCheckTimeout) {
          _this._log("scheduleConnectionCheck - going to reconnect");
          _this._setHealth(false);
          _this._reconnect();
        }
      }, _this.connectionCheckTimeout);
    });
    this.client = client;
    this.consecutiveFailures = 0;
    this.totalFailures = 0;
    this.isConnecting = false;
    this.isDisconnected = false;
    this.isResolved = false;
    this.isHealthy = false;
    this.wsID = 1;
    this.lastEvent = null;
    this.pingInterval = 25 * 1e3;
    this.connectionCheckTimeout = this.pingInterval + 10 * 1e3;
    addConnectionEventListeners(this.onlineStatusChanged);
  }
  _createClass(StableWSConnection2, [{
    key: "_log",
    value: function _log(msg) {
      var extra = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "info";
      this.client.logger(level, "connection:" + msg, _objectSpread$3({
        tags: ["connection"]
      }, extra));
    }
  }, {
    key: "setClient",
    value: function setClient(client) {
      this.client = client;
    }
    /**
     * connect - Connect to the WS URL
     * the default 15s timeout allows between 2~3 tries
     * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received
     */
  }, {
    key: "connect",
    value: function() {
      var _connect2 = _asyncToGenerator(import_regenerator.default.mark(function _callee() {
        var timeout, healthCheck, _args = arguments;
        return import_regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                timeout = _args.length > 0 && _args[0] !== void 0 ? _args[0] : 15e3;
                if (!this.isConnecting) {
                  _context.next = 3;
                  break;
                }
                throw Error("You've called connect twice, can only attempt 1 connection at the time");
              case 3:
                this.isDisconnected = false;
                _context.prev = 4;
                _context.next = 7;
                return this._connect();
              case 7:
                healthCheck = _context.sent;
                this.consecutiveFailures = 0;
                this._log("connect() - Established ws connection with healthcheck: ".concat(healthCheck));
                _context.next = 23;
                break;
              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](4);
                this.isHealthy = false;
                this.consecutiveFailures += 1;
                if (!(_context.t0.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic())) {
                  _context.next = 21;
                  break;
                }
                this._log("connect() - WS failure due to expired token, so going to try to reload token and reconnect");
                this._reconnect({
                  refreshToken: true
                });
                _context.next = 23;
                break;
              case 21:
                if (_context.t0.isWSFailure) {
                  _context.next = 23;
                  break;
                }
                throw new Error(JSON.stringify({
                  code: _context.t0.code,
                  StatusCode: _context.t0.StatusCode,
                  message: _context.t0.message,
                  isWSFailure: _context.t0.isWSFailure
                }));
              case 23:
                _context.next = 25;
                return this._waitForHealthy(timeout);
              case 25:
                return _context.abrupt("return", _context.sent);
              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[4, 12]]);
      }));
      function connect() {
        return _connect2.apply(this, arguments);
      }
      return connect;
    }()
    /**
     * _waitForHealthy polls the promise connection to see if its resolved until it times out
     * the default 15s timeout allows between 2~3 tries
     * @param timeout duration(ms)
     */
  }, {
    key: "_waitForHealthy",
    value: function() {
      var _waitForHealthy2 = _asyncToGenerator(import_regenerator.default.mark(function _callee4() {
        var _this2 = this;
        var timeout, _args4 = arguments;
        return import_regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                timeout = _args4.length > 0 && _args4[0] !== void 0 ? _args4[0] : 15e3;
                return _context4.abrupt("return", Promise.race([_asyncToGenerator(import_regenerator.default.mark(function _callee2() {
                  var interval, i;
                  return import_regenerator.default.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          interval = 50;
                          i = 0;
                        case 2:
                          if (!(i <= timeout)) {
                            _context2.next = 18;
                            break;
                          }
                          _context2.prev = 3;
                          _context2.next = 6;
                          return _this2.connectionOpen;
                        case 6:
                          return _context2.abrupt("return", _context2.sent);
                        case 9:
                          _context2.prev = 9;
                          _context2.t0 = _context2["catch"](3);
                          if (!(i === timeout)) {
                            _context2.next = 13;
                            break;
                          }
                          throw new Error(JSON.stringify({
                            code: _context2.t0.code,
                            StatusCode: _context2.t0.StatusCode,
                            message: _context2.t0.message,
                            isWSFailure: _context2.t0.isWSFailure
                          }));
                        case 13:
                          _context2.next = 15;
                          return sleep(interval);
                        case 15:
                          i += interval;
                          _context2.next = 2;
                          break;
                        case 18:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, null, [[3, 9]]);
                }))(), _asyncToGenerator(import_regenerator.default.mark(function _callee3() {
                  return import_regenerator.default.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return sleep(timeout);
                        case 2:
                          _this2.isConnecting = false;
                          throw new Error(JSON.stringify({
                            code: "",
                            StatusCode: "",
                            message: "initial WS connection could not be established",
                            isWSFailure: true
                          }));
                        case 4:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))()]));
              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      function _waitForHealthy() {
        return _waitForHealthy2.apply(this, arguments);
      }
      return _waitForHealthy;
    }()
    /**
     * Builds and returns the url for websocket.
     * @private
     * @returns url string
     */
  }, {
    key: "disconnect",
    value: (
      /**
       * disconnect - Disconnect the connection and doesn't recover...
       *
       */
      function disconnect(timeout) {
        var _this3 = this;
        this._log("disconnect() - Closing the websocket connection for wsID ".concat(this.wsID));
        this.wsID += 1;
        this.isConnecting = false;
        this.isDisconnected = true;
        if (this.healthCheckTimeoutRef) {
          clearInterval(this.healthCheckTimeoutRef);
        }
        if (this.connectionCheckTimeoutRef) {
          clearInterval(this.connectionCheckTimeoutRef);
        }
        removeConnectionEventListeners(this.onlineStatusChanged);
        this.isHealthy = false;
        if (this.ws && this.ws.removeAllListeners) {
          this.ws.removeAllListeners();
        }
        var isClosedPromise;
        var ws = this.ws;
        if (ws && ws.close && ws.readyState === ws.OPEN) {
          isClosedPromise = new Promise(function(resolve) {
            var onclose = function onclose2(event) {
              _this3._log("disconnect() - resolving isClosedPromise ".concat(event ? "with" : "without", " close frame"), {
                event
              });
              resolve();
            };
            ws.onclose = onclose;
            setTimeout(onclose, timeout != null ? timeout : 1e3);
          });
          this._log("disconnect() - Manually closed connection by calling client.disconnect()");
          ws.close(chatCodes.WS_CLOSED_SUCCESS, "Manually closed connection by calling client.disconnect()");
        } else {
          this._log("disconnect() - ws connection doesn't exist or it is already closed.");
          isClosedPromise = Promise.resolve();
        }
        delete this.ws;
        return isClosedPromise;
      }
    )
    /**
     * _connect - Connect to the WS endpoint
     *
     * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received
     */
  }, {
    key: "_connect",
    value: function() {
      var _connect3 = _asyncToGenerator(import_regenerator.default.mark(function _callee5() {
        var isTokenReady, wsURL, response, insights;
        return import_regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(this.isConnecting || this.isDisconnected && this.client.options.enableWSFallback)) {
                  _context5.next = 2;
                  break;
                }
                return _context5.abrupt("return");
              case 2:
                this.isConnecting = true;
                this.requestID = randomId();
                this.client.insightMetrics.connectionStartTimestamp = (/* @__PURE__ */ new Date()).getTime();
                isTokenReady = false;
                _context5.prev = 6;
                this._log("_connect() - waiting for token");
                _context5.next = 10;
                return this.client.tokenManager.tokenReady();
              case 10:
                isTokenReady = true;
                _context5.next = 15;
                break;
              case 13:
                _context5.prev = 13;
                _context5.t0 = _context5["catch"](6);
              case 15:
                _context5.prev = 15;
                if (isTokenReady) {
                  _context5.next = 20;
                  break;
                }
                this._log("_connect() - tokenProvider failed before, so going to retry");
                _context5.next = 20;
                return this.client.tokenManager.loadToken();
              case 20:
                this._setupConnectionPromise();
                wsURL = this._buildUrl();
                this._log("_connect() - Connecting to ".concat(wsURL), {
                  wsURL,
                  requestID: this.requestID
                });
                this.ws = new import_isomorphic_ws.default(wsURL);
                this.ws.onopen = this.onopen.bind(this, this.wsID);
                this.ws.onclose = this.onclose.bind(this, this.wsID);
                this.ws.onerror = this.onerror.bind(this, this.wsID);
                this.ws.onmessage = this.onmessage.bind(this, this.wsID);
                _context5.next = 30;
                return this.connectionOpen;
              case 30:
                response = _context5.sent;
                this.isConnecting = false;
                if (!response) {
                  _context5.next = 36;
                  break;
                }
                this.connectionID = response.connection_id;
                if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {
                  postInsights("ws_success_after_failure", buildWsSuccessAfterFailureInsight(this));
                  this.client.insightMetrics.wsConsecutiveFailures = 0;
                }
                return _context5.abrupt("return", response);
              case 36:
                _context5.next = 44;
                break;
              case 38:
                _context5.prev = 38;
                _context5.t1 = _context5["catch"](15);
                this.isConnecting = false;
                this._log("_connect() - Error - ", _context5.t1);
                if (this.client.options.enableInsights) {
                  this.client.insightMetrics.wsConsecutiveFailures++;
                  this.client.insightMetrics.wsTotalFailures++;
                  insights = buildWsFatalInsight(this, convertErrorToJson(_context5.t1));
                  postInsights === null || postInsights === void 0 ? void 0 : postInsights("ws_fatal", insights);
                }
                throw _context5.t1;
              case 44:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[6, 13], [15, 38]]);
      }));
      function _connect() {
        return _connect3.apply(this, arguments);
      }
      return _connect;
    }()
    /**
     * _reconnect - Retry the connection to WS endpoint
     *
     * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available
     *
     * - `interval`	{int}			number of ms that function should wait before reconnecting
     * - `refreshToken` {boolean}	reload/refresh user token be refreshed before attempting reconnection.
     */
  }, {
    key: "_reconnect",
    value: function() {
      var _reconnect2 = _asyncToGenerator(import_regenerator.default.mark(function _callee6() {
        var options, interval, _args6 = arguments;
        return import_regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = _args6.length > 0 && _args6[0] !== void 0 ? _args6[0] : {};
                this._log("_reconnect() - Initiating the reconnect");
                if (!(this.isConnecting || this.isHealthy)) {
                  _context6.next = 5;
                  break;
                }
                this._log("_reconnect() - Abort (1) since already connecting or healthy");
                return _context6.abrupt("return");
              case 5:
                interval = options.interval;
                if (!interval) {
                  interval = retryInterval(this.consecutiveFailures);
                }
                _context6.next = 9;
                return sleep(interval);
              case 9:
                if (!(this.isConnecting || this.isHealthy)) {
                  _context6.next = 12;
                  break;
                }
                this._log("_reconnect() - Abort (2) since already connecting or healthy");
                return _context6.abrupt("return");
              case 12:
                if (!(this.isDisconnected && this.client.options.enableWSFallback)) {
                  _context6.next = 15;
                  break;
                }
                this._log("_reconnect() - Abort (3) since disconnect() is called");
                return _context6.abrupt("return");
              case 15:
                this._log("_reconnect() - Destroying current WS connection");
                this._destroyCurrentWSConnection();
                if (!options.refreshToken) {
                  _context6.next = 20;
                  break;
                }
                _context6.next = 20;
                return this.client.tokenManager.loadToken();
              case 20:
                _context6.prev = 20;
                _context6.next = 23;
                return this._connect();
              case 23:
                this._log("_reconnect() - Waiting for recoverCallBack");
                _context6.next = 26;
                return this.client.recoverState();
              case 26:
                this._log("_reconnect() - Finished recoverCallBack");
                this.consecutiveFailures = 0;
                _context6.next = 38;
                break;
              case 30:
                _context6.prev = 30;
                _context6.t0 = _context6["catch"](20);
                this.isHealthy = false;
                this.consecutiveFailures += 1;
                if (!(_context6.t0.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic())) {
                  _context6.next = 37;
                  break;
                }
                this._log("_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect");
                return _context6.abrupt("return", this._reconnect({
                  refreshToken: true
                }));
              case 37:
                if (_context6.t0.isWSFailure) {
                  this._log("_reconnect() - WS failure, so going to try to reconnect");
                  this._reconnect();
                }
              case 38:
                this._log("_reconnect() - == END ==");
              case 39:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[20, 30]]);
      }));
      function _reconnect() {
        return _reconnect2.apply(this, arguments);
      }
      return _reconnect;
    }()
    /**
     * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.
     *
     * @param {Event} event Event with type online or offline
     *
     */
  }, {
    key: "_destroyCurrentWSConnection",
    value: (
      /**
       * _destroyCurrentWSConnection - Removes the current WS connection
       *
       */
      function _destroyCurrentWSConnection() {
        this.wsID += 1;
        try {
          var _this$ws2, _this$ws3;
          this === null || this === void 0 ? void 0 : (_this$ws2 = this.ws) === null || _this$ws2 === void 0 ? void 0 : _this$ws2.removeAllListeners();
          this === null || this === void 0 ? void 0 : (_this$ws3 = this.ws) === null || _this$ws3 === void 0 ? void 0 : _this$ws3.close();
        } catch (e2) {
        }
      }
    )
    /**
     * _setupPromise - sets up the this.connectOpen promise
     */
  }]);
  return StableWSConnection2;
}();
var jwt = null;
var crypto$1 = null;
function ownKeys$2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$2(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function JWTUserToken(apiSecret, userId) {
  var extraData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var jwtOptions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  if (typeof userId !== "string") {
    throw new TypeError("userId should be a string");
  }
  var payload = _objectSpread$2({
    user_id: userId
  }, extraData);
  {
    throw Error("Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.");
  }
  var opts = _extends({
    algorithm: "HS256",
    noTimestamp: true
  }, jwtOptions);
}
function JWTServerToken(apiSecret) {
  var jwtOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var payload = {
    server: true
  };
  var opts = _extends({
    algorithm: "HS256",
    noTimestamp: true
  }, jwtOptions);
  return jwt.sign(payload, apiSecret, opts);
}
function UserFromToken(token) {
  var fragments = token.split(".");
  if (fragments.length !== 3) {
    return "";
  }
  var b64Payload = fragments[1];
  var payload = decodeBase64(b64Payload);
  var data = JSON.parse(payload);
  return data.user_id;
}
function DevToken(userId) {
  return [
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
    //{"alg": "HS256", "typ": "JWT"}
    encodeBase64(JSON.stringify({
      user_id: userId
    })),
    "devtoken"
    // hardcoded signature
  ].join(".");
}
function CheckSignature(body, secret, signature) {
  var key = Buffer.from(secret, "utf8");
  var hash = crypto$1.createHmac("sha256", key).update(body).digest("hex");
  try {
    return crypto$1.timingSafeEqual(Buffer.from(hash), Buffer.from(signature));
  } catch (_unused) {
    return false;
  }
}
var TokenManager = (
  /**
   * Constructor
   *
   * @param {Secret} secret
   */
  function TokenManager2(secret) {
    var _this = this;
    _classCallCheck(this, TokenManager2);
    _defineProperty(this, "loadTokenPromise", void 0);
    _defineProperty(this, "type", void 0);
    _defineProperty(this, "secret", void 0);
    _defineProperty(this, "token", void 0);
    _defineProperty(this, "tokenProvider", void 0);
    _defineProperty(this, "user", void 0);
    _defineProperty(this, "setTokenOrProvider", function() {
      var _ref = _asyncToGenerator(import_regenerator.default.mark(function _callee(tokenOrProvider, user) {
        return import_regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this.validateToken(tokenOrProvider, user);
                _this.user = user;
                if (isFunction2(tokenOrProvider)) {
                  _this.tokenProvider = tokenOrProvider;
                  _this.type = "provider";
                }
                if (typeof tokenOrProvider === "string") {
                  _this.token = tokenOrProvider;
                  _this.type = "static";
                }
                if (!tokenOrProvider && _this.user && _this.secret) {
                  _this.token = JWTUserToken(_this.secret, user.id, {}, {});
                  _this.type = "static";
                }
                _context.next = 7;
                return _this.loadToken();
              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return function(_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());
    _defineProperty(this, "reset", function() {
      _this.token = void 0;
      _this.user = void 0;
      _this.loadTokenPromise = null;
    });
    _defineProperty(this, "validateToken", function(tokenOrProvider, user) {
      if (user && user.anon && !tokenOrProvider)
        return;
      if (!_this.secret && !tokenOrProvider) {
        throw new Error("User token can not be empty");
      }
      if (tokenOrProvider && typeof tokenOrProvider !== "string" && !isFunction2(tokenOrProvider)) {
        throw new Error("user token should either be a string or a function");
      }
      if (typeof tokenOrProvider === "string") {
        if (user.anon && tokenOrProvider === "")
          return;
        var tokenUserId = UserFromToken(tokenOrProvider);
        if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === "" || tokenUserId !== user.id)) {
          throw new Error("userToken does not have a user_id or is not matching with user.id");
        }
      }
    });
    _defineProperty(this, "tokenReady", function() {
      return _this.loadTokenPromise;
    });
    _defineProperty(this, "loadToken", function() {
      _this.loadTokenPromise = new Promise(function() {
        var _ref2 = _asyncToGenerator(import_regenerator.default.mark(function _callee2(resolve, reject) {
          return import_regenerator.default.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(_this.type === "static")) {
                    _context2.next = 2;
                    break;
                  }
                  return _context2.abrupt("return", resolve(_this.token));
                case 2:
                  if (!(_this.tokenProvider && typeof _this.tokenProvider !== "string")) {
                    _context2.next = 13;
                    break;
                  }
                  _context2.prev = 3;
                  _context2.next = 6;
                  return _this.tokenProvider();
                case 6:
                  _this.token = _context2.sent;
                  _context2.next = 12;
                  break;
                case 9:
                  _context2.prev = 9;
                  _context2.t0 = _context2["catch"](3);
                  return _context2.abrupt("return", reject(new Error("Call to tokenProvider failed with message: ".concat(_context2.t0))));
                case 12:
                  resolve(_this.token);
                case 13:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, null, [[3, 9]]);
        }));
        return function(_x3, _x4) {
          return _ref2.apply(this, arguments);
        };
      }());
      return _this.loadTokenPromise;
    });
    _defineProperty(this, "getToken", function() {
      if (_this.token) {
        return _this.token;
      }
      if (_this.user && _this.user.anon && !_this.token) {
        return _this.token;
      }
      if (_this.secret) {
        return JWTServerToken(_this.secret);
      }
      throw new Error("Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called");
    });
    _defineProperty(this, "isStatic", function() {
      return _this.type === "static";
    });
    this.loadTokenPromise = null;
    if (secret) {
      this.secret = secret;
    }
    this.type = "static";
    if (this.secret) {
      this.token = JWTServerToken(this.secret);
    }
  }
);
var APIErrorCodes = {
  "-1": {
    name: "InternalSystemError",
    retryable: true
  },
  "2": {
    name: "AccessKeyError",
    retryable: false
  },
  "3": {
    name: "AuthenticationFailedError",
    retryable: true
  },
  "4": {
    name: "InputError",
    retryable: false
  },
  "6": {
    name: "DuplicateUsernameError",
    retryable: false
  },
  "9": {
    name: "RateLimitError",
    retryable: true
  },
  "16": {
    name: "DoesNotExistError",
    retryable: false
  },
  "17": {
    name: "NotAllowedError",
    retryable: false
  },
  "18": {
    name: "EventNotSupportedError",
    retryable: false
  },
  "19": {
    name: "ChannelFeatureNotSupportedError",
    retryable: false
  },
  "20": {
    name: "MessageTooLongError",
    retryable: false
  },
  "21": {
    name: "MultipleNestingLevelError",
    retryable: false
  },
  "22": {
    name: "PayloadTooBigError",
    retryable: false
  },
  "23": {
    name: "RequestTimeoutError",
    retryable: true
  },
  "24": {
    name: "MaxHeaderSizeExceededError",
    retryable: false
  },
  "40": {
    name: "AuthErrorTokenExpired",
    retryable: false
  },
  "41": {
    name: "AuthErrorTokenNotValidYet",
    retryable: false
  },
  "42": {
    name: "AuthErrorTokenUsedBeforeIssuedAt",
    retryable: false
  },
  "43": {
    name: "AuthErrorTokenSignatureInvalid",
    retryable: false
  },
  "44": {
    name: "CustomCommandEndpointMissingError",
    retryable: false
  },
  "45": {
    name: "CustomCommandEndpointCallError",
    retryable: true
  },
  "46": {
    name: "ConnectionIDNotFoundError",
    retryable: false
  },
  "60": {
    name: "CoolDownError",
    retryable: true
  },
  "69": {
    name: "ErrWrongRegion",
    retryable: false
  },
  "70": {
    name: "ErrQueryChannelPermissions",
    retryable: false
  },
  "71": {
    name: "ErrTooManyConnections",
    retryable: true
  },
  "99": {
    name: "AppSuspendedError",
    retryable: false
  }
};
function isAPIError(error) {
  return error.code !== void 0;
}
function isErrorRetryable(error) {
  if (!error.code)
    return false;
  var err = APIErrorCodes["".concat(error.code)];
  if (!err)
    return false;
  return err.retryable;
}
function isConnectionIDError(error) {
  return error.code === 46;
}
function isWSFailure(err) {
  if (typeof err.isWSFailure === "boolean") {
    return err.isWSFailure;
  }
  try {
    return JSON.parse(err.message).isWSFailure;
  } catch (_) {
    return false;
  }
}
function isErrorResponse(res) {
  return !res.status || res.status < 200 || 300 <= res.status;
}
function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var ConnectionState;
(function(ConnectionState2) {
  ConnectionState2["Closed"] = "CLOSED";
  ConnectionState2["Connected"] = "CONNECTED";
  ConnectionState2["Connecting"] = "CONNECTING";
  ConnectionState2["Disconnected"] = "DISCONNECTED";
  ConnectionState2["Init"] = "INIT";
})(ConnectionState || (ConnectionState = {}));
var WSConnectionFallback = function() {
  function WSConnectionFallback2(_ref) {
    var _this = this;
    var client = _ref.client;
    _classCallCheck(this, WSConnectionFallback2);
    _defineProperty(this, "client", void 0);
    _defineProperty(this, "state", void 0);
    _defineProperty(this, "consecutiveFailures", void 0);
    _defineProperty(this, "connectionID", void 0);
    _defineProperty(this, "cancelToken", void 0);
    _defineProperty(this, "_onlineStatusChanged", function(event) {
      _this._log("_onlineStatusChanged() - ".concat(event.type));
      if (event.type === "offline") {
        var _this$cancelToken;
        _this._setState(ConnectionState.Closed);
        (_this$cancelToken = _this.cancelToken) === null || _this$cancelToken === void 0 ? void 0 : _this$cancelToken.cancel("disconnect() is called");
        _this.cancelToken = void 0;
        return;
      }
      if (event.type === "online" && _this.state === ConnectionState.Closed) {
        _this.connect(true);
      }
    });
    _defineProperty(this, "_req", function() {
      var _ref2 = _asyncToGenerator(import_regenerator.default.mark(function _callee(params, config, retry) {
        var _this$cancelToken2, res;
        return import_regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_this.cancelToken && !params.close) {
                  _this.cancelToken = axios_default.CancelToken.source();
                }
                _context.prev = 1;
                _context.next = 4;
                return _this.client.doAxiosRequest(
                  "get",
                  _this.client.baseURL.replace(":3030", ":8900") + "/longpoll",
                  // replace port if present for testing with local API
                  void 0,
                  {
                    config: _objectSpread$1(_objectSpread$1({}, config), {}, {
                      cancelToken: (_this$cancelToken2 = _this.cancelToken) === null || _this$cancelToken2 === void 0 ? void 0 : _this$cancelToken2.token
                    }),
                    params
                  }
                );
              case 4:
                res = _context.sent;
                _this.consecutiveFailures = 0;
                return _context.abrupt("return", res);
              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](1);
                _this.consecutiveFailures += 1;
                if (!(retry && isErrorRetryable(_context.t0))) {
                  _context.next = 17;
                  break;
                }
                _this._log("_req() - Retryable error, retrying request");
                _context.next = 16;
                return sleep(retryInterval(_this.consecutiveFailures));
              case 16:
                return _context.abrupt("return", _this._req(params, config, retry));
              case 17:
                throw _context.t0;
              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[1, 9]]);
      }));
      return function(_x, _x2, _x3) {
        return _ref2.apply(this, arguments);
      };
    }());
    _defineProperty(this, "_poll", _asyncToGenerator(import_regenerator.default.mark(function _callee2() {
      var _data$events, data, i;
      return import_regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(_this.state === ConnectionState.Connected)) {
                _context2.next = 25;
                break;
              }
              _context2.prev = 1;
              _context2.next = 4;
              return _this._req({}, {
                timeout: 3e4
              }, true);
            case 4:
              data = _context2.sent;
              if ((_data$events = data.events) !== null && _data$events !== void 0 && _data$events.length) {
                for (i = 0; i < data.events.length; i++) {
                  _this.client.dispatchEvent(data.events[i]);
                }
              }
              _context2.next = 23;
              break;
            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](1);
              if (!axios_default.isCancel(_context2.t0)) {
                _context2.next = 13;
                break;
              }
              _this._log("_poll() - axios canceled request");
              return _context2.abrupt("return");
            case 13:
              if (!isConnectionIDError(_context2.t0)) {
                _context2.next = 18;
                break;
              }
              _this._log("_poll() - ConnectionID error, connecting without ID...");
              _this._setState(ConnectionState.Disconnected);
              _this.connect(true);
              return _context2.abrupt("return");
            case 18:
              if (!(isAPIError(_context2.t0) && !isErrorRetryable(_context2.t0))) {
                _context2.next = 21;
                break;
              }
              _this._setState(ConnectionState.Closed);
              return _context2.abrupt("return");
            case 21:
              _context2.next = 23;
              return sleep(retryInterval(_this.consecutiveFailures));
            case 23:
              _context2.next = 0;
              break;
            case 25:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[1, 8]]);
    })));
    _defineProperty(this, "connect", _asyncToGenerator(import_regenerator.default.mark(function _callee3() {
      var reconnect, _yield$_this$_req, event, _args3 = arguments;
      return import_regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              reconnect = _args3.length > 0 && _args3[0] !== void 0 ? _args3[0] : false;
              if (!(_this.state === ConnectionState.Connecting)) {
                _context3.next = 4;
                break;
              }
              _this._log("connect() - connecting already in progress", {
                reconnect
              }, "warn");
              return _context3.abrupt("return");
            case 4:
              if (!(_this.state === ConnectionState.Connected)) {
                _context3.next = 7;
                break;
              }
              _this._log("connect() - already connected and polling", {
                reconnect
              }, "warn");
              return _context3.abrupt("return");
            case 7:
              _this._setState(ConnectionState.Connecting);
              _this.connectionID = void 0;
              _context3.prev = 9;
              _context3.next = 12;
              return _this._req(
                {
                  json: _this.client._buildWSPayload()
                },
                {
                  timeout: 8e3
                },
                // 8s
                reconnect
              );
            case 12:
              _yield$_this$_req = _context3.sent;
              event = _yield$_this$_req.event;
              _this._setState(ConnectionState.Connected);
              _this.connectionID = event.connection_id;
              _this.client.dispatchEvent(event);
              _this._poll();
              if (reconnect) {
                _this.client.recoverState();
              }
              return _context3.abrupt("return", event);
            case 22:
              _context3.prev = 22;
              _context3.t0 = _context3["catch"](9);
              _this._setState(ConnectionState.Closed);
              throw _context3.t0;
            case 26:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[9, 22]]);
    })));
    _defineProperty(this, "isHealthy", function() {
      return !!_this.connectionID && _this.state === ConnectionState.Connected;
    });
    _defineProperty(this, "disconnect", _asyncToGenerator(import_regenerator.default.mark(function _callee4() {
      var _this$cancelToken3;
      var timeout, connection_id, _args4 = arguments;
      return import_regenerator.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              timeout = _args4.length > 0 && _args4[0] !== void 0 ? _args4[0] : 2e3;
              removeConnectionEventListeners(_this._onlineStatusChanged);
              _this._setState(ConnectionState.Disconnected);
              (_this$cancelToken3 = _this.cancelToken) === null || _this$cancelToken3 === void 0 ? void 0 : _this$cancelToken3.cancel("disconnect() is called");
              _this.cancelToken = void 0;
              connection_id = _this.connectionID;
              _this.connectionID = void 0;
              _context4.prev = 7;
              _context4.next = 10;
              return _this._req({
                close: true,
                connection_id
              }, {
                timeout
              }, false);
            case 10:
              _this._log("disconnect() - Closed connectionID");
              _context4.next = 16;
              break;
            case 13:
              _context4.prev = 13;
              _context4.t0 = _context4["catch"](7);
              _this._log("disconnect() - Failed", {
                err: _context4.t0
              }, "error");
            case 16:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[7, 13]]);
    })));
    this.client = client;
    this.state = ConnectionState.Init;
    this.consecutiveFailures = 0;
    addConnectionEventListeners(this._onlineStatusChanged);
  }
  _createClass(WSConnectionFallback2, [{
    key: "_log",
    value: function _log(msg) {
      var extra = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "info";
      this.client.logger(level, "WSConnectionFallback:" + msg, _objectSpread$1({
        tags: ["connection_fallback", "connection"]
      }, extra));
    }
  }, {
    key: "_setState",
    value: function _setState(state) {
      this._log("_setState() - ".concat(state));
      if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {
        this.client.dispatchEvent({
          type: "connection.changed",
          online: true
        });
      }
      if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {
        this.client.dispatchEvent({
          type: "connection.changed",
          online: false
        });
      }
      this.state = state;
    }
    /** @private */
  }]);
  return WSConnectionFallback2;
}();
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var ErrorFromResponse = function(_Error) {
  _inherits(ErrorFromResponse2, _Error);
  var _super = _createSuper(ErrorFromResponse2);
  function ErrorFromResponse2() {
    var _this;
    _classCallCheck(this, ErrorFromResponse2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "code", void 0);
    _defineProperty(_assertThisInitialized(_this), "response", void 0);
    _defineProperty(_assertThisInitialized(_this), "status", void 0);
    return _this;
  }
  return ErrorFromResponse2;
}(_wrapNativeSuper(Error));
var _excluded = ["created_at", "updated_at", "last_active", "online"];
var _excluded2 = ["params", "headers"];
function _createForOfIteratorHelper(o2, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (!it) {
    if (Array.isArray(o2) || (it = _unsupportedIterableToArray2(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
      if (it)
        o2 = it;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o2.length)
          return { done: true };
        return { done: false, value: o2[i++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it = it.call(o2);
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray2(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray2(o2, minLen);
  var n = Object.prototype.toString.call(o2).slice(8, -1);
  if (n === "Object" && o2.constructor)
    n = o2.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o2);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o2, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function isString2(x) {
  return typeof x === "string" || x instanceof String;
}
var StreamChat = function() {
  function StreamChat2(_key, secretOrOptions, _options) {
    var _this = this, _this$options;
    _classCallCheck(this, StreamChat2);
    _defineProperty(this, "_user", void 0);
    _defineProperty(this, "activeChannels", void 0);
    _defineProperty(this, "anonymous", void 0);
    _defineProperty(this, "persistUserOnConnectionFailure", void 0);
    _defineProperty(this, "axiosInstance", void 0);
    _defineProperty(this, "baseURL", void 0);
    _defineProperty(this, "browser", void 0);
    _defineProperty(this, "cleaningIntervalRef", void 0);
    _defineProperty(this, "clientID", void 0);
    _defineProperty(this, "configs", void 0);
    _defineProperty(this, "key", void 0);
    _defineProperty(this, "listeners", void 0);
    _defineProperty(this, "logger", void 0);
    _defineProperty(this, "recoverStateOnReconnect", void 0);
    _defineProperty(this, "mutedChannels", void 0);
    _defineProperty(this, "mutedUsers", void 0);
    _defineProperty(this, "node", void 0);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "secret", void 0);
    _defineProperty(this, "setUserPromise", void 0);
    _defineProperty(this, "state", void 0);
    _defineProperty(this, "tokenManager", void 0);
    _defineProperty(this, "user", void 0);
    _defineProperty(this, "userAgent", void 0);
    _defineProperty(this, "userID", void 0);
    _defineProperty(this, "wsBaseURL", void 0);
    _defineProperty(this, "wsConnection", void 0);
    _defineProperty(this, "wsFallback", void 0);
    _defineProperty(this, "wsPromise", void 0);
    _defineProperty(this, "consecutiveFailures", void 0);
    _defineProperty(this, "insightMetrics", void 0);
    _defineProperty(this, "defaultWSTimeoutWithFallback", void 0);
    _defineProperty(this, "defaultWSTimeout", void 0);
    _defineProperty(this, "nextRequestAbortController", null);
    _defineProperty(this, "_getConnectionID", function() {
      var _this$wsConnection, _this$wsFallback;
      return ((_this$wsConnection = _this.wsConnection) === null || _this$wsConnection === void 0 ? void 0 : _this$wsConnection.connectionID) || ((_this$wsFallback = _this.wsFallback) === null || _this$wsFallback === void 0 ? void 0 : _this$wsFallback.connectionID);
    });
    _defineProperty(this, "_hasConnectionID", function() {
      return Boolean(_this._getConnectionID());
    });
    _defineProperty(this, "connectUser", function() {
      var _ref = _asyncToGenerator(import_regenerator.default.mark(function _callee(user, userTokenOrProvider) {
        var setTokenPromise, wsPromise;
        return import_regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (user.id) {
                  _context.next = 2;
                  break;
                }
                throw new Error('The "id" field on the user is missing');
              case 2:
                if (!(_this.userID === user.id && _this.setUserPromise)) {
                  _context.next = 5;
                  break;
                }
                console.warn("Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.");
                return _context.abrupt("return", _this.setUserPromise);
              case 5:
                if (!_this.userID) {
                  _context.next = 7;
                  break;
                }
                throw new Error("Use client.disconnect() before trying to connect as a different user. connectUser was called twice.");
              case 7:
                if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {
                  console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add "allowServerSideConnect: true" to the client options to disable this warning.');
                }
                _this.userID = user.id;
                _this.anonymous = false;
                setTokenPromise = _this._setToken(user, userTokenOrProvider);
                _this._setUser(user);
                wsPromise = _this.openConnection();
                _this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(
                  function(result) {
                    return result[1];
                  }
                  // We only return connection promise;
                );
                _context.prev = 14;
                _context.next = 17;
                return _this.setUserPromise;
              case 17:
                return _context.abrupt("return", _context.sent);
              case 20:
                _context.prev = 20;
                _context.t0 = _context["catch"](14);
                if (_this.persistUserOnConnectionFailure) {
                  _this.closeConnection();
                } else {
                  _this.disconnectUser();
                }
                throw _context.t0;
              case 24:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[14, 20]]);
      }));
      return function(_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());
    _defineProperty(this, "setUser", this.connectUser);
    _defineProperty(this, "_setToken", function(user, userTokenOrProvider) {
      return _this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);
    });
    _defineProperty(this, "closeConnection", function() {
      var _ref2 = _asyncToGenerator(import_regenerator.default.mark(function _callee2(timeout) {
        var _this$wsConnection2, _this$wsFallback2;
        return import_regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (_this.cleaningIntervalRef != null) {
                  clearInterval(_this.cleaningIntervalRef);
                  _this.cleaningIntervalRef = void 0;
                }
                _context2.next = 3;
                return Promise.all([(_this$wsConnection2 = _this.wsConnection) === null || _this$wsConnection2 === void 0 ? void 0 : _this$wsConnection2.disconnect(timeout), (_this$wsFallback2 = _this.wsFallback) === null || _this$wsFallback2 === void 0 ? void 0 : _this$wsFallback2.disconnect(timeout)]);
              case 3:
                return _context2.abrupt("return", Promise.resolve());
              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      return function(_x3) {
        return _ref2.apply(this, arguments);
      };
    }());
    _defineProperty(this, "openConnection", _asyncToGenerator(import_regenerator.default.mark(function _callee3() {
      var _this$wsConnection3, _this$wsConnection4, _this$wsFallback3;
      return import_regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (_this.userID) {
                _context3.next = 2;
                break;
              }
              throw Error("User is not set on client, use client.connectUser or client.connectAnonymousUser instead");
            case 2:
              if (!((_this$wsConnection3 = _this.wsConnection) !== null && _this$wsConnection3 !== void 0 && _this$wsConnection3.isConnecting && _this.wsPromise)) {
                _context3.next = 5;
                break;
              }
              _this.logger("info", "client:openConnection() - connection already in progress", {
                tags: ["connection", "client"]
              });
              return _context3.abrupt("return", _this.wsPromise);
            case 5:
              if (!(((_this$wsConnection4 = _this.wsConnection) !== null && _this$wsConnection4 !== void 0 && _this$wsConnection4.isHealthy || (_this$wsFallback3 = _this.wsFallback) !== null && _this$wsFallback3 !== void 0 && _this$wsFallback3.isHealthy()) && _this._hasConnectionID())) {
                _context3.next = 8;
                break;
              }
              _this.logger("info", "client:openConnection() - openConnection called twice, healthy connection already exists", {
                tags: ["connection", "client"]
              });
              return _context3.abrupt("return", Promise.resolve());
            case 8:
              _this.clientID = "".concat(_this.userID, "--").concat(randomId());
              _this.wsPromise = _this.connect();
              _this._startCleaning();
              return _context3.abrupt("return", _this.wsPromise);
            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    _defineProperty(this, "_setupConnection", this.openConnection);
    _defineProperty(this, "_normalizeDate", function(before) {
      if (before instanceof Date) {
        before = before.toISOString();
      }
      if (before === "") {
        throw new Error("Don't pass blank string for since, use null instead if resetting the token revoke");
      }
      return before;
    });
    _defineProperty(this, "disconnectUser", function() {
      var _ref4 = _asyncToGenerator(import_regenerator.default.mark(function _callee4(timeout) {
        var closePromise, _i, _Object$values, _channel;
        return import_regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _this.logger("info", "client:disconnect() - Disconnecting the client", {
                  tags: ["connection", "client"]
                });
                delete _this.user;
                delete _this._user;
                delete _this.userID;
                _this.anonymous = false;
                closePromise = _this.closeConnection(timeout);
                for (_i = 0, _Object$values = Object.values(_this.activeChannels); _i < _Object$values.length; _i++) {
                  _channel = _Object$values[_i];
                  _channel._disconnect();
                }
                _this.activeChannels = {};
                _this.state = new ClientState();
                setTimeout(_this.tokenManager.reset);
                return _context4.abrupt("return", closePromise);
              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      return function(_x4) {
        return _ref4.apply(this, arguments);
      };
    }());
    _defineProperty(this, "disconnect", this.disconnectUser);
    _defineProperty(this, "connectAnonymousUser", function() {
      if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {
        console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add "allowServerSideConnect: true" to the client options to disable this warning.');
      }
      _this.anonymous = true;
      _this.userID = randomId();
      var anonymousUser = {
        id: _this.userID,
        anon: true
      };
      _this._setToken(anonymousUser, "");
      _this._setUser(anonymousUser);
      return _this._setupConnection();
    });
    _defineProperty(this, "setAnonymousUser", this.connectAnonymousUser);
    _defineProperty(this, "doAxiosRequest", function() {
      var _ref5 = _asyncToGenerator(import_regenerator.default.mark(function _callee5(type, url, data) {
        var options, requestConfig, response, _requestConfig$header, _args5 = arguments;
        return import_regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = _args5.length > 3 && _args5[3] !== void 0 ? _args5[3] : {};
                _context5.next = 3;
                return _this.tokenManager.tokenReady();
              case 3:
                requestConfig = _this._enrichAxiosOptions(options);
                _context5.prev = 4;
                _this._logApiRequest(type, url, data, requestConfig);
                _context5.t0 = type;
                _context5.next = _context5.t0 === "get" ? 9 : _context5.t0 === "delete" ? 13 : _context5.t0 === "post" ? 17 : _context5.t0 === "postForm" ? 21 : _context5.t0 === "put" ? 25 : _context5.t0 === "patch" ? 29 : _context5.t0 === "options" ? 33 : 37;
                break;
              case 9:
                _context5.next = 11;
                return _this.axiosInstance.get(url, requestConfig);
              case 11:
                response = _context5.sent;
                return _context5.abrupt("break", 38);
              case 13:
                _context5.next = 15;
                return _this.axiosInstance.delete(url, requestConfig);
              case 15:
                response = _context5.sent;
                return _context5.abrupt("break", 38);
              case 17:
                _context5.next = 19;
                return _this.axiosInstance.post(url, data, requestConfig);
              case 19:
                response = _context5.sent;
                return _context5.abrupt("break", 38);
              case 21:
                _context5.next = 23;
                return _this.axiosInstance.postForm(url, data, requestConfig);
              case 23:
                response = _context5.sent;
                return _context5.abrupt("break", 38);
              case 25:
                _context5.next = 27;
                return _this.axiosInstance.put(url, data, requestConfig);
              case 27:
                response = _context5.sent;
                return _context5.abrupt("break", 38);
              case 29:
                _context5.next = 31;
                return _this.axiosInstance.patch(url, data, requestConfig);
              case 31:
                response = _context5.sent;
                return _context5.abrupt("break", 38);
              case 33:
                _context5.next = 35;
                return _this.axiosInstance.options(url, requestConfig);
              case 35:
                response = _context5.sent;
                return _context5.abrupt("break", 38);
              case 37:
                throw new Error("Invalid request type");
              case 38:
                _this._logApiResponse(type, url, response);
                _this.consecutiveFailures = 0;
                return _context5.abrupt("return", _this.handleResponse(response));
              case 43:
                _context5.prev = 43;
                _context5.t1 = _context5["catch"](4);
                _context5.t1.client_request_id = (_requestConfig$header = requestConfig.headers) === null || _requestConfig$header === void 0 ? void 0 : _requestConfig$header["x-client-request-id"];
                _this._logApiError(type, url, _context5.t1);
                _this.consecutiveFailures += 1;
                if (!_context5.t1.response) {
                  _context5.next = 60;
                  break;
                }
                if (!(_context5.t1.response.data.code === chatCodes.TOKEN_EXPIRED && !_this.tokenManager.isStatic())) {
                  _context5.next = 57;
                  break;
                }
                if (!(_this.consecutiveFailures > 1)) {
                  _context5.next = 53;
                  break;
                }
                _context5.next = 53;
                return sleep(retryInterval(_this.consecutiveFailures));
              case 53:
                _this.tokenManager.loadToken();
                _context5.next = 56;
                return _this.doAxiosRequest(type, url, data, options);
              case 56:
                return _context5.abrupt("return", _context5.sent);
              case 57:
                return _context5.abrupt("return", _this.handleResponse(_context5.t1.response));
              case 60:
                throw _context5.t1;
              case 61:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[4, 43]]);
      }));
      return function(_x5, _x6, _x7) {
        return _ref5.apply(this, arguments);
      };
    }());
    _defineProperty(this, "dispatchEvent", function(event) {
      if (!event.received_at)
        event.received_at = /* @__PURE__ */ new Date();
      var postListenerCallbacks = _this._handleClientEvent(event);
      var cid = event.cid;
      var channel = cid ? _this.activeChannels[cid] : void 0;
      if (channel) {
        channel._handleChannelEvent(event);
      }
      _this._callClientListeners(event);
      if (channel) {
        channel._callChannelListeners(event);
      }
      postListenerCallbacks.forEach(function(c) {
        return c();
      });
    });
    _defineProperty(this, "handleEvent", function(messageEvent) {
      var jsonString = messageEvent.data;
      var event = JSON.parse(jsonString);
      _this.dispatchEvent(event);
    });
    _defineProperty(this, "_updateMemberWatcherReferences", function(user) {
      var refMap = _this.state.userChannelReferences[user.id] || {};
      for (var _channelID in refMap) {
        var _channel2 = _this.activeChannels[_channelID];
        if (_channel2 !== null && _channel2 !== void 0 && _channel2.state) {
          if (_channel2.state.members[user.id]) {
            _channel2.state.members[user.id].user = user;
          }
          if (_channel2.state.watchers[user.id]) {
            _channel2.state.watchers[user.id] = user;
          }
          if (_channel2.state.read[user.id]) {
            _channel2.state.read[user.id].user = user;
          }
        }
      }
    });
    _defineProperty(this, "_updateUserReferences", this._updateMemberWatcherReferences);
    _defineProperty(this, "_updateUserMessageReferences", function(user) {
      var refMap = _this.state.userChannelReferences[user.id] || {};
      for (var _channelID2 in refMap) {
        var _channel3 = _this.activeChannels[_channelID2];
        var state = _channel3.state;
        state === null || state === void 0 ? void 0 : state.updateUserMessages(user);
      }
    });
    _defineProperty(this, "_deleteUserMessageReference", function(user) {
      var hardDelete = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var refMap = _this.state.userChannelReferences[user.id] || {};
      for (var _channelID3 in refMap) {
        var _channel4 = _this.activeChannels[_channelID3];
        var state = _channel4.state;
        state === null || state === void 0 ? void 0 : state.deleteUserMessages(user, hardDelete);
      }
    });
    _defineProperty(this, "_handleUserEvent", function(event) {
      if (!event.user) {
        return;
      }
      if (event.type === "user.presence.changed" || event.type === "user.updated") {
        if (event.user.id === _this.userID) {
          var user = _objectSpread({}, _this.user || {});
          var _user = _objectSpread({}, _this._user || {});
          for (var _key2 in _this.user) {
            if (_key2 in event.user || isOwnUserBaseProperty(_key2)) {
              continue;
            }
            delete user[_key2];
            delete _user[_key2];
          }
          for (var _key3 in event.user) {
            if (_user && _key3 in _user) {
              _user[_key3] = event.user[_key3];
            }
          }
          _this._user = _objectSpread({}, _user);
          _this.user = _objectSpread(_objectSpread({}, user), event.user);
        }
        _this.state.updateUser(event.user);
        _this._updateMemberWatcherReferences(event.user);
      }
      if (event.type === "user.updated") {
        _this._updateUserMessageReferences(event.user);
      }
      if (event.type === "user.deleted" && event.user.deleted_at && (event.mark_messages_deleted || event.hard_delete)) {
        _this._deleteUserMessageReference(event.user, event.hard_delete);
      }
    });
    _defineProperty(this, "_callClientListeners", function(event) {
      var client = _this;
      var listeners = [];
      if (client.listeners.all) {
        listeners.push.apply(listeners, _toConsumableArray(client.listeners.all));
      }
      if (client.listeners[event.type]) {
        listeners.push.apply(listeners, _toConsumableArray(client.listeners[event.type]));
      }
      for (var _i2 = 0, _listeners = listeners; _i2 < _listeners.length; _i2++) {
        var listener = _listeners[_i2];
        listener(event);
      }
    });
    _defineProperty(this, "recoverState", _asyncToGenerator(import_regenerator.default.mark(function _callee6() {
      var cids;
      return import_regenerator.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _this.logger("info", "client:recoverState() - Start of recoverState with connectionID ".concat(_this._getConnectionID()), {
                tags: ["connection"]
              });
              cids = Object.keys(_this.activeChannels);
              if (!(cids.length && _this.recoverStateOnReconnect)) {
                _context6.next = 10;
                break;
              }
              _this.logger("info", "client:recoverState() - Start the querying of ".concat(cids.length, " channels"), {
                tags: ["connection", "client"]
              });
              _context6.next = 6;
              return _this.queryChannels({
                cid: {
                  $in: cids
                }
              }, {
                last_message_at: -1
              }, {
                limit: 30
              });
            case 6:
              _this.logger("info", "client:recoverState() - Querying channels finished", {
                tags: ["connection", "client"]
              });
              _this.dispatchEvent({
                type: "connection.recovered"
              });
              _context6.next = 11;
              break;
            case 10:
              _this.dispatchEvent({
                type: "connection.recovered"
              });
            case 11:
              _this.wsPromise = Promise.resolve();
              _this.setUserPromise = Promise.resolve();
            case 13:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
    _defineProperty(this, "getChannelByMembers", function(channelType, custom) {
      var membersStr = _toConsumableArray(custom.members || []).sort().join(",");
      var tempCid = "".concat(channelType, ":!members-").concat(membersStr);
      if (!membersStr) {
        throw Error("Please specify atleast one member when creating unique conversation");
      }
      for (var _key4 in _this.activeChannels) {
        var _channel5 = _this.activeChannels[_key4];
        if (_channel5.disconnected) {
          continue;
        }
        if (_key4 === tempCid) {
          return _channel5;
        }
        if (_key4.indexOf("".concat(channelType, ":!members-")) === 0) {
          var membersStrInExistingChannel = Object.keys(_channel5.state.members).sort().join(",");
          if (membersStrInExistingChannel === membersStr) {
            return _channel5;
          }
        }
      }
      var channel = new Channel(_this, channelType, void 0, custom);
      _this.activeChannels[tempCid] = channel;
      return channel;
    });
    _defineProperty(this, "getChannelById", function(channelType, channelID, custom) {
      if (typeof channelID === "string" && ~channelID.indexOf(":")) {
        throw Error("Invalid channel id ".concat(channelID, ", can't contain the : character"));
      }
      var cid = "".concat(channelType, ":").concat(channelID);
      if (cid in _this.activeChannels && !_this.activeChannels[cid].disconnected) {
        var _channel6 = _this.activeChannels[cid];
        if (Object.keys(custom).length > 0) {
          _channel6.data = custom;
          _channel6._data = custom;
        }
        return _channel6;
      }
      var channel = new Channel(_this, channelType, channelID, custom);
      _this.activeChannels[channel.cid] = channel;
      return channel;
    });
    _defineProperty(this, "updateUsers", this.upsertUsers);
    _defineProperty(this, "updateUser", this.upsertUser);
    _defineProperty(this, "_unblockMessage", this.unblockMessage);
    _defineProperty(this, "markAllRead", this.markChannelsRead);
    _defineProperty(this, "_isUsingServerAuth", function() {
      return !!_this.secret;
    });
    _defineProperty(this, "_buildWSPayload", function(client_request_id) {
      return JSON.stringify({
        user_id: _this.userID,
        user_details: _this._user,
        device: _this.options.device,
        client_request_id
      });
    });
    this.key = _key;
    this.listeners = {};
    this.state = new ClientState();
    this.mutedChannels = [];
    this.mutedUsers = [];
    if (secretOrOptions && isString2(secretOrOptions)) {
      this.secret = secretOrOptions;
    }
    var inputOptions = _options ? _options : secretOrOptions && !isString2(secretOrOptions) ? secretOrOptions : {};
    this.browser = typeof inputOptions.browser !== "undefined" ? inputOptions.browser : typeof window !== "undefined";
    this.node = !this.browser;
    this.options = _objectSpread({
      timeout: 3e3,
      withCredentials: false,
      // making sure cookies are not sent
      warmUp: false,
      recoverStateOnReconnect: true
    }, inputOptions);
    if (this.node && !this.options.httpsAgent) {
      this.options.httpsAgent = new https.Agent({
        keepAlive: true,
        keepAliveMsecs: 3e3
      });
    }
    this.axiosInstance = axios_default.create(this.options);
    this.setBaseURL(this.options.baseURL || "https://chat.stream-io-api.com");
    if (typeof process !== "undefined" && process.env.STREAM_LOCAL_TEST_RUN) {
      this.setBaseURL("http://localhost:3030");
    }
    if (typeof process !== "undefined" && process.env.STREAM_LOCAL_TEST_HOST) {
      this.setBaseURL("http://" + process.env.STREAM_LOCAL_TEST_HOST);
    }
    this.wsConnection = null;
    this.wsPromise = null;
    this.setUserPromise = null;
    this.activeChannels = {};
    this.configs = {};
    this.anonymous = false;
    this.persistUserOnConnectionFailure = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.persistUserOnConnectionFailure;
    this.tokenManager = new TokenManager(this.secret);
    this.consecutiveFailures = 0;
    this.insightMetrics = new InsightMetrics();
    this.defaultWSTimeoutWithFallback = 6e3;
    this.defaultWSTimeout = 15e3;
    this.axiosInstance.defaults.paramsSerializer = axiosParamsSerializer;
    this.logger = isFunction2(inputOptions.logger) ? inputOptions.logger : function() {
      return null;
    };
    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;
  }
  _createClass(StreamChat2, [{
    key: "devToken",
    value: function devToken(userID) {
      return DevToken(userID);
    }
  }, {
    key: "getAuthType",
    value: function getAuthType() {
      return this.anonymous ? "anonymous" : "jwt";
    }
  }, {
    key: "setBaseURL",
    value: function setBaseURL(baseURL) {
      this.baseURL = baseURL;
      this.wsBaseURL = this.baseURL.replace("http", "ws").replace(":3030", ":8800");
    }
  }, {
    key: "_setUser",
    value: function _setUser(user) {
      this.user = user;
      this.userID = user.id;
      this._user = _objectSpread({}, user);
    }
    /**
     * Disconnects the websocket connection, without removing the user set on client.
     * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need
     * to call client.openConnection to reconnect to websocket.
     *
     * This is mainly useful on mobile side. You can only receive push notifications
     * if you don't have active websocket connection.
     * So when your app goes to background, you can call `client.closeConnection`.
     * And when app comes back to foreground, call `client.openConnection`.
     *
     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.
     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
     */
  }, {
    key: "updateAppSettings",
    value: (
      /**
       * updateAppSettings - updates application settings
       *
       * @param {AppSettings} options App settings.
       * IE: {
          'apn_config': {
            'auth_type': 'token',
            'auth_key": fs.readFileSync(
              './apn-push-auth-key.p8',
              'utf-8',
            ),
            'key_id': 'keyid',
            'team_id': 'teamid',
            'notification_template": 'notification handlebars template',
            'bundle_id': 'com.apple.your.app',
            'development': true
          },
          'firebase_config': {
            'server_key': 'server key from fcm',
            'notification_template': 'notification handlebars template',
            'data_template': 'data handlebars template',
            'apn_template': 'apn notification handlebars template under v2'
          },
          'webhook_url': 'https://acme.com/my/awesome/webhook/'
        }
       */
      function() {
        var _updateAppSettings = _asyncToGenerator(import_regenerator.default.mark(function _callee7(options) {
          var apn_config;
          return import_regenerator.default.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  apn_config = options.apn_config;
                  if (apn_config !== null && apn_config !== void 0 && apn_config.p12_cert) {
                    options = _objectSpread(_objectSpread({}, options), {}, {
                      apn_config: _objectSpread(_objectSpread({}, apn_config), {}, {
                        p12_cert: Buffer.from(apn_config.p12_cert).toString("base64")
                      })
                    });
                  }
                  _context7.next = 4;
                  return this.patch(this.baseURL + "/app", options);
                case 4:
                  return _context7.abrupt("return", _context7.sent);
                case 5:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));
        function updateAppSettings(_x8) {
          return _updateAppSettings.apply(this, arguments);
        }
        return updateAppSettings;
      }()
    )
  }, {
    key: "revokeTokens",
    value: (
      /**
       * Revokes all tokens on application level issued before given time
       */
      function() {
        var _revokeTokens = _asyncToGenerator(import_regenerator.default.mark(function _callee8(before) {
          return import_regenerator.default.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.next = 2;
                  return this.updateAppSettings({
                    revoke_tokens_issued_before: this._normalizeDate(before)
                  });
                case 2:
                  return _context8.abrupt("return", _context8.sent);
                case 3:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));
        function revokeTokens(_x9) {
          return _revokeTokens.apply(this, arguments);
        }
        return revokeTokens;
      }()
    )
    /**
     * Revokes token for a user issued before given time
     */
  }, {
    key: "revokeUserToken",
    value: function() {
      var _revokeUserToken = _asyncToGenerator(import_regenerator.default.mark(function _callee9(userID, before) {
        return import_regenerator.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.revokeUsersToken([userID], before);
              case 2:
                return _context9.abrupt("return", _context9.sent);
              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));
      function revokeUserToken(_x10, _x11) {
        return _revokeUserToken.apply(this, arguments);
      }
      return revokeUserToken;
    }()
    /**
     * Revokes tokens for a list of users issued before given time
     */
  }, {
    key: "revokeUsersToken",
    value: function() {
      var _revokeUsersToken = _asyncToGenerator(import_regenerator.default.mark(function _callee10(userIDs, before) {
        var users, _iterator, _step, userID;
        return import_regenerator.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (before === void 0) {
                  before = (/* @__PURE__ */ new Date()).toISOString();
                } else {
                  before = this._normalizeDate(before);
                }
                users = [];
                _iterator = _createForOfIteratorHelper(userIDs);
                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                    userID = _step.value;
                    users.push({
                      id: userID,
                      set: {
                        revoke_tokens_issued_before: before
                      }
                    });
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
                _context10.next = 6;
                return this.partialUpdateUsers(users);
              case 6:
                return _context10.abrupt("return", _context10.sent);
              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));
      function revokeUsersToken(_x12, _x13) {
        return _revokeUsersToken.apply(this, arguments);
      }
      return revokeUsersToken;
    }()
    /**
     * getAppSettings - retrieves application settings
     */
  }, {
    key: "getAppSettings",
    value: function() {
      var _getAppSettings = _asyncToGenerator(import_regenerator.default.mark(function _callee11() {
        return import_regenerator.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.get(this.baseURL + "/app");
              case 2:
                return _context11.abrupt("return", _context11.sent);
              case 3:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));
      function getAppSettings() {
        return _getAppSettings.apply(this, arguments);
      }
      return getAppSettings;
    }()
    /**
     * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates
     *
     * @param {string} userID User ID. If user has no devices, it will error
     * @param {TestPushDataInput} [data] Overrides for push templates/message used
     *  IE: {
          messageID: 'id-of-message', // will error if message does not exist
          apnTemplate: '{}', // if app doesn't have apn configured it will error
          firebaseTemplate: '{}', // if app doesn't have firebase configured it will error
          firebaseDataTemplate: '{}', // if app doesn't have firebase configured it will error
          skipDevices: true, // skip config/device checks and sending to real devices
          pushProviderName: 'staging' // one of your configured push providers
          pushProviderType: 'apn' // one of supported provider types
        }
    */
  }, {
    key: "testPushSettings",
    value: function() {
      var _testPushSettings = _asyncToGenerator(import_regenerator.default.mark(function _callee12(userID) {
        var data, _args12 = arguments;
        return import_regenerator.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                data = _args12.length > 1 && _args12[1] !== void 0 ? _args12[1] : {};
                _context12.next = 3;
                return this.post(this.baseURL + "/check_push", _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({
                  user_id: userID
                }, data.messageID ? {
                  message_id: data.messageID
                } : {}), data.apnTemplate ? {
                  apn_template: data.apnTemplate
                } : {}), data.firebaseTemplate ? {
                  firebase_template: data.firebaseTemplate
                } : {}), data.firebaseDataTemplate ? {
                  firebase_data_template: data.firebaseDataTemplate
                } : {}), data.skipDevices ? {
                  skip_devices: true
                } : {}), data.pushProviderName ? {
                  push_provider_name: data.pushProviderName
                } : {}), data.pushProviderType ? {
                  push_provider_type: data.pushProviderType
                } : {}));
              case 3:
                return _context12.abrupt("return", _context12.sent);
              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));
      function testPushSettings(_x14) {
        return _testPushSettings.apply(this, arguments);
      }
      return testPushSettings;
    }()
    /**
     * testSQSSettings - Tests that the given or configured SQS configuration is valid
     *
     * @param {TestSQSDataInput} [data] Overrides SQS settings for testing if needed
     *  IE: {
          sqs_key: 'auth_key',
          sqs_secret: 'auth_secret',
          sqs_url: 'url_to_queue',
        }
     */
  }, {
    key: "testSQSSettings",
    value: function() {
      var _testSQSSettings = _asyncToGenerator(import_regenerator.default.mark(function _callee13() {
        var data, _args13 = arguments;
        return import_regenerator.default.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                data = _args13.length > 0 && _args13[0] !== void 0 ? _args13[0] : {};
                _context13.next = 3;
                return this.post(this.baseURL + "/check_sqs", data);
              case 3:
                return _context13.abrupt("return", _context13.sent);
              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));
      function testSQSSettings() {
        return _testSQSSettings.apply(this, arguments);
      }
      return testSQSSettings;
    }()
    /**
     * testSNSSettings - Tests that the given or configured SNS configuration is valid
     *
     * @param {TestSNSDataInput} [data] Overrides SNS settings for testing if needed
     *  IE: {
          sns_key: 'auth_key',
          sns_secret: 'auth_secret',
          sns_topic_arn: 'topic_to_publish_to',
        }
     */
  }, {
    key: "testSNSSettings",
    value: function() {
      var _testSNSSettings = _asyncToGenerator(import_regenerator.default.mark(function _callee14() {
        var data, _args14 = arguments;
        return import_regenerator.default.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                data = _args14.length > 0 && _args14[0] !== void 0 ? _args14[0] : {};
                _context14.next = 3;
                return this.post(this.baseURL + "/check_sns", data);
              case 3:
                return _context14.abrupt("return", _context14.sent);
              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));
      function testSNSSettings() {
        return _testSNSSettings.apply(this, arguments);
      }
      return testSNSSettings;
    }()
    /**
     * Disconnects the websocket and removes the user from client.
     *
     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.
     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
     */
  }, {
    key: "setGuestUser",
    value: (
      /**
       * setGuestUser - Setup a temporary guest user
       *
       * @param {UserResponse<StreamChatGenerics>} user Data about this user. IE {name: "john"}
       *
       * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup
       */
      function() {
        var _setGuestUser = _asyncToGenerator(import_regenerator.default.mark(function _callee15(user) {
          var response, _response$user, guestUser;
          return import_regenerator.default.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  this.anonymous = true;
                  _context15.prev = 1;
                  _context15.next = 4;
                  return this.post(this.baseURL + "/guest", {
                    user
                  });
                case 4:
                  response = _context15.sent;
                  _context15.next = 11;
                  break;
                case 7:
                  _context15.prev = 7;
                  _context15.t0 = _context15["catch"](1);
                  this.anonymous = false;
                  throw _context15.t0;
                case 11:
                  this.anonymous = false;
                  _response$user = response.user, _response$user.created_at, _response$user.updated_at, _response$user.last_active, _response$user.online, guestUser = _objectWithoutProperties(_response$user, _excluded);
                  _context15.next = 15;
                  return this.connectUser(guestUser, response.access_token);
                case 15:
                  return _context15.abrupt("return", _context15.sent);
                case 16:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15, this, [[1, 7]]);
        }));
        function setGuestUser(_x15) {
          return _setGuestUser.apply(this, arguments);
        }
        return setGuestUser;
      }()
    )
    /**
     * createToken - Creates a token to authenticate this user. This function is used server side.
     * The resulting token should be passed to the client side when the users registers or logs in.
     *
     * @param {string} userID The User ID
     * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch
     *
     * @return {string} Returns a token
     */
  }, {
    key: "createToken",
    value: function createToken(userID, exp, iat) {
      if (this.secret == null) {
        throw Error("tokens can only be created server-side using the API Secret");
      }
      var extra = {};
      if (exp) {
        extra.exp = exp;
      }
      if (iat) {
        extra.iat = iat;
      }
      return JWTUserToken(this.secret, userID, extra, {});
    }
    /**
     * on - Listen to events on all channels and users your watching
     *
     * client.on('message.new', event => {console.log("my new message", event, channel.state.messages)})
     * or
     * client.on(event => {console.log(event.type)})
     *
     * @param {EventHandler<StreamChatGenerics> | string} callbackOrString  The event type to listen for (optional)
     * @param {EventHandler<StreamChatGenerics>} [callbackOrNothing] The callback to call
     *
     * @return {{ unsubscribe: () => void }} Description
     */
  }, {
    key: "on",
    value: function on(callbackOrString, callbackOrNothing) {
      var _this2 = this;
      var key = callbackOrNothing ? callbackOrString : "all";
      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;
      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }
      this.logger("info", "Attaching listener for ".concat(key, " event"), {
        tags: ["event", "client"]
      });
      this.listeners[key].push(callback);
      return {
        unsubscribe: function unsubscribe() {
          _this2.logger("info", "Removing listener for ".concat(key, " event"), {
            tags: ["event", "client"]
          });
          _this2.listeners[key] = _this2.listeners[key].filter(function(el) {
            return el !== callback;
          });
        }
      };
    }
    /**
     * off - Remove the event handler
     *
     */
  }, {
    key: "off",
    value: function off(callbackOrString, callbackOrNothing) {
      var key = callbackOrNothing ? callbackOrString : "all";
      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;
      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }
      this.logger("info", "Removing listener for ".concat(key, " event"), {
        tags: ["event", "client"]
      });
      this.listeners[key] = this.listeners[key].filter(function(value) {
        return value !== callback;
      });
    }
  }, {
    key: "_logApiRequest",
    value: function _logApiRequest(type, url, data, config) {
      this.logger("info", "client: ".concat(type, " - Request - ").concat(url), {
        tags: ["api", "api_request", "client"],
        url,
        payload: data,
        config
      });
    }
  }, {
    key: "_logApiResponse",
    value: function _logApiResponse(type, url, response) {
      this.logger("info", "client:".concat(type, " - Response - url: ").concat(url, " > status ").concat(response.status), {
        tags: ["api", "api_response", "client"],
        url,
        response
      });
    }
  }, {
    key: "_logApiError",
    value: function _logApiError(type, url, error) {
      this.logger("error", "client:".concat(type, " - Error - url: ").concat(url), {
        tags: ["api", "api_response", "client"],
        url,
        error
      });
    }
  }, {
    key: "get",
    value: function get(url, params) {
      return this.doAxiosRequest("get", url, null, {
        params
      });
    }
  }, {
    key: "put",
    value: function put(url, data) {
      return this.doAxiosRequest("put", url, data);
    }
  }, {
    key: "post",
    value: function post(url, data) {
      return this.doAxiosRequest("post", url, data);
    }
  }, {
    key: "patch",
    value: function patch(url, data) {
      return this.doAxiosRequest("patch", url, data);
    }
  }, {
    key: "delete",
    value: function _delete(url, params) {
      return this.doAxiosRequest("delete", url, null, {
        params
      });
    }
  }, {
    key: "sendFile",
    value: function sendFile(url, uri, name, contentType, user) {
      var data = addFileToFormData(uri, name, contentType || "multipart/form-data");
      if (user != null)
        data.append("user", JSON.stringify(user));
      return this.doAxiosRequest("postForm", url, data, {
        headers: data.getHeaders ? data.getHeaders() : {},
        // node vs browser
        config: {
          timeout: 0,
          maxContentLength: Infinity,
          maxBodyLength: Infinity
        }
      });
    }
  }, {
    key: "errorFromResponse",
    value: function errorFromResponse(response) {
      var err;
      err = new ErrorFromResponse("StreamChat error HTTP code: ".concat(response.status));
      if (response.data && response.data.code) {
        err = new Error("StreamChat error code ".concat(response.data.code, ": ").concat(response.data.message));
        err.code = response.data.code;
      }
      err.response = response;
      err.status = response.status;
      return err;
    }
  }, {
    key: "handleResponse",
    value: function handleResponse(response) {
      var data = response.data;
      if (isErrorResponse(response)) {
        throw this.errorFromResponse(response);
      }
      return data;
    }
  }, {
    key: "_handleClientEvent",
    value: function _handleClientEvent(event) {
      var _event$me, _this3 = this, _event$me2;
      var client = this;
      var postListenerCallbacks = [];
      this.logger("info", "client:_handleClientEvent - Received event of type { ".concat(event.type, " }"), {
        tags: ["event", "client"],
        event
      });
      if (event.type === "user.presence.changed" || event.type === "user.updated" || event.type === "user.deleted") {
        this._handleUserEvent(event);
      }
      if (event.type === "health.check" && event.me) {
        client.user = event.me;
        client.state.updateUser(event.me);
        client.mutedChannels = event.me.channel_mutes;
        client.mutedUsers = event.me.mutes;
      }
      if (event.channel && event.type === "notification.message_new") {
        this._addChannelConfig(event.channel);
      }
      if (event.type === "notification.channel_mutes_updated" && (_event$me = event.me) !== null && _event$me !== void 0 && _event$me.channel_mutes) {
        var currentMutedChannelIds = [];
        var nextMutedChannelIds = [];
        this.mutedChannels.forEach(function(mute) {
          return mute.channel && currentMutedChannelIds.push(mute.channel.cid);
        });
        event.me.channel_mutes.forEach(function(mute) {
          return mute.channel && nextMutedChannelIds.push(mute.channel.cid);
        });
        currentMutedChannelIds.forEach(function(cid) {
          if (!nextMutedChannelIds.includes(cid) && _this3.activeChannels[cid]) {
            _this3.activeChannels[cid].state.unreadCount = 0;
          }
        });
        this.mutedChannels = event.me.channel_mutes;
      }
      if (event.type === "notification.mutes_updated" && (_event$me2 = event.me) !== null && _event$me2 !== void 0 && _event$me2.mutes) {
        this.mutedUsers = event.me.mutes;
      }
      if (event.type === "notification.mark_read" && event.unread_channels === 0) {
        var activeChannelKeys = Object.keys(this.activeChannels);
        activeChannelKeys.forEach(function(activeChannelKey) {
          return _this3.activeChannels[activeChannelKey].state.unreadCount = 0;
        });
      }
      if ((event.type === "channel.deleted" || event.type === "notification.channel_deleted") && event.cid) {
        var _this$activeChannels$;
        client.state.deleteAllChannelReference(event.cid);
        (_this$activeChannels$ = this.activeChannels[event.cid]) === null || _this$activeChannels$ === void 0 ? void 0 : _this$activeChannels$._disconnect();
        postListenerCallbacks.push(function() {
          if (!event.cid)
            return;
          delete _this3.activeChannels[event.cid];
        });
      }
      return postListenerCallbacks;
    }
  }, {
    key: "_muteStatus",
    value: function _muteStatus(cid) {
      var muteStatus;
      for (var i = 0; i < this.mutedChannels.length; i++) {
        var _mute$channel;
        var mute = this.mutedChannels[i];
        if (((_mute$channel = mute.channel) === null || _mute$channel === void 0 ? void 0 : _mute$channel.cid) === cid) {
          muteStatus = {
            muted: mute.expires ? new Date(mute.expires).getTime() > (/* @__PURE__ */ new Date()).getTime() : true,
            createdAt: mute.created_at ? new Date(mute.created_at) : /* @__PURE__ */ new Date(),
            expiresAt: mute.expires ? new Date(mute.expires) : null
          };
          break;
        }
      }
      if (muteStatus) {
        return muteStatus;
      }
      return {
        muted: false,
        createdAt: null,
        expiresAt: null
      };
    }
  }, {
    key: "connect",
    value: (
      /**
       * @private
       */
      function() {
        var _connect = _asyncToGenerator(import_regenerator.default.mark(function _callee16() {
          return import_regenerator.default.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  if (!(!this.userID || !this._user)) {
                    _context16.next = 2;
                    break;
                  }
                  throw Error("Call connectUser or connectAnonymousUser before starting the connection");
                case 2:
                  if (this.wsBaseURL) {
                    _context16.next = 4;
                    break;
                  }
                  throw Error("Websocket base url not set");
                case 4:
                  if (this.clientID) {
                    _context16.next = 6;
                    break;
                  }
                  throw Error("clientID is not set");
                case 6:
                  if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {
                    this._sayHi();
                  }
                  if (this.options.wsConnection && this.node) {
                    this.options.wsConnection.setClient(this);
                    this.wsConnection = this.options.wsConnection;
                  } else {
                    this.wsConnection = new StableWSConnection({
                      client: this
                    });
                  }
                  _context16.prev = 8;
                  if (!this.wsFallback) {
                    _context16.next = 13;
                    break;
                  }
                  _context16.next = 12;
                  return this.wsFallback.connect();
                case 12:
                  return _context16.abrupt("return", _context16.sent);
                case 13:
                  _context16.next = 15;
                  return this.wsConnection.connect(this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout);
                case 15:
                  return _context16.abrupt("return", _context16.sent);
                case 18:
                  _context16.prev = 18;
                  _context16.t0 = _context16["catch"](8);
                  if (!(this.options.enableWSFallback && isWSFailure(_context16.t0) && isOnline())) {
                    _context16.next = 29;
                    break;
                  }
                  this.logger("info", "client:connect() - WS failed, fallback to longpoll", {
                    tags: ["connection", "client"]
                  });
                  this.dispatchEvent({
                    type: "transport.changed",
                    mode: "longpoll"
                  });
                  this.wsConnection._destroyCurrentWSConnection();
                  this.wsConnection.disconnect().then();
                  this.wsFallback = new WSConnectionFallback({
                    client: this
                  });
                  _context16.next = 28;
                  return this.wsFallback.connect();
                case 28:
                  return _context16.abrupt("return", _context16.sent);
                case 29:
                  throw _context16.t0;
                case 30:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16, this, [[8, 18]]);
        }));
        function connect() {
          return _connect.apply(this, arguments);
        }
        return connect;
      }()
    )
    /**
     * Check the connectivity with server for warmup purpose.
     *
     * @private
     */
  }, {
    key: "_sayHi",
    value: function _sayHi() {
      var _this4 = this;
      var client_request_id = randomId();
      var opts = {
        headers: {
          "x-client-request-id": client_request_id
        }
      };
      this.doAxiosRequest("get", this.baseURL + "/hi", null, opts).catch(function(e2) {
        if (_this4.options.enableInsights) {
          postInsights("http_hi_failed", {
            api_key: _this4.key,
            err: e2,
            client_request_id
          });
        }
      });
    }
    /**
     * queryUsers - Query users and watch user presence
     *
     * @param {UserFilters<StreamChatGenerics>} filterConditions MongoDB style filter conditions
     * @param {UserSort<StreamChatGenerics>} sort Sort options, for instance [{last_active: -1}].
     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]
     * @param {UserOptions} options Option object, {presence: true}
     *
     * @return {Promise<{ users: Array<UserResponse<StreamChatGenerics>> }>} User Query Response
     */
  }, {
    key: "queryUsers",
    value: function() {
      var _queryUsers = _asyncToGenerator(import_regenerator.default.mark(function _callee17(filterConditions) {
        var sort, options, defaultOptions, data, _args17 = arguments;
        return import_regenerator.default.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                sort = _args17.length > 1 && _args17[1] !== void 0 ? _args17[1] : [];
                options = _args17.length > 2 && _args17[2] !== void 0 ? _args17[2] : {};
                defaultOptions = {
                  presence: false
                };
                _context17.next = 5;
                return this.wsPromise;
              case 5:
                if (!this._hasConnectionID()) {
                  defaultOptions.presence = false;
                }
                _context17.next = 8;
                return this.get(this.baseURL + "/users", {
                  payload: _objectSpread(_objectSpread({
                    filter_conditions: filterConditions,
                    sort: normalizeQuerySort(sort)
                  }, defaultOptions), options)
                });
              case 8:
                data = _context17.sent;
                this.state.updateUsers(data.users);
                return _context17.abrupt("return", data);
              case 11:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));
      function queryUsers(_x16) {
        return _queryUsers.apply(this, arguments);
      }
      return queryUsers;
    }()
    /**
     * queryBannedUsers - Query user bans
     *
     * @param {BannedUsersFilters} filterConditions MongoDB style filter conditions
     * @param {BannedUsersSort} sort Sort options [{created_at: 1}].
     * @param {BannedUsersPaginationOptions} options Option object, {limit: 10, offset:0, exclude_expired_bans: true}
     *
     * @return {Promise<BannedUsersResponse<StreamChatGenerics>>} Ban Query Response
     */
  }, {
    key: "queryBannedUsers",
    value: function() {
      var _queryBannedUsers = _asyncToGenerator(import_regenerator.default.mark(function _callee18() {
        var filterConditions, sort, options, _args18 = arguments;
        return import_regenerator.default.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                filterConditions = _args18.length > 0 && _args18[0] !== void 0 ? _args18[0] : {};
                sort = _args18.length > 1 && _args18[1] !== void 0 ? _args18[1] : [];
                options = _args18.length > 2 && _args18[2] !== void 0 ? _args18[2] : {};
                _context18.next = 5;
                return this.get(this.baseURL + "/query_banned_users", {
                  payload: _objectSpread({
                    filter_conditions: filterConditions,
                    sort: normalizeQuerySort(sort)
                  }, options)
                });
              case 5:
                return _context18.abrupt("return", _context18.sent);
              case 6:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));
      function queryBannedUsers() {
        return _queryBannedUsers.apply(this, arguments);
      }
      return queryBannedUsers;
    }()
    /**
     * queryMessageFlags - Query message flags
     *
     * @param {MessageFlagsFilters} filterConditions MongoDB style filter conditions
     * @param {MessageFlagsPaginationOptions} options Option object, {limit: 10, offset:0}
     *
     * @return {Promise<MessageFlagsResponse<StreamChatGenerics>>} Message Flags Response
     */
  }, {
    key: "queryMessageFlags",
    value: function() {
      var _queryMessageFlags = _asyncToGenerator(import_regenerator.default.mark(function _callee19() {
        var filterConditions, options, _args19 = arguments;
        return import_regenerator.default.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                filterConditions = _args19.length > 0 && _args19[0] !== void 0 ? _args19[0] : {};
                options = _args19.length > 1 && _args19[1] !== void 0 ? _args19[1] : {};
                _context19.next = 4;
                return this.get(this.baseURL + "/moderation/flags/message", {
                  payload: _objectSpread({
                    filter_conditions: filterConditions
                  }, options)
                });
              case 4:
                return _context19.abrupt("return", _context19.sent);
              case 5:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));
      function queryMessageFlags() {
        return _queryMessageFlags.apply(this, arguments);
      }
      return queryMessageFlags;
    }()
    /**
     * queryChannels - Query channels
     *
     * @param {ChannelFilters<StreamChatGenerics>} filterConditions object MongoDB style filters
     * @param {ChannelSort<StreamChatGenerics>} [sort] Sort options, for instance {created_at: -1}.
     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]
     * @param {ChannelOptions} [options] Options object
     * @param {ChannelStateOptions} [stateOptions] State options object. These options will only be used for state management and won't be sent in the request.
     * - stateOptions.skipInitialization - Skips the initialization of the state for the channels matching the ids in the list.
     *
     * @return {Promise<{ channels: Array<ChannelAPIResponse<AStreamChatGenerics>>}> } search channels response
     */
  }, {
    key: "queryChannels",
    value: function() {
      var _queryChannels = _asyncToGenerator(import_regenerator.default.mark(function _callee20(filterConditions) {
        var sort, options, stateOptions, defaultOptions, payload, data, _args20 = arguments;
        return import_regenerator.default.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                sort = _args20.length > 1 && _args20[1] !== void 0 ? _args20[1] : [];
                options = _args20.length > 2 && _args20[2] !== void 0 ? _args20[2] : {};
                stateOptions = _args20.length > 3 && _args20[3] !== void 0 ? _args20[3] : {};
                defaultOptions = {
                  state: true,
                  watch: true,
                  presence: false
                };
                _context20.next = 6;
                return this.wsPromise;
              case 6:
                if (!this._hasConnectionID()) {
                  defaultOptions.watch = false;
                }
                payload = _objectSpread(_objectSpread({
                  filter_conditions: filterConditions,
                  sort: normalizeQuerySort(sort)
                }, defaultOptions), options);
                _context20.next = 10;
                return this.post(this.baseURL + "/channels", payload);
              case 10:
                data = _context20.sent;
                this.dispatchEvent({
                  type: "channels.queried",
                  queriedChannels: {
                    channels: data.channels,
                    isLatestMessageSet: true
                  }
                });
                return _context20.abrupt("return", this.hydrateActiveChannels(data.channels, stateOptions));
              case 13:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));
      function queryChannels(_x17) {
        return _queryChannels.apply(this, arguments);
      }
      return queryChannels;
    }()
  }, {
    key: "hydrateActiveChannels",
    value: function hydrateActiveChannels() {
      var channelsFromApi = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var stateOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var skipInitialization = stateOptions.skipInitialization, _stateOptions$offline = stateOptions.offlineMode, offlineMode = _stateOptions$offline === void 0 ? false : _stateOptions$offline;
      var _iterator2 = _createForOfIteratorHelper(channelsFromApi), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var channelState = _step2.value;
          this._addChannelConfig(channelState.channel);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var channels = [];
      var _iterator3 = _createForOfIteratorHelper(channelsFromApi), _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
          var _channelState = _step3.value;
          var c = this.channel(_channelState.channel.type, _channelState.channel.id);
          c.data = _channelState.channel;
          c.offlineMode = offlineMode;
          c.initialized = !offlineMode;
          if (skipInitialization === void 0) {
            c._initializeState(_channelState, "latest");
          } else if (!skipInitialization.includes(_channelState.channel.id)) {
            c.state.clearMessages();
            c._initializeState(_channelState, "latest");
          }
          channels.push(c);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return channels;
    }
    /**
     * search - Query messages
     *
     * @param {ChannelFilters<StreamChatGenerics>} filterConditions MongoDB style filter conditions
     * @param {MessageFilters<StreamChatGenerics> | string} query search query or object MongoDB style filters
     * @param {SearchOptions<StreamChatGenerics>} [options] Option object, {user_id: 'tommaso'}
     *
     * @return {Promise<SearchAPIResponse<StreamChatGenerics>>} search messages response
     */
  }, {
    key: "search",
    value: function() {
      var _search = _asyncToGenerator(import_regenerator.default.mark(function _callee21(filterConditions, query) {
        var options, payload, _args21 = arguments;
        return import_regenerator.default.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                options = _args21.length > 2 && _args21[2] !== void 0 ? _args21[2] : {};
                if (!(options.offset && options.next)) {
                  _context21.next = 3;
                  break;
                }
                throw Error("Cannot specify offset with next");
              case 3:
                payload = _objectSpread(_objectSpread({
                  filter_conditions: filterConditions
                }, options), {}, {
                  sort: options.sort ? normalizeQuerySort(options.sort) : void 0
                });
                if (!(typeof query === "string")) {
                  _context21.next = 8;
                  break;
                }
                payload.query = query;
                _context21.next = 13;
                break;
              case 8:
                if (!(_typeof(query) === "object")) {
                  _context21.next = 12;
                  break;
                }
                payload.message_filter_conditions = query;
                _context21.next = 13;
                break;
              case 12:
                throw Error("Invalid type ".concat(_typeof(query), " for query parameter"));
              case 13:
                _context21.next = 15;
                return this.wsPromise;
              case 15:
                _context21.next = 17;
                return this.get(this.baseURL + "/search", {
                  payload
                });
              case 17:
                return _context21.abrupt("return", _context21.sent);
              case 18:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));
      function search(_x18, _x19) {
        return _search.apply(this, arguments);
      }
      return search;
    }()
    /**
     * setLocalDevice - Set the device info for the current client(device) that will be sent via WS connection automatically
     *
     * @param {BaseDeviceFields} device the device object
     * @param {string} device.id device id
     * @param {string} device.push_provider the push provider
     *
     */
  }, {
    key: "setLocalDevice",
    value: function setLocalDevice(device) {
      var _this$wsConnection5, _this$wsConnection6, _this$wsFallback4;
      if ((_this$wsConnection5 = this.wsConnection) !== null && _this$wsConnection5 !== void 0 && _this$wsConnection5.isConnecting && this.wsPromise || ((_this$wsConnection6 = this.wsConnection) !== null && _this$wsConnection6 !== void 0 && _this$wsConnection6.isHealthy || (_this$wsFallback4 = this.wsFallback) !== null && _this$wsFallback4 !== void 0 && _this$wsFallback4.isHealthy()) && this._hasConnectionID()) {
        throw new Error("you can only set device before opening a websocket connection");
      }
      this.options.device = device;
    }
    /**
     * addDevice - Adds a push device for a user.
     *
     * @param {string} id the device id
     * @param {PushProvider} push_provider the push provider
     * @param {string} [userID] the user id (defaults to current user)
     * @param {string} [push_provider_name] user provided push provider name for multi bundle support
     *
     */
  }, {
    key: "addDevice",
    value: function() {
      var _addDevice = _asyncToGenerator(import_regenerator.default.mark(function _callee22(id, push_provider, userID, push_provider_name) {
        return import_regenerator.default.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return this.post(this.baseURL + "/devices", _objectSpread(_objectSpread({
                  id,
                  push_provider
                }, userID != null ? {
                  user_id: userID
                } : {}), push_provider_name != null ? {
                  push_provider_name
                } : {}));
              case 2:
                return _context22.abrupt("return", _context22.sent);
              case 3:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));
      function addDevice(_x20, _x21, _x22, _x23) {
        return _addDevice.apply(this, arguments);
      }
      return addDevice;
    }()
    /**
     * getDevices - Returns the devices associated with a current user
     *
     * @param {string} [userID] User ID. Only works on serverside
     *
     * @return {Device<StreamChatGenerics>[]} Array of devices
     */
  }, {
    key: "getDevices",
    value: function() {
      var _getDevices = _asyncToGenerator(import_regenerator.default.mark(function _callee23(userID) {
        return import_regenerator.default.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return this.get(this.baseURL + "/devices", userID ? {
                  user_id: userID
                } : {});
              case 2:
                return _context23.abrupt("return", _context23.sent);
              case 3:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));
      function getDevices(_x24) {
        return _getDevices.apply(this, arguments);
      }
      return getDevices;
    }()
  }, {
    key: "getUnreadCount",
    value: function() {
      var _getUnreadCount = _asyncToGenerator(import_regenerator.default.mark(function _callee24(userID) {
        return import_regenerator.default.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return this.get(this.baseURL + "/unread", userID ? {
                  user_id: userID
                } : {});
              case 2:
                return _context24.abrupt("return", _context24.sent);
              case 3:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));
      function getUnreadCount(_x25) {
        return _getUnreadCount.apply(this, arguments);
      }
      return getUnreadCount;
    }()
    /**
     * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices
     *
     * @param {string} id The device id
     * @param {string} [userID] The user id. Only specify this for serverside requests
     *
     */
  }, {
    key: "removeDevice",
    value: function() {
      var _removeDevice = _asyncToGenerator(import_regenerator.default.mark(function _callee25(id, userID) {
        return import_regenerator.default.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                _context25.next = 2;
                return this.delete(this.baseURL + "/devices", _objectSpread({
                  id
                }, userID ? {
                  user_id: userID
                } : {}));
              case 2:
                return _context25.abrupt("return", _context25.sent);
              case 3:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));
      function removeDevice(_x26, _x27) {
        return _removeDevice.apply(this, arguments);
      }
      return removeDevice;
    }()
    /**
     * getRateLimits - Returns the rate limits quota and usage for the current app, possibly filter for a specific platform and/or endpoints.
     * Only available server-side.
     *
     * @param {object} [params] The params for the call. If none of the params are set, all limits for all platforms are returned.
     * @returns {Promise<GetRateLimitsResponse>}
     */
  }, {
    key: "getRateLimits",
    value: function() {
      var _getRateLimits = _asyncToGenerator(import_regenerator.default.mark(function _callee26(params) {
        var _ref7, serverSide, web, android, ios, endpoints;
        return import_regenerator.default.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                _ref7 = params || {}, serverSide = _ref7.serverSide, web = _ref7.web, android = _ref7.android, ios = _ref7.ios, endpoints = _ref7.endpoints;
                return _context26.abrupt("return", this.get(this.baseURL + "/rate_limits", {
                  server_side: serverSide,
                  web,
                  android,
                  ios,
                  endpoints: endpoints ? endpoints.join(",") : void 0
                }));
              case 2:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));
      function getRateLimits(_x28) {
        return _getRateLimits.apply(this, arguments);
      }
      return getRateLimits;
    }()
  }, {
    key: "_addChannelConfig",
    value: function _addChannelConfig(_ref8) {
      var cid = _ref8.cid, config = _ref8.config;
      this.configs[cid] = config;
    }
    /**
     * channel - Returns a new channel with the given type, id and custom data
     *
     * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter and provide the list of members.
     * Make sure to await channel.create() or channel.watch() before accessing channel functions:
     * ie. channel = client.channel("messaging", {members: ["tommaso", "thierry"]})
     * await channel.create() to assign an ID to channel
     *
     * @param {string} channelType The channel type
     * @param {string | ChannelData<StreamChatGenerics> | null} [channelIDOrCustom]   The channel ID, you can leave this out if you want to create a conversation channel
     * @param {object} [custom]    Custom data to attach to the channel
     *
     * @return {channel} The channel object, initialize it using channel.watch()
     */
  }, {
    key: "channel",
    value: function channel(channelType, channelIDOrCustom) {
      var _custom$members;
      var custom = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      if (!this.userID && !this._isUsingServerAuth()) {
        throw Error("Call connectUser or connectAnonymousUser before creating a channel");
      }
      if (~channelType.indexOf(":")) {
        throw Error("Invalid channel group ".concat(channelType, ", can't contain the : character"));
      }
      if (channelIDOrCustom && _typeof(channelIDOrCustom) === "object") {
        return this.getChannelByMembers(channelType, channelIDOrCustom);
      }
      if (!channelIDOrCustom && _typeof(custom) === "object" && (_custom$members = custom.members) !== null && _custom$members !== void 0 && _custom$members.length) {
        return this.getChannelByMembers(channelType, custom);
      }
      if (!channelIDOrCustom) {
        return new Channel(this, channelType, void 0, custom);
      }
      return this.getChannelById(channelType, channelIDOrCustom, custom);
    }
    /**
     * It's a helper method for `client.channel()` method, used to create unique conversation or
     * channel based on member list instead of id.
     *
     * If the channel already exists in `activeChannels` list, then we simply return it, since that
     * means the same channel was already requested or created.
     *
     * Otherwise we create a new instance of Channel class and return it.
     *
     * @private
     *
     * @param {string} channelType The channel type
     * @param {object} [custom]    Custom data to attach to the channel
     *
     * @return {channel} The channel object, initialize it using channel.watch()
     */
  }, {
    key: "partialUpdateUser",
    value: (
      /**
       * partialUpdateUser - Update the given user object
       *
       * @param {PartialUserUpdate<StreamChatGenerics>} partialUserObject which should contain id and any of "set" or "unset" params;
       * example: {id: "user1", set:{field: value}, unset:["field2"]}
       *
       * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>} list of updated users
       */
      function() {
        var _partialUpdateUser = _asyncToGenerator(import_regenerator.default.mark(function _callee27(partialUserObject) {
          return import_regenerator.default.wrap(function _callee27$(_context27) {
            while (1) {
              switch (_context27.prev = _context27.next) {
                case 0:
                  _context27.next = 2;
                  return this.partialUpdateUsers([partialUserObject]);
                case 2:
                  return _context27.abrupt("return", _context27.sent);
                case 3:
                case "end":
                  return _context27.stop();
              }
            }
          }, _callee27, this);
        }));
        function partialUpdateUser(_x29) {
          return _partialUpdateUser.apply(this, arguments);
        }
        return partialUpdateUser;
      }()
    )
    /**
     * upsertUsers - Batch upsert the list of users
     *
     * @param {UserResponse<StreamChatGenerics>[]} users list of users
     *
     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}
     */
  }, {
    key: "upsertUsers",
    value: function() {
      var _upsertUsers = _asyncToGenerator(import_regenerator.default.mark(function _callee28(users) {
        var userMap, _iterator4, _step4, userObject;
        return import_regenerator.default.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                userMap = {};
                _iterator4 = _createForOfIteratorHelper(users);
                _context28.prev = 2;
                _iterator4.s();
              case 4:
                if ((_step4 = _iterator4.n()).done) {
                  _context28.next = 11;
                  break;
                }
                userObject = _step4.value;
                if (userObject.id) {
                  _context28.next = 8;
                  break;
                }
                throw Error("User ID is required when updating a user");
              case 8:
                userMap[userObject.id] = userObject;
              case 9:
                _context28.next = 4;
                break;
              case 11:
                _context28.next = 16;
                break;
              case 13:
                _context28.prev = 13;
                _context28.t0 = _context28["catch"](2);
                _iterator4.e(_context28.t0);
              case 16:
                _context28.prev = 16;
                _iterator4.f();
                return _context28.finish(16);
              case 19:
                _context28.next = 21;
                return this.post(this.baseURL + "/users", {
                  users: userMap
                });
              case 21:
                return _context28.abrupt("return", _context28.sent);
              case 22:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this, [[2, 13, 16, 19]]);
      }));
      function upsertUsers(_x30) {
        return _upsertUsers.apply(this, arguments);
      }
      return upsertUsers;
    }()
    /**
     * @deprecated Please use upsertUsers() function instead.
     *
     * updateUsers - Batch update the list of users
     *
     * @param {UserResponse<StreamChatGenerics>[]} users list of users
     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}
     */
  }, {
    key: "upsertUser",
    value: (
      /**
       * upsertUser - Update or Create the given user object
       *
       * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: "myuser"} is valid
       *
       * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}
       */
      function upsertUser(userObject) {
        return this.upsertUsers([userObject]);
      }
    )
    /**
     * @deprecated Please use upsertUser() function instead.
     *
     * updateUser - Update or Create the given user object
     *
     * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: "myuser"} is valid
     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}
     */
  }, {
    key: "partialUpdateUsers",
    value: (
      /**
       * partialUpdateUsers - Batch partial update of users
       *
       * @param {PartialUserUpdate<StreamChatGenerics>[]} users list of partial update requests
       *
       * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}
       */
      function() {
        var _partialUpdateUsers = _asyncToGenerator(import_regenerator.default.mark(function _callee29(users) {
          var _iterator5, _step5, userObject;
          return import_regenerator.default.wrap(function _callee29$(_context29) {
            while (1) {
              switch (_context29.prev = _context29.next) {
                case 0:
                  _iterator5 = _createForOfIteratorHelper(users);
                  _context29.prev = 1;
                  _iterator5.s();
                case 3:
                  if ((_step5 = _iterator5.n()).done) {
                    _context29.next = 9;
                    break;
                  }
                  userObject = _step5.value;
                  if (userObject.id) {
                    _context29.next = 7;
                    break;
                  }
                  throw Error("User ID is required when updating a user");
                case 7:
                  _context29.next = 3;
                  break;
                case 9:
                  _context29.next = 14;
                  break;
                case 11:
                  _context29.prev = 11;
                  _context29.t0 = _context29["catch"](1);
                  _iterator5.e(_context29.t0);
                case 14:
                  _context29.prev = 14;
                  _iterator5.f();
                  return _context29.finish(14);
                case 17:
                  _context29.next = 19;
                  return this.patch(this.baseURL + "/users", {
                    users
                  });
                case 19:
                  return _context29.abrupt("return", _context29.sent);
                case 20:
                case "end":
                  return _context29.stop();
              }
            }
          }, _callee29, this, [[1, 11, 14, 17]]);
        }));
        function partialUpdateUsers(_x31) {
          return _partialUpdateUsers.apply(this, arguments);
        }
        return partialUpdateUsers;
      }()
    )
  }, {
    key: "deleteUser",
    value: function() {
      var _deleteUser = _asyncToGenerator(import_regenerator.default.mark(function _callee30(userID, params) {
        return import_regenerator.default.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                _context30.next = 2;
                return this.delete(this.baseURL + "/users/".concat(userID), params);
              case 2:
                return _context30.abrupt("return", _context30.sent);
              case 3:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this);
      }));
      function deleteUser(_x32, _x33) {
        return _deleteUser.apply(this, arguments);
      }
      return deleteUser;
    }()
    /**
     * restoreUsers - Restore soft deleted users
     *
     * @param {string[]} user_ids which users to restore
     *
     * @return {APIResponse} An API response
     */
  }, {
    key: "restoreUsers",
    value: function() {
      var _restoreUsers = _asyncToGenerator(import_regenerator.default.mark(function _callee31(user_ids) {
        return import_regenerator.default.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                _context31.next = 2;
                return this.post(this.baseURL + "/users/restore", {
                  user_ids
                });
              case 2:
                return _context31.abrupt("return", _context31.sent);
              case 3:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));
      function restoreUsers(_x34) {
        return _restoreUsers.apply(this, arguments);
      }
      return restoreUsers;
    }()
    /**
     * reactivateUser - Reactivate one user
     *
     * @param {string} userID which user to reactivate
     * @param {ReactivateUserOptions} [options]
     *
     * @return {UserResponse} Reactivated user
     */
  }, {
    key: "reactivateUser",
    value: function() {
      var _reactivateUser = _asyncToGenerator(import_regenerator.default.mark(function _callee32(userID, options) {
        return import_regenerator.default.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                _context32.next = 2;
                return this.post(this.baseURL + "/users/".concat(userID, "/reactivate"), _objectSpread({}, options));
              case 2:
                return _context32.abrupt("return", _context32.sent);
              case 3:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this);
      }));
      function reactivateUser(_x35, _x36) {
        return _reactivateUser.apply(this, arguments);
      }
      return reactivateUser;
    }()
    /**
     * reactivateUsers - Reactivate many users asynchronously
     *
     * @param {string[]} user_ids which users to reactivate
     * @param {ReactivateUsersOptions} [options]
     *
     * @return {TaskResponse} A task ID
     */
  }, {
    key: "reactivateUsers",
    value: function() {
      var _reactivateUsers = _asyncToGenerator(import_regenerator.default.mark(function _callee33(user_ids, options) {
        return import_regenerator.default.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                _context33.next = 2;
                return this.post(this.baseURL + "/users/reactivate", _objectSpread({
                  user_ids
                }, options));
              case 2:
                return _context33.abrupt("return", _context33.sent);
              case 3:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));
      function reactivateUsers(_x37, _x38) {
        return _reactivateUsers.apply(this, arguments);
      }
      return reactivateUsers;
    }()
    /**
     * deactivateUser - Deactivate one user
     *
     * @param {string} userID which user to deactivate
     * @param {DeactivateUsersOptions} [options]
     *
     * @return {UserResponse} Deactivated user
     */
  }, {
    key: "deactivateUser",
    value: function() {
      var _deactivateUser = _asyncToGenerator(import_regenerator.default.mark(function _callee34(userID, options) {
        return import_regenerator.default.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                _context34.next = 2;
                return this.post(this.baseURL + "/users/".concat(userID, "/deactivate"), _objectSpread({}, options));
              case 2:
                return _context34.abrupt("return", _context34.sent);
              case 3:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));
      function deactivateUser(_x39, _x40) {
        return _deactivateUser.apply(this, arguments);
      }
      return deactivateUser;
    }()
    /**
     * deactivateUsers - Deactivate many users asynchronously
     *
     * @param {string[]} user_ids which users to deactivate
     * @param {DeactivateUsersOptions} [options]
     *
     * @return {TaskResponse} A task ID
     */
  }, {
    key: "deactivateUsers",
    value: function() {
      var _deactivateUsers = _asyncToGenerator(import_regenerator.default.mark(function _callee35(user_ids, options) {
        return import_regenerator.default.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                _context35.next = 2;
                return this.post(this.baseURL + "/users/deactivate", _objectSpread({
                  user_ids
                }, options));
              case 2:
                return _context35.abrupt("return", _context35.sent);
              case 3:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));
      function deactivateUsers(_x41, _x42) {
        return _deactivateUsers.apply(this, arguments);
      }
      return deactivateUsers;
    }()
  }, {
    key: "exportUser",
    value: function() {
      var _exportUser = _asyncToGenerator(import_regenerator.default.mark(function _callee36(userID, options) {
        return import_regenerator.default.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                _context36.next = 2;
                return this.get(this.baseURL + "/users/".concat(userID, "/export"), _objectSpread({}, options));
              case 2:
                return _context36.abrupt("return", _context36.sent);
              case 3:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36, this);
      }));
      function exportUser(_x43, _x44) {
        return _exportUser.apply(this, arguments);
      }
      return exportUser;
    }()
    /** banUser - bans a user from all channels
     *
     * @param {string} targetUserID
     * @param {BanUserOptions<StreamChatGenerics>} [options]
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "banUser",
    value: function() {
      var _banUser = _asyncToGenerator(import_regenerator.default.mark(function _callee37(targetUserID, options) {
        return import_regenerator.default.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                _context37.next = 2;
                return this.post(this.baseURL + "/moderation/ban", _objectSpread({
                  target_user_id: targetUserID
                }, options));
              case 2:
                return _context37.abrupt("return", _context37.sent);
              case 3:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));
      function banUser(_x45, _x46) {
        return _banUser.apply(this, arguments);
      }
      return banUser;
    }()
    /** unbanUser - revoke global ban for a user
     *
     * @param {string} targetUserID
     * @param {UnBanUserOptions} [options]
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "unbanUser",
    value: function() {
      var _unbanUser = _asyncToGenerator(import_regenerator.default.mark(function _callee38(targetUserID, options) {
        return import_regenerator.default.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                _context38.next = 2;
                return this.delete(this.baseURL + "/moderation/ban", _objectSpread({
                  target_user_id: targetUserID
                }, options));
              case 2:
                return _context38.abrupt("return", _context38.sent);
              case 3:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));
      function unbanUser(_x47, _x48) {
        return _unbanUser.apply(this, arguments);
      }
      return unbanUser;
    }()
    /** shadowBan - shadow bans a user from all channels
     *
     * @param {string} targetUserID
     * @param {BanUserOptions<StreamChatGenerics>} [options]
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "shadowBan",
    value: function() {
      var _shadowBan = _asyncToGenerator(import_regenerator.default.mark(function _callee39(targetUserID, options) {
        return import_regenerator.default.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                _context39.next = 2;
                return this.banUser(targetUserID, _objectSpread({
                  shadow: true
                }, options));
              case 2:
                return _context39.abrupt("return", _context39.sent);
              case 3:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));
      function shadowBan(_x49, _x50) {
        return _shadowBan.apply(this, arguments);
      }
      return shadowBan;
    }()
    /** removeShadowBan - revoke global shadow ban for a user
     *
     * @param {string} targetUserID
     * @param {UnBanUserOptions} [options]
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "removeShadowBan",
    value: function() {
      var _removeShadowBan = _asyncToGenerator(import_regenerator.default.mark(function _callee40(targetUserID, options) {
        return import_regenerator.default.wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                _context40.next = 2;
                return this.unbanUser(targetUserID, _objectSpread({
                  shadow: true
                }, options));
              case 2:
                return _context40.abrupt("return", _context40.sent);
              case 3:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40, this);
      }));
      function removeShadowBan(_x51, _x52) {
        return _removeShadowBan.apply(this, arguments);
      }
      return removeShadowBan;
    }()
    /** muteUser - mutes a user
     *
     * @param {string} targetID
     * @param {string} [userID] Only used with serverside auth
     * @param {MuteUserOptions<StreamChatGenerics>} [options]
     * @returns {Promise<MuteUserResponse<StreamChatGenerics>>}
     */
  }, {
    key: "muteUser",
    value: function() {
      var _muteUser = _asyncToGenerator(import_regenerator.default.mark(function _callee41(targetID, userID) {
        var options, _args41 = arguments;
        return import_regenerator.default.wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                options = _args41.length > 2 && _args41[2] !== void 0 ? _args41[2] : {};
                _context41.next = 3;
                return this.post(this.baseURL + "/moderation/mute", _objectSpread(_objectSpread({
                  target_id: targetID
                }, userID ? {
                  user_id: userID
                } : {}), options));
              case 3:
                return _context41.abrupt("return", _context41.sent);
              case 4:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41, this);
      }));
      function muteUser(_x53, _x54) {
        return _muteUser.apply(this, arguments);
      }
      return muteUser;
    }()
    /** unmuteUser - unmutes a user
     *
     * @param {string} targetID
     * @param {string} [currentUserID] Only used with serverside auth
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "unmuteUser",
    value: function() {
      var _unmuteUser = _asyncToGenerator(import_regenerator.default.mark(function _callee42(targetID, currentUserID) {
        return import_regenerator.default.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                _context42.next = 2;
                return this.post(this.baseURL + "/moderation/unmute", _objectSpread({
                  target_id: targetID
                }, currentUserID ? {
                  user_id: currentUserID
                } : {}));
              case 2:
                return _context42.abrupt("return", _context42.sent);
              case 3:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42, this);
      }));
      function unmuteUser(_x55, _x56) {
        return _unmuteUser.apply(this, arguments);
      }
      return unmuteUser;
    }()
    /** userMuteStatus - check if a user is muted or not, can be used after connectUser() is called
     *
     * @param {string} targetID
     * @returns {boolean}
     */
  }, {
    key: "userMuteStatus",
    value: function userMuteStatus(targetID) {
      if (!this.user || !this.wsPromise) {
        throw new Error("Make sure to await connectUser() first.");
      }
      for (var i = 0; i < this.mutedUsers.length; i += 1) {
        if (this.mutedUsers[i].target.id === targetID)
          return true;
      }
      return false;
    }
    /**
     * flagMessage - flag a message
     * @param {string} targetMessageID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "flagMessage",
    value: function() {
      var _flagMessage = _asyncToGenerator(import_regenerator.default.mark(function _callee43(targetMessageID) {
        var options, _args43 = arguments;
        return import_regenerator.default.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                options = _args43.length > 1 && _args43[1] !== void 0 ? _args43[1] : {};
                _context43.next = 3;
                return this.post(this.baseURL + "/moderation/flag", _objectSpread({
                  target_message_id: targetMessageID
                }, options));
              case 3:
                return _context43.abrupt("return", _context43.sent);
              case 4:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43, this);
      }));
      function flagMessage(_x57) {
        return _flagMessage.apply(this, arguments);
      }
      return flagMessage;
    }()
    /**
     * flagUser - flag a user
     * @param {string} targetID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "flagUser",
    value: function() {
      var _flagUser = _asyncToGenerator(import_regenerator.default.mark(function _callee44(targetID) {
        var options, _args44 = arguments;
        return import_regenerator.default.wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                options = _args44.length > 1 && _args44[1] !== void 0 ? _args44[1] : {};
                _context44.next = 3;
                return this.post(this.baseURL + "/moderation/flag", _objectSpread({
                  target_user_id: targetID
                }, options));
              case 3:
                return _context44.abrupt("return", _context44.sent);
              case 4:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44, this);
      }));
      function flagUser(_x58) {
        return _flagUser.apply(this, arguments);
      }
      return flagUser;
    }()
    /**
     * unflagMessage - unflag a message
     * @param {string} targetMessageID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "unflagMessage",
    value: function() {
      var _unflagMessage = _asyncToGenerator(import_regenerator.default.mark(function _callee45(targetMessageID) {
        var options, _args45 = arguments;
        return import_regenerator.default.wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                options = _args45.length > 1 && _args45[1] !== void 0 ? _args45[1] : {};
                _context45.next = 3;
                return this.post(this.baseURL + "/moderation/unflag", _objectSpread({
                  target_message_id: targetMessageID
                }, options));
              case 3:
                return _context45.abrupt("return", _context45.sent);
              case 4:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45, this);
      }));
      function unflagMessage(_x59) {
        return _unflagMessage.apply(this, arguments);
      }
      return unflagMessage;
    }()
    /**
     * unflagUser - unflag a user
     * @param {string} targetID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "unflagUser",
    value: function() {
      var _unflagUser = _asyncToGenerator(import_regenerator.default.mark(function _callee46(targetID) {
        var options, _args46 = arguments;
        return import_regenerator.default.wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                options = _args46.length > 1 && _args46[1] !== void 0 ? _args46[1] : {};
                _context46.next = 3;
                return this.post(this.baseURL + "/moderation/unflag", _objectSpread({
                  target_user_id: targetID
                }, options));
              case 3:
                return _context46.abrupt("return", _context46.sent);
              case 4:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46, this);
      }));
      function unflagUser(_x60) {
        return _unflagUser.apply(this, arguments);
      }
      return unflagUser;
    }()
    /**
     * getCallToken - retrieves the auth token needed to join a call
     *
     * @param {string} callID
     * @param {object} options
     * @returns {Promise<GetCallTokenResponse>}
     */
  }, {
    key: "getCallToken",
    value: function() {
      var _getCallToken = _asyncToGenerator(import_regenerator.default.mark(function _callee47(callID) {
        var options, _args47 = arguments;
        return import_regenerator.default.wrap(function _callee47$(_context47) {
          while (1) {
            switch (_context47.prev = _context47.next) {
              case 0:
                options = _args47.length > 1 && _args47[1] !== void 0 ? _args47[1] : {};
                _context47.next = 3;
                return this.post(this.baseURL + "/calls/".concat(callID), _objectSpread({}, options));
              case 3:
                return _context47.abrupt("return", _context47.sent);
              case 4:
              case "end":
                return _context47.stop();
            }
          }
        }, _callee47, this);
      }));
      function getCallToken(_x61) {
        return _getCallToken.apply(this, arguments);
      }
      return getCallToken;
    }()
    /**
     * _queryFlags - Query flags.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {FlagsFilters} filterConditions MongoDB style filter conditions
     * @param {FlagsPaginationOptions} options Option object, {limit: 10, offset:0}
     *
     * @return {Promise<FlagsResponse<StreamChatGenerics>>} Flags Response
     */
  }, {
    key: "_queryFlags",
    value: function() {
      var _queryFlags2 = _asyncToGenerator(import_regenerator.default.mark(function _callee48() {
        var filterConditions, options, _args48 = arguments;
        return import_regenerator.default.wrap(function _callee48$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
                filterConditions = _args48.length > 0 && _args48[0] !== void 0 ? _args48[0] : {};
                options = _args48.length > 1 && _args48[1] !== void 0 ? _args48[1] : {};
                _context48.next = 4;
                return this.post(this.baseURL + "/moderation/flags", _objectSpread({
                  filter_conditions: filterConditions
                }, options));
              case 4:
                return _context48.abrupt("return", _context48.sent);
              case 5:
              case "end":
                return _context48.stop();
            }
          }
        }, _callee48, this);
      }));
      function _queryFlags() {
        return _queryFlags2.apply(this, arguments);
      }
      return _queryFlags;
    }()
    /**
     * _queryFlagReports - Query flag reports.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {FlagReportsFilters} filterConditions MongoDB style filter conditions
     * @param {FlagReportsPaginationOptions} options Option object, {limit: 10, offset:0}
     *
     * @return {Promise<FlagReportsResponse<StreamChatGenerics>>} Flag Reports Response
     */
  }, {
    key: "_queryFlagReports",
    value: function() {
      var _queryFlagReports2 = _asyncToGenerator(import_regenerator.default.mark(function _callee49() {
        var filterConditions, options, _args49 = arguments;
        return import_regenerator.default.wrap(function _callee49$(_context49) {
          while (1) {
            switch (_context49.prev = _context49.next) {
              case 0:
                filterConditions = _args49.length > 0 && _args49[0] !== void 0 ? _args49[0] : {};
                options = _args49.length > 1 && _args49[1] !== void 0 ? _args49[1] : {};
                _context49.next = 4;
                return this.post(this.baseURL + "/moderation/reports", _objectSpread({
                  filter_conditions: filterConditions
                }, options));
              case 4:
                return _context49.abrupt("return", _context49.sent);
              case 5:
              case "end":
                return _context49.stop();
            }
          }
        }, _callee49, this);
      }));
      function _queryFlagReports() {
        return _queryFlagReports2.apply(this, arguments);
      }
      return _queryFlagReports;
    }()
    /**
     * _reviewFlagReport - review flag report
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {string} [id] flag report to review
     * @param {string} [reviewResult] flag report review result
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @param {string} [options.review_details] custom information about review result
     * @returns {Promise<ReviewFlagReportResponse>>}
     */
  }, {
    key: "_reviewFlagReport",
    value: function() {
      var _reviewFlagReport2 = _asyncToGenerator(import_regenerator.default.mark(function _callee50(id, reviewResult) {
        var options, _args50 = arguments;
        return import_regenerator.default.wrap(function _callee50$(_context50) {
          while (1) {
            switch (_context50.prev = _context50.next) {
              case 0:
                options = _args50.length > 2 && _args50[2] !== void 0 ? _args50[2] : {};
                _context50.next = 3;
                return this.patch(this.baseURL + "/moderation/reports/".concat(id), _objectSpread({
                  review_result: reviewResult
                }, options));
              case 3:
                return _context50.abrupt("return", _context50.sent);
              case 4:
              case "end":
                return _context50.stop();
            }
          }
        }, _callee50, this);
      }));
      function _reviewFlagReport(_x62, _x63) {
        return _reviewFlagReport2.apply(this, arguments);
      }
      return _reviewFlagReport;
    }()
    /**
     * unblockMessage - unblocks message blocked by automod
     *
     *
     * @param {string} targetMessageID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "unblockMessage",
    value: function() {
      var _unblockMessage = _asyncToGenerator(import_regenerator.default.mark(function _callee51(targetMessageID) {
        var options, _args51 = arguments;
        return import_regenerator.default.wrap(function _callee51$(_context51) {
          while (1) {
            switch (_context51.prev = _context51.next) {
              case 0:
                options = _args51.length > 1 && _args51[1] !== void 0 ? _args51[1] : {};
                _context51.next = 3;
                return this.post(this.baseURL + "/moderation/unblock_message", _objectSpread({
                  target_message_id: targetMessageID
                }, options));
              case 3:
                return _context51.abrupt("return", _context51.sent);
              case 4:
              case "end":
                return _context51.stop();
            }
          }
        }, _callee51, this);
      }));
      function unblockMessage(_x64) {
        return _unblockMessage.apply(this, arguments);
      }
      return unblockMessage;
    }()
    // alias for backwards compatibility
  }, {
    key: "markChannelsRead",
    value: (
      /**
       * markChannelsRead - marks channels read -
       * it accepts a map of cid:messageid pairs, if messageid is empty, the whole channel will be marked as read
       *
       * @param {MarkChannelsReadOptions <StreamChatGenerics>} [data]
       *
       * @return {Promise<APIResponse>}
       */
      function() {
        var _markChannelsRead = _asyncToGenerator(import_regenerator.default.mark(function _callee52() {
          var data, _args52 = arguments;
          return import_regenerator.default.wrap(function _callee52$(_context52) {
            while (1) {
              switch (_context52.prev = _context52.next) {
                case 0:
                  data = _args52.length > 0 && _args52[0] !== void 0 ? _args52[0] : {};
                  _context52.next = 3;
                  return this.post(this.baseURL + "/channels/read", _objectSpread({}, data));
                case 3:
                case "end":
                  return _context52.stop();
              }
            }
          }, _callee52, this);
        }));
        function markChannelsRead() {
          return _markChannelsRead.apply(this, arguments);
        }
        return markChannelsRead;
      }()
    )
  }, {
    key: "createCommand",
    value: function createCommand(data) {
      return this.post(this.baseURL + "/commands", data);
    }
  }, {
    key: "getCommand",
    value: function getCommand(name) {
      return this.get(this.baseURL + "/commands/".concat(name));
    }
  }, {
    key: "updateCommand",
    value: function updateCommand(name, data) {
      return this.put(this.baseURL + "/commands/".concat(name), data);
    }
  }, {
    key: "deleteCommand",
    value: function deleteCommand(name) {
      return this.delete(this.baseURL + "/commands/".concat(name));
    }
  }, {
    key: "listCommands",
    value: function listCommands() {
      return this.get(this.baseURL + "/commands");
    }
  }, {
    key: "createChannelType",
    value: function createChannelType(data) {
      var channelData = _extends({}, {
        commands: ["all"]
      }, data);
      return this.post(this.baseURL + "/channeltypes", channelData);
    }
  }, {
    key: "getChannelType",
    value: function getChannelType(channelType) {
      return this.get(this.baseURL + "/channeltypes/".concat(channelType));
    }
  }, {
    key: "updateChannelType",
    value: function updateChannelType(channelType, data) {
      return this.put(this.baseURL + "/channeltypes/".concat(channelType), data);
    }
  }, {
    key: "deleteChannelType",
    value: function deleteChannelType(channelType) {
      return this.delete(this.baseURL + "/channeltypes/".concat(channelType));
    }
  }, {
    key: "listChannelTypes",
    value: function listChannelTypes() {
      return this.get(this.baseURL + "/channeltypes");
    }
    /**
     * translateMessage - adds the translation to the message
     *
     * @param {string} messageId
     * @param {string} language
     *
     * @return {MessageResponse<StreamChatGenerics>} Response that includes the message
     */
  }, {
    key: "translateMessage",
    value: function() {
      var _translateMessage = _asyncToGenerator(import_regenerator.default.mark(function _callee53(messageId, language) {
        return import_regenerator.default.wrap(function _callee53$(_context53) {
          while (1) {
            switch (_context53.prev = _context53.next) {
              case 0:
                _context53.next = 2;
                return this.post(this.baseURL + "/messages/".concat(messageId, "/translate"), {
                  language
                });
              case 2:
                return _context53.abrupt("return", _context53.sent);
              case 3:
              case "end":
                return _context53.stop();
            }
          }
        }, _callee53, this);
      }));
      function translateMessage(_x65, _x66) {
        return _translateMessage.apply(this, arguments);
      }
      return translateMessage;
    }()
    /**
     * _normalizeExpiration - transforms expiration value into ISO string
     * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date
     */
  }, {
    key: "_normalizeExpiration",
    value: function _normalizeExpiration(timeoutOrExpirationDate) {
      var pinExpires = null;
      if (typeof timeoutOrExpirationDate === "number") {
        var now = /* @__PURE__ */ new Date();
        now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);
        pinExpires = now.toISOString();
      } else if (isString2(timeoutOrExpirationDate)) {
        pinExpires = timeoutOrExpirationDate;
      } else if (timeoutOrExpirationDate instanceof Date) {
        pinExpires = timeoutOrExpirationDate.toISOString();
      }
      return pinExpires;
    }
    /**
     * _messageId - extracts string message id from either message object or message id
     * @param {string | { id: string }} messageOrMessageId message object or message id
     * @param {string} errorText error message to report in case of message id absence
     */
  }, {
    key: "_validateAndGetMessageId",
    value: function _validateAndGetMessageId(messageOrMessageId, errorText) {
      var messageId;
      if (typeof messageOrMessageId === "string") {
        messageId = messageOrMessageId;
      } else {
        if (!messageOrMessageId.id) {
          throw Error(errorText);
        }
        messageId = messageOrMessageId.id;
      }
      return messageId;
    }
    /**
     * pinMessage - pins the message
     * @param {string | { id: string }} messageOrMessageId message object or message id
     * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date
     * @param {undefined|string | { id: string }} [pinnedBy] who will appear as a user who pinned a message. Only for server-side use. Provide `undefined` when pinning message client-side
     * @param {undefined|number|string|Date} pinnedAt date when message should be pinned. It affects the order of pinned messages. Use negative number to set relative time in the past, string or Date to set exact date of pin
     */
  }, {
    key: "pinMessage",
    value: function pinMessage(messageOrMessageId, timeoutOrExpirationDate, pinnedBy, pinnedAt) {
      var messageId = this._validateAndGetMessageId(messageOrMessageId, "Please specify the message id when calling unpinMessage");
      return this.partialUpdateMessage(messageId, {
        set: {
          pinned: true,
          pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),
          pinned_at: this._normalizeExpiration(pinnedAt)
        }
      }, pinnedBy);
    }
    /**
     * unpinMessage - unpins the message that was previously pinned
     * @param {string | { id: string }} messageOrMessageId message object or message id
     * @param {string | { id: string }} [userId]
     */
  }, {
    key: "unpinMessage",
    value: function unpinMessage(messageOrMessageId, userId) {
      var messageId = this._validateAndGetMessageId(messageOrMessageId, "Please specify the message id when calling unpinMessage");
      return this.partialUpdateMessage(messageId, {
        set: {
          pinned: false
        }
      }, userId);
    }
    /**
     * updateMessage - Update the given message
     *
     * @param {Omit<MessageResponse<StreamChatGenerics>, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified
     * @param {string | { id: string }} [userId]
     * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message
     *
     * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the message
     */
  }, {
    key: "updateMessage",
    value: function() {
      var _updateMessage = _asyncToGenerator(import_regenerator.default.mark(function _callee54(message, userId, options) {
        var clonedMessage, reservedMessageFields;
        return import_regenerator.default.wrap(function _callee54$(_context54) {
          while (1) {
            switch (_context54.prev = _context54.next) {
              case 0:
                if (message.id) {
                  _context54.next = 2;
                  break;
                }
                throw Error("Please specify the message id when calling updateMessage");
              case 2:
                clonedMessage = _extends({}, message);
                delete clonedMessage.id;
                reservedMessageFields = ["command", "created_at", "html", "latest_reactions", "own_reactions", "quoted_message", "reaction_counts", "reply_count", "type", "updated_at", "user", "__html"];
                reservedMessageFields.forEach(function(item) {
                  if (clonedMessage[item] != null) {
                    delete clonedMessage[item];
                  }
                });
                if (userId != null) {
                  if (isString2(userId)) {
                    clonedMessage.user_id = userId;
                  } else {
                    clonedMessage.user = {
                      id: userId.id
                    };
                  }
                }
                if (Array.isArray(clonedMessage.mentioned_users) && !isString2(clonedMessage.mentioned_users[0])) {
                  clonedMessage.mentioned_users = clonedMessage.mentioned_users.map(function(mu) {
                    return mu.id;
                  });
                }
                _context54.next = 10;
                return this.post(this.baseURL + "/messages/".concat(message.id), _objectSpread({
                  message: clonedMessage
                }, options));
              case 10:
                return _context54.abrupt("return", _context54.sent);
              case 11:
              case "end":
                return _context54.stop();
            }
          }
        }, _callee54, this);
      }));
      function updateMessage(_x67, _x68, _x69) {
        return _updateMessage.apply(this, arguments);
      }
      return updateMessage;
    }()
    /**
     * partialUpdateMessage - Update the given message id while retaining additional properties
     *
     * @param {string} id the message id
     *
     * @param {PartialUpdateMessage<StreamChatGenerics>}  partialMessageObject which should contain id and any of "set" or "unset" params;
     *         example: {id: "user1", set:{text: "hi"}, unset:["color"]}
     * @param {string | { id: string }} [userId]
     *
     * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message
     *
     * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the updated message
     */
  }, {
    key: "partialUpdateMessage",
    value: function() {
      var _partialUpdateMessage = _asyncToGenerator(import_regenerator.default.mark(function _callee55(id, partialMessageObject, userId, options) {
        var user;
        return import_regenerator.default.wrap(function _callee55$(_context55) {
          while (1) {
            switch (_context55.prev = _context55.next) {
              case 0:
                if (id) {
                  _context55.next = 2;
                  break;
                }
                throw Error("Please specify the message id when calling partialUpdateMessage");
              case 2:
                user = userId;
                if (userId != null && isString2(userId)) {
                  user = {
                    id: userId
                  };
                }
                _context55.next = 6;
                return this.put(this.baseURL + "/messages/".concat(id), _objectSpread(_objectSpread(_objectSpread({}, partialMessageObject), options), {}, {
                  user
                }));
              case 6:
                return _context55.abrupt("return", _context55.sent);
              case 7:
              case "end":
                return _context55.stop();
            }
          }
        }, _callee55, this);
      }));
      function partialUpdateMessage(_x70, _x71, _x72, _x73) {
        return _partialUpdateMessage.apply(this, arguments);
      }
      return partialUpdateMessage;
    }()
  }, {
    key: "deleteMessage",
    value: function() {
      var _deleteMessage = _asyncToGenerator(import_regenerator.default.mark(function _callee56(messageID, hardDelete) {
        var params;
        return import_regenerator.default.wrap(function _callee56$(_context56) {
          while (1) {
            switch (_context56.prev = _context56.next) {
              case 0:
                params = {};
                if (hardDelete) {
                  params = {
                    hard: true
                  };
                }
                _context56.next = 4;
                return this.delete(this.baseURL + "/messages/".concat(messageID), params);
              case 4:
                return _context56.abrupt("return", _context56.sent);
              case 5:
              case "end":
                return _context56.stop();
            }
          }
        }, _callee56, this);
      }));
      function deleteMessage(_x74, _x75) {
        return _deleteMessage.apply(this, arguments);
      }
      return deleteMessage;
    }()
  }, {
    key: "getMessage",
    value: function() {
      var _getMessage = _asyncToGenerator(import_regenerator.default.mark(function _callee57(messageID) {
        return import_regenerator.default.wrap(function _callee57$(_context57) {
          while (1) {
            switch (_context57.prev = _context57.next) {
              case 0:
                _context57.next = 2;
                return this.get(this.baseURL + "/messages/".concat(encodeURIComponent(messageID)));
              case 2:
                return _context57.abrupt("return", _context57.sent);
              case 3:
              case "end":
                return _context57.stop();
            }
          }
        }, _callee57, this);
      }));
      function getMessage(_x76) {
        return _getMessage.apply(this, arguments);
      }
      return getMessage;
    }()
  }, {
    key: "getUserAgent",
    value: function getUserAgent() {
      return this.userAgent || "stream-chat-javascript-client-".concat(this.node ? "node" : "browser", "-", "8.14.5");
    }
  }, {
    key: "setUserAgent",
    value: function setUserAgent(userAgent) {
      this.userAgent = userAgent;
    }
    /**
     * _isUsingServerAuth - Returns true if we're using server side auth
     */
  }, {
    key: "_enrichAxiosOptions",
    value: function _enrichAxiosOptions() {
      var _options$headers;
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        params: {},
        headers: {},
        config: {}
      };
      var token = this._getToken();
      var authorization = token ? {
        Authorization: token
      } : void 0;
      var signal = null;
      if (this.nextRequestAbortController !== null) {
        signal = this.nextRequestAbortController.signal;
        this.nextRequestAbortController = null;
      }
      if (!((_options$headers = options.headers) !== null && _options$headers !== void 0 && _options$headers["x-client-request-id"])) {
        options.headers = _objectSpread(_objectSpread({}, options.headers), {}, {
          "x-client-request-id": randomId()
        });
      }
      var _ref9 = this.options.axiosRequestConfig || {}, axiosRequestConfigParams = _ref9.params, axiosRequestConfigHeaders = _ref9.headers, axiosRequestConfigRest = _objectWithoutProperties(_ref9, _excluded2);
      return _objectSpread(_objectSpread(_objectSpread({
        params: _objectSpread(_objectSpread({
          user_id: this.userID,
          connection_id: this._getConnectionID(),
          api_key: this.key
        }, options.params), axiosRequestConfigParams || {}),
        headers: _objectSpread(_objectSpread(_objectSpread({}, authorization), {}, {
          "stream-auth-type": this.getAuthType(),
          "X-Stream-Client": this.getUserAgent()
        }, options.headers), axiosRequestConfigHeaders || {})
      }, signal ? {
        signal
      } : {}), options.config), axiosRequestConfigRest || {});
    }
  }, {
    key: "_getToken",
    value: function _getToken() {
      if (!this.tokenManager || this.anonymous)
        return null;
      return this.tokenManager.getToken();
    }
  }, {
    key: "_startCleaning",
    value: function _startCleaning() {
      var that = this;
      if (this.cleaningIntervalRef != null) {
        return;
      }
      this.cleaningIntervalRef = setInterval(function() {
        for (var _i3 = 0, _Object$values2 = Object.values(that.activeChannels); _i3 < _Object$values2.length; _i3++) {
          var _channel7 = _Object$values2[_i3];
          _channel7.clean();
        }
      }, 500);
    }
    /**
     * encode ws url payload
     * @private
     * @returns json string
     */
  }, {
    key: "verifyWebhook",
    value: (
      /**
       * checks signature of a request
       * @param {string | Buffer} rawBody
       * @param {string} signature from HTTP header
       * @returns {boolean}
       */
      function verifyWebhook(requestBody, xSignature) {
        return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);
      }
    )
    /** getPermission - gets the definition for a permission
     *
     * @param {string} name
     * @returns {Promise<PermissionAPIResponse>}
     */
  }, {
    key: "getPermission",
    value: function getPermission(name) {
      return this.get("".concat(this.baseURL, "/permissions/").concat(name));
    }
    /** createPermission - creates a custom permission
     *
     * @param {CustomPermissionOptions} permissionData the permission data
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "createPermission",
    value: function createPermission(permissionData) {
      return this.post("".concat(this.baseURL, "/permissions"), _objectSpread({}, permissionData));
    }
    /** updatePermission - updates an existing custom permission
     *
     * @param {string} id
     * @param {Omit<CustomPermissionOptions, 'id'>} permissionData the permission data
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "updatePermission",
    value: function updatePermission(id, permissionData) {
      return this.put("".concat(this.baseURL, "/permissions/").concat(id), _objectSpread({}, permissionData));
    }
    /** deletePermission - deletes a custom permission
     *
     * @param {string} name
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "deletePermission",
    value: function deletePermission(name) {
      return this.delete("".concat(this.baseURL, "/permissions/").concat(name));
    }
    /** listPermissions - returns the list of all permissions for this application
     *
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "listPermissions",
    value: function listPermissions() {
      return this.get("".concat(this.baseURL, "/permissions"));
    }
    /** createRole - creates a custom role
     *
     * @param {string} name the new role name
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "createRole",
    value: function createRole(name) {
      return this.post("".concat(this.baseURL, "/roles"), {
        name
      });
    }
    /** listRoles - returns the list of all roles for this application
     *
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "listRoles",
    value: function listRoles() {
      return this.get("".concat(this.baseURL, "/roles"));
    }
    /** deleteRole - deletes a custom role
     *
     * @param {string} name the role name
     * @returns {Promise<APIResponse>}
     */
  }, {
    key: "deleteRole",
    value: function deleteRole(name) {
      return this.delete("".concat(this.baseURL, "/roles/").concat(name));
    }
    /** sync - returns all events that happened for a list of channels since last sync
     * @param {string[]} channel_cids list of channel CIDs
     * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. "2020-05-06T15:05:01.207Z"
     * @param {SyncOptions} options See JSDoc in the type fields for more info
     *
     * @returns {Promise<SyncResponse>}
     */
  }, {
    key: "sync",
    value: function sync(channel_cids, last_sync_at) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return this.post("".concat(this.baseURL, "/sync"), _objectSpread({
        channel_cids,
        last_sync_at
      }, options));
    }
    /**
     * sendUserCustomEvent - Send a custom event to a user
     *
     * @param {string} targetUserID target user id
     * @param {UserCustomEvent} event for example {type: 'friendship-request'}
     *
     * @return {Promise<APIResponse>} The Server Response
     */
  }, {
    key: "sendUserCustomEvent",
    value: function() {
      var _sendUserCustomEvent = _asyncToGenerator(import_regenerator.default.mark(function _callee58(targetUserID, event) {
        return import_regenerator.default.wrap(function _callee58$(_context58) {
          while (1) {
            switch (_context58.prev = _context58.next) {
              case 0:
                _context58.next = 2;
                return this.post("".concat(this.baseURL, "/users/").concat(targetUserID, "/event"), {
                  event
                });
              case 2:
                return _context58.abrupt("return", _context58.sent);
              case 3:
              case "end":
                return _context58.stop();
            }
          }
        }, _callee58, this);
      }));
      function sendUserCustomEvent(_x77, _x78) {
        return _sendUserCustomEvent.apply(this, arguments);
      }
      return sendUserCustomEvent;
    }()
  }, {
    key: "createBlockList",
    value: function createBlockList(blockList) {
      return this.post("".concat(this.baseURL, "/blocklists"), blockList);
    }
  }, {
    key: "listBlockLists",
    value: function listBlockLists() {
      return this.get("".concat(this.baseURL, "/blocklists"));
    }
  }, {
    key: "getBlockList",
    value: function getBlockList(name) {
      return this.get("".concat(this.baseURL, "/blocklists/").concat(name));
    }
  }, {
    key: "updateBlockList",
    value: function updateBlockList(name, data) {
      return this.put("".concat(this.baseURL, "/blocklists/").concat(name), data);
    }
  }, {
    key: "deleteBlockList",
    value: function deleteBlockList(name) {
      return this.delete("".concat(this.baseURL, "/blocklists/").concat(name));
    }
  }, {
    key: "exportChannels",
    value: function exportChannels(request) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var payload = _objectSpread({
        channels: request
      }, options);
      return this.post("".concat(this.baseURL, "/export_channels"), payload);
    }
  }, {
    key: "exportUsers",
    value: function exportUsers(request) {
      return this.post("".concat(this.baseURL, "/export/users"), request);
    }
  }, {
    key: "exportChannel",
    value: function exportChannel(request, options) {
      return this.exportChannels([request], options);
    }
  }, {
    key: "getExportChannelStatus",
    value: function getExportChannelStatus(id) {
      return this.get("".concat(this.baseURL, "/export_channels/").concat(id));
    }
    /**
     * createSegment - Creates a Campaign Segment
     *
     * @param {SegmentData} params Segment data
     *
     * @return {Segment} The Created Segment
     */
  }, {
    key: "createSegment",
    value: function() {
      var _createSegment = _asyncToGenerator(import_regenerator.default.mark(function _callee59(params) {
        var _yield$this$post, segment;
        return import_regenerator.default.wrap(function _callee59$(_context59) {
          while (1) {
            switch (_context59.prev = _context59.next) {
              case 0:
                _context59.next = 2;
                return this.post(this.baseURL + "/segments", {
                  segment: params
                });
              case 2:
                _yield$this$post = _context59.sent;
                segment = _yield$this$post.segment;
                return _context59.abrupt("return", segment);
              case 5:
              case "end":
                return _context59.stop();
            }
          }
        }, _callee59, this);
      }));
      function createSegment(_x79) {
        return _createSegment.apply(this, arguments);
      }
      return createSegment;
    }()
    /**
     * querySegments - Query Campaign Segments
     *
     *
     * @return {Segment[]} Segments
     */
  }, {
    key: "querySegments",
    value: function() {
      var _querySegments = _asyncToGenerator(import_regenerator.default.mark(function _callee60(filters) {
        var options, _args60 = arguments;
        return import_regenerator.default.wrap(function _callee60$(_context60) {
          while (1) {
            switch (_context60.prev = _context60.next) {
              case 0:
                options = _args60.length > 1 && _args60[1] !== void 0 ? _args60[1] : {};
                _context60.next = 3;
                return this.get(this.baseURL + "/segments", {
                  payload: _objectSpread({
                    filter_conditions: filters
                  }, options)
                });
              case 3:
                return _context60.abrupt("return", _context60.sent);
              case 4:
              case "end":
                return _context60.stop();
            }
          }
        }, _callee60, this);
      }));
      function querySegments(_x80) {
        return _querySegments.apply(this, arguments);
      }
      return querySegments;
    }()
    /**
     * updateSegment - Update a Campaign Segment
     *
     * @param {string} id Segment ID
     * @param {Partial<SegmentData>} params Segment data
     *
     * @return {Segment} Updated Segment
     */
  }, {
    key: "updateSegment",
    value: function() {
      var _updateSegment = _asyncToGenerator(import_regenerator.default.mark(function _callee61(id, params) {
        var _yield$this$put, segment;
        return import_regenerator.default.wrap(function _callee61$(_context61) {
          while (1) {
            switch (_context61.prev = _context61.next) {
              case 0:
                _context61.next = 2;
                return this.put(this.baseURL + "/segments/".concat(id), {
                  segment: params
                });
              case 2:
                _yield$this$put = _context61.sent;
                segment = _yield$this$put.segment;
                return _context61.abrupt("return", segment);
              case 5:
              case "end":
                return _context61.stop();
            }
          }
        }, _callee61, this);
      }));
      function updateSegment(_x81, _x82) {
        return _updateSegment.apply(this, arguments);
      }
      return updateSegment;
    }()
    /**
     * deleteSegment - Delete a Campaign Segment
     *
     * @param {string} id Segment ID
     *
     * @return {Promise<APIResponse>} The Server Response
     */
  }, {
    key: "deleteSegment",
    value: function() {
      var _deleteSegment = _asyncToGenerator(import_regenerator.default.mark(function _callee62(id) {
        return import_regenerator.default.wrap(function _callee62$(_context62) {
          while (1) {
            switch (_context62.prev = _context62.next) {
              case 0:
                return _context62.abrupt("return", this.delete(this.baseURL + "/segments/".concat(id)));
              case 1:
              case "end":
                return _context62.stop();
            }
          }
        }, _callee62, this);
      }));
      function deleteSegment(_x83) {
        return _deleteSegment.apply(this, arguments);
      }
      return deleteSegment;
    }()
    /**
     * createCampaign - Creates a Campaign
     *
     * @param {CampaignData} params Campaign data
     *
     * @return {Campaign} The Created Campaign
     */
  }, {
    key: "createCampaign",
    value: function() {
      var _createCampaign = _asyncToGenerator(import_regenerator.default.mark(function _callee63(params) {
        var _yield$this$post2, campaign;
        return import_regenerator.default.wrap(function _callee63$(_context63) {
          while (1) {
            switch (_context63.prev = _context63.next) {
              case 0:
                _context63.next = 2;
                return this.post(this.baseURL + "/campaigns", {
                  campaign: params
                });
              case 2:
                _yield$this$post2 = _context63.sent;
                campaign = _yield$this$post2.campaign;
                return _context63.abrupt("return", campaign);
              case 5:
              case "end":
                return _context63.stop();
            }
          }
        }, _callee63, this);
      }));
      function createCampaign(_x84) {
        return _createCampaign.apply(this, arguments);
      }
      return createCampaign;
    }()
    /**
     * queryCampaigns - Query Campaigns
     *
     *
     * @return {Campaign[]} Campaigns
     */
  }, {
    key: "queryCampaigns",
    value: function() {
      var _queryCampaigns = _asyncToGenerator(import_regenerator.default.mark(function _callee64(filters) {
        var options, _args64 = arguments;
        return import_regenerator.default.wrap(function _callee64$(_context64) {
          while (1) {
            switch (_context64.prev = _context64.next) {
              case 0:
                options = _args64.length > 1 && _args64[1] !== void 0 ? _args64[1] : {};
                _context64.next = 3;
                return this.get(this.baseURL + "/campaigns", {
                  payload: _objectSpread({
                    filter_conditions: filters
                  }, options)
                });
              case 3:
                return _context64.abrupt("return", _context64.sent);
              case 4:
              case "end":
                return _context64.stop();
            }
          }
        }, _callee64, this);
      }));
      function queryCampaigns(_x85) {
        return _queryCampaigns.apply(this, arguments);
      }
      return queryCampaigns;
    }()
    /**
     * updateCampaign - Update a Campaign
     *
     * @param {string} id Campaign ID
     * @param {Partial<CampaignData>} params Campaign data
     *
     * @return {Campaign} Updated Campaign
     */
  }, {
    key: "updateCampaign",
    value: function() {
      var _updateCampaign = _asyncToGenerator(import_regenerator.default.mark(function _callee65(id, params) {
        var _yield$this$put2, campaign;
        return import_regenerator.default.wrap(function _callee65$(_context65) {
          while (1) {
            switch (_context65.prev = _context65.next) {
              case 0:
                _context65.next = 2;
                return this.put(this.baseURL + "/campaigns/".concat(id), {
                  campaign: params
                });
              case 2:
                _yield$this$put2 = _context65.sent;
                campaign = _yield$this$put2.campaign;
                return _context65.abrupt("return", campaign);
              case 5:
              case "end":
                return _context65.stop();
            }
          }
        }, _callee65, this);
      }));
      function updateCampaign(_x86, _x87) {
        return _updateCampaign.apply(this, arguments);
      }
      return updateCampaign;
    }()
    /**
     * deleteCampaign - Delete a Campaign
     *
     * @param {string} id Campaign ID
     *
     * @return {Promise<APIResponse>} The Server Response
     */
  }, {
    key: "deleteCampaign",
    value: function() {
      var _deleteCampaign = _asyncToGenerator(import_regenerator.default.mark(function _callee66(id) {
        var params, _args66 = arguments;
        return import_regenerator.default.wrap(function _callee66$(_context66) {
          while (1) {
            switch (_context66.prev = _context66.next) {
              case 0:
                params = _args66.length > 1 && _args66[1] !== void 0 ? _args66[1] : {};
                return _context66.abrupt("return", this.delete(this.baseURL + "/campaigns/".concat(id), params));
              case 2:
              case "end":
                return _context66.stop();
            }
          }
        }, _callee66, this);
      }));
      function deleteCampaign(_x88) {
        return _deleteCampaign.apply(this, arguments);
      }
      return deleteCampaign;
    }()
    /**
     * scheduleCampaign - Schedule a Campaign
     *
     * @param {string} id Campaign ID
     * @param {{scheduledFor: number}} params Schedule params
     *
     * @return {Campaign} Scheduled Campaign
     */
  }, {
    key: "scheduleCampaign",
    value: function() {
      var _scheduleCampaign = _asyncToGenerator(import_regenerator.default.mark(function _callee67(id, params) {
        var scheduledFor, _yield$this$patch, campaign;
        return import_regenerator.default.wrap(function _callee67$(_context67) {
          while (1) {
            switch (_context67.prev = _context67.next) {
              case 0:
                scheduledFor = params.scheduledFor;
                _context67.next = 3;
                return this.patch(this.baseURL + "/campaigns/".concat(id, "/schedule"), {
                  scheduled_for: scheduledFor
                });
              case 3:
                _yield$this$patch = _context67.sent;
                campaign = _yield$this$patch.campaign;
                return _context67.abrupt("return", campaign);
              case 6:
              case "end":
                return _context67.stop();
            }
          }
        }, _callee67, this);
      }));
      function scheduleCampaign(_x89, _x90) {
        return _scheduleCampaign.apply(this, arguments);
      }
      return scheduleCampaign;
    }()
    /**
     * stopCampaign - Stop a Campaign
     *
     * @param {string} id Campaign ID
     *
     * @return {Campaign} Stopped Campaign
     */
  }, {
    key: "stopCampaign",
    value: function() {
      var _stopCampaign = _asyncToGenerator(import_regenerator.default.mark(function _callee68(id) {
        var _yield$this$patch2, campaign;
        return import_regenerator.default.wrap(function _callee68$(_context68) {
          while (1) {
            switch (_context68.prev = _context68.next) {
              case 0:
                _context68.next = 2;
                return this.patch(this.baseURL + "/campaigns/".concat(id, "/stop"));
              case 2:
                _yield$this$patch2 = _context68.sent;
                campaign = _yield$this$patch2.campaign;
                return _context68.abrupt("return", campaign);
              case 5:
              case "end":
                return _context68.stop();
            }
          }
        }, _callee68, this);
      }));
      function stopCampaign(_x91) {
        return _stopCampaign.apply(this, arguments);
      }
      return stopCampaign;
    }()
    /**
     * resumeCampaign - Resume a Campaign
     *
     * @param {string} id Campaign ID
     *
     * @return {Campaign} Resumed Campaign
     */
  }, {
    key: "resumeCampaign",
    value: function() {
      var _resumeCampaign = _asyncToGenerator(import_regenerator.default.mark(function _callee69(id) {
        var _yield$this$patch3, campaign;
        return import_regenerator.default.wrap(function _callee69$(_context69) {
          while (1) {
            switch (_context69.prev = _context69.next) {
              case 0:
                _context69.next = 2;
                return this.patch(this.baseURL + "/campaigns/".concat(id, "/resume"));
              case 2:
                _yield$this$patch3 = _context69.sent;
                campaign = _yield$this$patch3.campaign;
                return _context69.abrupt("return", campaign);
              case 5:
              case "end":
                return _context69.stop();
            }
          }
        }, _callee69, this);
      }));
      function resumeCampaign(_x92) {
        return _resumeCampaign.apply(this, arguments);
      }
      return resumeCampaign;
    }()
    /**
     * testCampaign - Test a Campaign
     *
     * @param {string} id Campaign ID
     * @param {{users: string[]}} params Test params
     *
     * @return {TestCampaignResponse} Test campaign response
     */
  }, {
    key: "testCampaign",
    value: function() {
      var _testCampaign = _asyncToGenerator(import_regenerator.default.mark(function _callee70(id, params) {
        var users;
        return import_regenerator.default.wrap(function _callee70$(_context70) {
          while (1) {
            switch (_context70.prev = _context70.next) {
              case 0:
                users = params.users;
                _context70.next = 3;
                return this.post(this.baseURL + "/campaigns/".concat(id, "/test"), {
                  users
                });
              case 3:
                return _context70.abrupt("return", _context70.sent);
              case 4:
              case "end":
                return _context70.stop();
            }
          }
        }, _callee70, this);
      }));
      function testCampaign(_x93, _x94) {
        return _testCampaign.apply(this, arguments);
      }
      return testCampaign;
    }()
    /**
     * queryRecipients - Query Campaign Recipient Results
     *
     *
     * @return {Recipient[]} Recipients
     */
  }, {
    key: "queryRecipients",
    value: function() {
      var _queryRecipients = _asyncToGenerator(import_regenerator.default.mark(function _callee71(filters) {
        var options, _args71 = arguments;
        return import_regenerator.default.wrap(function _callee71$(_context71) {
          while (1) {
            switch (_context71.prev = _context71.next) {
              case 0:
                options = _args71.length > 1 && _args71[1] !== void 0 ? _args71[1] : {};
                _context71.next = 3;
                return this.get(this.baseURL + "/recipients", {
                  payload: _objectSpread({
                    filter_conditions: filters
                  }, options)
                });
              case 3:
                return _context71.abrupt("return", _context71.sent);
              case 4:
              case "end":
                return _context71.stop();
            }
          }
        }, _callee71, this);
      }));
      function queryRecipients(_x95) {
        return _queryRecipients.apply(this, arguments);
      }
      return queryRecipients;
    }()
    /**
     * enrichURL - Get OpenGraph data of the given link
     *
     * @param {string} url link
     * @return {OGAttachment} OG Attachment
     */
  }, {
    key: "enrichURL",
    value: function() {
      var _enrichURL = _asyncToGenerator(import_regenerator.default.mark(function _callee72(url) {
        return import_regenerator.default.wrap(function _callee72$(_context72) {
          while (1) {
            switch (_context72.prev = _context72.next) {
              case 0:
                return _context72.abrupt("return", this.get(this.baseURL + "/og", {
                  url
                }));
              case 1:
              case "end":
                return _context72.stop();
            }
          }
        }, _callee72, this);
      }));
      function enrichURL(_x96) {
        return _enrichURL.apply(this, arguments);
      }
      return enrichURL;
    }()
    /**
     * getTask - Gets status of a long running task
     *
     * @param {string} id Task ID
     *
     * @return {TaskStatus} The task status
     */
  }, {
    key: "getTask",
    value: function() {
      var _getTask = _asyncToGenerator(import_regenerator.default.mark(function _callee73(id) {
        return import_regenerator.default.wrap(function _callee73$(_context73) {
          while (1) {
            switch (_context73.prev = _context73.next) {
              case 0:
                return _context73.abrupt("return", this.get("".concat(this.baseURL, "/tasks/").concat(id)));
              case 1:
              case "end":
                return _context73.stop();
            }
          }
        }, _callee73, this);
      }));
      function getTask(_x97) {
        return _getTask.apply(this, arguments);
      }
      return getTask;
    }()
    /**
     * deleteChannels - Deletes a list of channel
     *
     * @param {string[]} cids Channel CIDs
     * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not
     *
     * @return {DeleteChannelsResponse} Result of the soft deletion, if server-side, it holds the task ID as well
     */
  }, {
    key: "deleteChannels",
    value: function() {
      var _deleteChannels = _asyncToGenerator(import_regenerator.default.mark(function _callee74(cids) {
        var options, _args74 = arguments;
        return import_regenerator.default.wrap(function _callee74$(_context74) {
          while (1) {
            switch (_context74.prev = _context74.next) {
              case 0:
                options = _args74.length > 1 && _args74[1] !== void 0 ? _args74[1] : {};
                _context74.next = 3;
                return this.post(this.baseURL + "/channels/delete", _objectSpread({
                  cids
                }, options));
              case 3:
                return _context74.abrupt("return", _context74.sent);
              case 4:
              case "end":
                return _context74.stop();
            }
          }
        }, _callee74, this);
      }));
      function deleteChannels(_x98) {
        return _deleteChannels.apply(this, arguments);
      }
      return deleteChannels;
    }()
    /**
     * deleteUsers - Batch Delete Users
     *
     * @param {string[]} user_ids which users to delete
     * @param {DeleteUserOptions} options Configuration how to delete users
     *
     * @return {TaskResponse} A task ID
     */
  }, {
    key: "deleteUsers",
    value: function() {
      var _deleteUsers = _asyncToGenerator(import_regenerator.default.mark(function _callee75(user_ids) {
        var options, _args75 = arguments;
        return import_regenerator.default.wrap(function _callee75$(_context75) {
          while (1) {
            switch (_context75.prev = _context75.next) {
              case 0:
                options = _args75.length > 1 && _args75[1] !== void 0 ? _args75[1] : {};
                if (!(typeof options.user !== "undefined" && !["soft", "hard", "pruning"].includes(options.user))) {
                  _context75.next = 3;
                  break;
                }
                throw new Error("Invalid delete user options. user must be one of [soft hard pruning]");
              case 3:
                if (!(typeof options.conversations !== "undefined" && !["soft", "hard"].includes(options.conversations))) {
                  _context75.next = 5;
                  break;
                }
                throw new Error("Invalid delete user options. conversations must be one of [soft hard]");
              case 5:
                if (!(typeof options.messages !== "undefined" && !["soft", "hard", "pruning"].includes(options.messages))) {
                  _context75.next = 7;
                  break;
                }
                throw new Error("Invalid delete user options. messages must be one of [soft hard pruning]");
              case 7:
                _context75.next = 9;
                return this.post(this.baseURL + "/users/delete", _objectSpread({
                  user_ids
                }, options));
              case 9:
                return _context75.abrupt("return", _context75.sent);
              case 10:
              case "end":
                return _context75.stop();
            }
          }
        }, _callee75, this);
      }));
      function deleteUsers(_x99) {
        return _deleteUsers.apply(this, arguments);
      }
      return deleteUsers;
    }()
    /**
     * _createImportURL - Create an Import upload url.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {string} filename filename of uploaded data
     * @return {APIResponse & CreateImportResponse} An ImportTask
     */
  }, {
    key: "_createImportURL",
    value: function() {
      var _createImportURL2 = _asyncToGenerator(import_regenerator.default.mark(function _callee76(filename) {
        return import_regenerator.default.wrap(function _callee76$(_context76) {
          while (1) {
            switch (_context76.prev = _context76.next) {
              case 0:
                _context76.next = 2;
                return this.post(this.baseURL + "/import_urls", {
                  filename
                });
              case 2:
                return _context76.abrupt("return", _context76.sent);
              case 3:
              case "end":
                return _context76.stop();
            }
          }
        }, _callee76, this);
      }));
      function _createImportURL(_x100) {
        return _createImportURL2.apply(this, arguments);
      }
      return _createImportURL;
    }()
    /**
     * _createImport - Create an Import Task.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {string} path path of uploaded data
     * @param {CreateImportOptions} options import options
     * @return {APIResponse & CreateImportResponse} An ImportTask
     */
  }, {
    key: "_createImport",
    value: function() {
      var _createImport2 = _asyncToGenerator(import_regenerator.default.mark(function _callee77(path) {
        var options, _args77 = arguments;
        return import_regenerator.default.wrap(function _callee77$(_context77) {
          while (1) {
            switch (_context77.prev = _context77.next) {
              case 0:
                options = _args77.length > 1 && _args77[1] !== void 0 ? _args77[1] : {
                  mode: "upsert"
                };
                _context77.next = 3;
                return this.post(this.baseURL + "/imports", _objectSpread({
                  path
                }, options));
              case 3:
                return _context77.abrupt("return", _context77.sent);
              case 4:
              case "end":
                return _context77.stop();
            }
          }
        }, _callee77, this);
      }));
      function _createImport(_x101) {
        return _createImport2.apply(this, arguments);
      }
      return _createImport;
    }()
    /**
     * _getImport - Get an Import Task.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {string} id id of Import Task
     *
     * @return {APIResponse & GetImportResponse} An ImportTask
     */
  }, {
    key: "_getImport",
    value: function() {
      var _getImport2 = _asyncToGenerator(import_regenerator.default.mark(function _callee78(id) {
        return import_regenerator.default.wrap(function _callee78$(_context78) {
          while (1) {
            switch (_context78.prev = _context78.next) {
              case 0:
                _context78.next = 2;
                return this.get(this.baseURL + "/imports/".concat(id));
              case 2:
                return _context78.abrupt("return", _context78.sent);
              case 3:
              case "end":
                return _context78.stop();
            }
          }
        }, _callee78, this);
      }));
      function _getImport(_x102) {
        return _getImport2.apply(this, arguments);
      }
      return _getImport;
    }()
    /**
     * _listImports - Lists Import Tasks.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {ListImportsPaginationOptions} options pagination options
     *
     * @return {APIResponse & ListImportsResponse} An ImportTask
     */
  }, {
    key: "_listImports",
    value: function() {
      var _listImports2 = _asyncToGenerator(import_regenerator.default.mark(function _callee79(options) {
        return import_regenerator.default.wrap(function _callee79$(_context79) {
          while (1) {
            switch (_context79.prev = _context79.next) {
              case 0:
                _context79.next = 2;
                return this.get(this.baseURL + "/imports", options);
              case 2:
                return _context79.abrupt("return", _context79.sent);
              case 3:
              case "end":
                return _context79.stop();
            }
          }
        }, _callee79, this);
      }));
      function _listImports(_x103) {
        return _listImports2.apply(this, arguments);
      }
      return _listImports;
    }()
    /**
     * upsertPushProvider - Create or Update a push provider
     *
     * Note: Works only for v2 push version is enabled on app settings.
     *
     * @param {PushProviderConfig} configuration of the provider you want to create or update
     *
     * @return {APIResponse & PushProviderUpsertResponse} A push provider
     */
  }, {
    key: "upsertPushProvider",
    value: function() {
      var _upsertPushProvider = _asyncToGenerator(import_regenerator.default.mark(function _callee80(pushProvider) {
        return import_regenerator.default.wrap(function _callee80$(_context80) {
          while (1) {
            switch (_context80.prev = _context80.next) {
              case 0:
                _context80.next = 2;
                return this.post(this.baseURL + "/push_providers", {
                  push_provider: pushProvider
                });
              case 2:
                return _context80.abrupt("return", _context80.sent);
              case 3:
              case "end":
                return _context80.stop();
            }
          }
        }, _callee80, this);
      }));
      function upsertPushProvider(_x104) {
        return _upsertPushProvider.apply(this, arguments);
      }
      return upsertPushProvider;
    }()
    /**
     * deletePushProvider - Delete a push provider
     *
     * Note: Works only for v2 push version is enabled on app settings.
     *
     * @param {PushProviderID} type and foreign id of the push provider to be deleted
     *
     * @return {APIResponse} An API response
     */
  }, {
    key: "deletePushProvider",
    value: function() {
      var _deletePushProvider = _asyncToGenerator(import_regenerator.default.mark(function _callee81(_ref10) {
        var type, name;
        return import_regenerator.default.wrap(function _callee81$(_context81) {
          while (1) {
            switch (_context81.prev = _context81.next) {
              case 0:
                type = _ref10.type, name = _ref10.name;
                _context81.next = 3;
                return this.delete(this.baseURL + "/push_providers/".concat(type, "/").concat(name));
              case 3:
                return _context81.abrupt("return", _context81.sent);
              case 4:
              case "end":
                return _context81.stop();
            }
          }
        }, _callee81, this);
      }));
      function deletePushProvider(_x105) {
        return _deletePushProvider.apply(this, arguments);
      }
      return deletePushProvider;
    }()
    /**
     * listPushProviders - Get all push providers in the app
     *
     * Note: Works only for v2 push version is enabled on app settings.
     *
     * @return {APIResponse & PushProviderListResponse} A push provider
     */
  }, {
    key: "listPushProviders",
    value: function() {
      var _listPushProviders = _asyncToGenerator(import_regenerator.default.mark(function _callee82() {
        return import_regenerator.default.wrap(function _callee82$(_context82) {
          while (1) {
            switch (_context82.prev = _context82.next) {
              case 0:
                _context82.next = 2;
                return this.get(this.baseURL + "/push_providers");
              case 2:
                return _context82.abrupt("return", _context82.sent);
              case 3:
              case "end":
                return _context82.stop();
            }
          }
        }, _callee82, this);
      }));
      function listPushProviders() {
        return _listPushProviders.apply(this, arguments);
      }
      return listPushProviders;
    }()
    /**
     * creates an abort controller that will be used by the next HTTP Request.
     */
  }, {
    key: "createAbortControllerForNextRequest",
    value: function createAbortControllerForNextRequest() {
      return this.nextRequestAbortController = new AbortController();
    }
    /**
     * commits a pending message, making it visible in the channel and for other users
     * @param id the message id
     *
     * @return {APIResponse & MessageResponse} The message
     */
  }, {
    key: "commitMessage",
    value: function() {
      var _commitMessage = _asyncToGenerator(import_regenerator.default.mark(function _callee83(id) {
        return import_regenerator.default.wrap(function _callee83$(_context83) {
          while (1) {
            switch (_context83.prev = _context83.next) {
              case 0:
                _context83.next = 2;
                return this.post(this.baseURL + "/messages/".concat(id, "/commit"));
              case 2:
                return _context83.abrupt("return", _context83.sent);
              case 3:
              case "end":
                return _context83.stop();
            }
          }
        }, _callee83, this);
      }));
      function commitMessage(_x106) {
        return _commitMessage.apply(this, arguments);
      }
      return commitMessage;
    }()
  }], [{
    key: "getInstance",
    value: function getInstance(key, secretOrOptions, options) {
      if (!StreamChat2._instance) {
        if (typeof secretOrOptions === "string") {
          StreamChat2._instance = new StreamChat2(key, secretOrOptions, options);
        } else {
          StreamChat2._instance = new StreamChat2(key, secretOrOptions);
        }
      }
      return StreamChat2._instance;
    }
  }]);
  return StreamChat2;
}();
_defineProperty(StreamChat, "_instance", void 0);
var Allow = "Allow";
var Deny = "Deny";
var AnyResource = ["*"];
var AnyRole = ["*"];
var MaxPriority = 999;
var MinPriority = 1;
var Permission = function Permission2(name, priority) {
  var resources = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : AnyResource;
  var roles = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : AnyRole;
  var owner = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
  var action = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : Allow;
  _classCallCheck(this, Permission2);
  _defineProperty(this, "name", void 0);
  _defineProperty(this, "action", void 0);
  _defineProperty(this, "owner", void 0);
  _defineProperty(this, "priority", void 0);
  _defineProperty(this, "resources", void 0);
  _defineProperty(this, "roles", void 0);
  this.name = name;
  this.action = action;
  this.owner = owner;
  this.priority = priority;
  this.resources = resources;
  this.roles = roles;
};
var AllowAll = new Permission("Allow all", MaxPriority, AnyResource, AnyRole, false, Allow);
var DenyAll = new Permission("Deny all", MinPriority, AnyResource, AnyRole, false, Deny);

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues2;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues2) {
    getRandomValues2 = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues2) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues2(rnds8);
}

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
var i;
function stringify(arr) {
  var offset2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset2 + 0]] + byteToHex[arr[offset2 + 1]] + byteToHex[arr[offset2 + 2]] + byteToHex[arr[offset2 + 3]] + "-" + byteToHex[arr[offset2 + 4]] + byteToHex[arr[offset2 + 5]] + "-" + byteToHex[arr[offset2 + 6]] + byteToHex[arr[offset2 + 7]] + "-" + byteToHex[arr[offset2 + 8]] + byteToHex[arr[offset2 + 9]] + "-" + byteToHex[arr[offset2 + 10]] + byteToHex[arr[offset2 + 11]] + byteToHex[arr[offset2 + 12]] + byteToHex[arr[offset2 + 13]] + byteToHex[arr[offset2 + 14]] + byteToHex[arr[offset2 + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var stringify_default = stringify;

// node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v;
  var arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default = parse;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset2) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset2 = offset2 || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset2 + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}

// node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 255;
    var hex2 = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex2);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a2 = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;
  for (var i = 0; i < x.length; i += 16) {
    var olda = a2;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a2 = md5ff(a2, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a2, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a2, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a2, x[i + 3], 22, -1044525330);
    a2 = md5ff(a2, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a2, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a2, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a2, x[i + 7], 22, -45705983);
    a2 = md5ff(a2, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a2, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a2, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a2, x[i + 11], 22, -1990404162);
    a2 = md5ff(a2, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a2, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a2, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a2, x[i + 15], 22, 1236535329);
    a2 = md5gg(a2, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a2, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a2, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a2, x[i], 20, -373897302);
    a2 = md5gg(a2, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a2, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a2, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a2, x[i + 4], 20, -405537848);
    a2 = md5gg(a2, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a2, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a2, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a2, x[i + 8], 20, 1163531501);
    a2 = md5gg(a2, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a2, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a2, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a2, x[i + 12], 20, -1926607734);
    a2 = md5hh(a2, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a2, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a2, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a2, x[i + 14], 23, -35309556);
    a2 = md5hh(a2, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a2, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a2, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a2, x[i + 10], 23, -1094730640);
    a2 = md5hh(a2, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a2, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a2, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a2, x[i + 6], 23, 76029189);
    a2 = md5hh(a2, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a2, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a2, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a2, x[i + 2], 23, -995338651);
    a2 = md5ii(a2, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a2, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a2, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a2, x[i + 5], 21, -57434055);
    a2 = md5ii(a2, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a2, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a2, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a2, x[i + 1], 21, -2054922799);
    a2 = md5ii(a2, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a2, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a2, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a2, x[i + 13], 21, 1309151649);
    a2 = md5ii(a2, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a2, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a2, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a2, x[i + 9], 21, -343485551);
    a2 = safeAdd(a2, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a2, b, c, d];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x, y) {
  var lsw = (x & 65535) + (y & 65535);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a2, b, x, s2, t2) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a2, q), safeAdd(x, t2)), s2), b);
}
function md5ff(a2, b, c, d, x, s2, t2) {
  return md5cmn(b & c | ~b & d, a2, b, x, s2, t2);
}
function md5gg(a2, b, c, d, x, s2, t2) {
  return md5cmn(b & d | c & ~d, a2, b, x, s2, t2);
}
function md5hh(a2, b, c, d, x, s2, t2) {
  return md5cmn(b ^ c ^ d, a2, b, x, s2, t2);
}
function md5ii(a2, b, c, d, x, s2, t2) {
  return md5cmn(c ^ (b | ~d), a2, b, x, s2, t2);
}
var md5_default = md5;

// node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35_default("v3", 48, md5_default);

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset2) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset2 = offset2 || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset2 + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default = v4;

// node_modules/uuid/dist/esm-browser/sha1.js
function f(s2, x, y, z) {
  switch (s2) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  var K = [1518500249, 1859775393, 2400959708, 3395469782];
  var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);
  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);
    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);
    for (var t2 = 0; t2 < 16; ++t2) {
      W[t2] = M[_i2][t2];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }
    var a2 = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e2 = H[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s2 = Math.floor(_t2 / 20);
      var T = ROTL(a2, 5) + f(s2, b, c, d) + e2 + K[s2] + W[_t2] >>> 0;
      e2 = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a2;
      a2 = T;
    }
    H[0] = H[0] + a2 >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e2 >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35_default("v5", 80, sha1_default);

// node_modules/stream-chat-angular/fesm2015/stream-chat-angular.js
var import_pretty_bytes = __toESM(require_pretty_bytes());

// node_modules/stream-chat-angular/node_modules/emoji-regex/index.mjs
var emoji_regex_default = () => {
  return /[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC2\uDECE-\uDEDB\uDEE0-\uDEE8]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;
};

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v) => ({
  x: v,
  y: v
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return __spreadValues({
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }, padding);
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return __spreadProps(__spreadValues({}, rect), {
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = (reference, floating, config) => __async(void 0, null, function* () {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(floating);
  let rects = yield platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = yield fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = __spreadProps(__spreadValues({}, middlewareData), {
      [name]: __spreadValues(__spreadValues({}, middlewareData[name]), data)
    });
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? yield platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
      continue;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
});
function detectOverflow(state, options) {
  return __async(this, null, function* () {
    var _await$platform$isEle;
    if (options === void 0) {
      options = {};
    }
    const {
      x,
      y,
      platform: platform2,
      rects,
      elements,
      strategy
    } = state;
    const {
      boundary = "clippingAncestors",
      rootBoundary = "viewport",
      elementContext = "floating",
      altBoundary = false,
      padding = 0
    } = evaluate(options, state);
    const paddingObject = getPaddingObject(padding);
    const altContext = elementContext === "floating" ? "reference" : "floating";
    const element = elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect(yield platform2.getClippingRect({
      element: ((_await$platform$isEle = yield platform2.isElement == null ? void 0 : platform2.isElement(element)) != null ? _await$platform$isEle : true) ? element : element.contextElement || (yield platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
      boundary,
      rootBoundary,
      strategy
    }));
    const rect = elementContext === "floating" ? __spreadProps(__spreadValues({}, rects.floating), {
      x,
      y
    }) : rects.reference;
    const offsetParent = yield platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating);
    const offsetScale = (yield platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? (yield platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
      x: 1,
      y: 1
    } : {
      x: 1,
      y: 1
    };
    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? yield platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
      rect,
      offsetParent,
      strategy
    }) : rect);
    return {
      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
  });
}
var arrow = (options) => ({
  name: "arrow",
  options,
  fn(state) {
    return __async(this, null, function* () {
      const {
        x,
        y,
        placement,
        rects,
        platform: platform2,
        elements,
        middlewareData
      } = state;
      const {
        element,
        padding = 0
      } = evaluate(options, state) || {};
      if (element == null) {
        return {};
      }
      const paddingObject = getPaddingObject(padding);
      const coords = {
        x,
        y
      };
      const axis = getAlignmentAxis(placement);
      const length = getAxisLength(axis);
      const arrowDimensions = yield platform2.getDimensions(element);
      const isYAxis = axis === "y";
      const minProp = isYAxis ? "top" : "left";
      const maxProp = isYAxis ? "bottom" : "right";
      const clientProp = isYAxis ? "clientHeight" : "clientWidth";
      const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
      const startDiff = coords[axis] - rects.reference[axis];
      const arrowOffsetParent = yield platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element);
      let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
      if (!clientSize || !(yield platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
        clientSize = elements.floating[clientProp] || rects.floating[length];
      }
      const centerToReference = endDiff / 2 - startDiff / 2;
      const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
      const minPadding = min(paddingObject[minProp], largestPossiblePadding);
      const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
      const min$1 = minPadding;
      const max2 = clientSize - arrowDimensions[length] - maxPadding;
      const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
      const offset2 = clamp(min$1, center, max2);
      const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset2 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
      const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
      return {
        [axis]: coords[axis] + alignmentOffset,
        data: __spreadValues({
          [axis]: offset2,
          centerOffset: center - offset2 - alignmentOffset
        }, shouldAddOffset && {
          alignmentOffset
        }),
        reset: shouldAddOffset
      };
    });
  }
});
function getPlacementList(alignment, autoAlignment, allowedPlacements) {
  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment(placement) !== alignment)] : allowedPlacements.filter((placement) => getSide(placement) === placement);
  return allowedPlacementsSortedByAlignment.filter((placement) => {
    if (alignment) {
      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
    }
    return true;
  });
}
var autoPlacement = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "autoPlacement",
    options,
    fn(state) {
      return __async(this, null, function* () {
        var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;
        const {
          rects,
          middlewareData,
          placement,
          platform: platform2,
          elements
        } = state;
        const _a2 = evaluate(options, state), {
          crossAxis = false,
          alignment,
          allowedPlacements = placements,
          autoAlignment = true
        } = _a2, detectOverflowOptions = __objRest(_a2, [
          "crossAxis",
          "alignment",
          "allowedPlacements",
          "autoAlignment"
        ]);
        const placements$1 = alignment !== void 0 || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;
        const overflow = yield detectOverflow(state, detectOverflowOptions);
        const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;
        const currentPlacement = placements$1[currentIndex];
        if (currentPlacement == null) {
          return {};
        }
        const alignmentSides = getAlignmentSides(currentPlacement, rects, yield platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
        if (placement !== currentPlacement) {
          return {
            reset: {
              placement: placements$1[0]
            }
          };
        }
        const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];
        const allOverflows = [...((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || [], {
          placement: currentPlacement,
          overflows: currentOverflows
        }];
        const nextPlacement = placements$1[currentIndex + 1];
        if (nextPlacement) {
          return {
            data: {
              index: currentIndex + 1,
              overflows: allOverflows
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        const placementsSortedByMostSpace = allOverflows.map((d) => {
          const alignment2 = getAlignment(d.placement);
          return [d.placement, alignment2 && crossAxis ? (
            // Check along the mainAxis and main crossAxis side.
            d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0)
          ) : (
            // Check only the mainAxis.
            d.overflows[0]
          ), d.overflows];
        }).sort((a2, b) => a2[1] - b[1]);
        const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter((d) => d[2].slice(
          0,
          // Aligned placements should not check their opposite crossAxis
          // side.
          getAlignment(d[0]) ? 2 : 3
        ).every((v) => v <= 0));
        const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];
        if (resetPlacement !== placement) {
          return {
            data: {
              index: currentIndex + 1,
              overflows: allOverflows
            },
            reset: {
              placement: resetPlacement
            }
          };
        }
        return {};
      });
    }
  };
};
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    fn(state) {
      return __async(this, null, function* () {
        var _middlewareData$arrow, _middlewareData$flip;
        const {
          placement,
          middlewareData,
          rects,
          initialPlacement,
          platform: platform2,
          elements
        } = state;
        const _a2 = evaluate(options, state), {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true,
          fallbackPlacements: specifiedFallbackPlacements,
          fallbackStrategy = "bestFit",
          fallbackAxisSideDirection = "none",
          flipAlignment = true
        } = _a2, detectOverflowOptions = __objRest(_a2, [
          "mainAxis",
          "crossAxis",
          "fallbackPlacements",
          "fallbackStrategy",
          "fallbackAxisSideDirection",
          "flipAlignment"
        ]);
        if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        const side = getSide(placement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating);
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
        if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
        }
        const placements2 = [initialPlacement, ...fallbackPlacements];
        const overflow = yield detectOverflow(state, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow[side]);
        }
        if (checkCrossAxis) {
          const sides2 = getAlignmentSides(placement, rects, rtl);
          overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
        }
        overflowsData = [...overflowsData, {
          placement,
          overflows
        }];
        if (!overflows.every((side2) => side2 <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements2[nextIndex];
          if (nextPlacement) {
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
          let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a2, b) => a2.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case "bestFit": {
                var _overflowsData$map$so;
                const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b) => a2[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
                if (placement2) {
                  resetPlacement = placement2;
                }
                break;
              }
              case "initialPlacement":
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return {
              reset: {
                placement: resetPlacement
              }
            };
          }
        }
        return {};
      });
    }
  };
};
function convertValueToCoords(state, options) {
  return __async(this, null, function* () {
    const {
      placement,
      platform: platform2,
      elements
    } = state;
    const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating);
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getSideAxis(placement) === "y";
    const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
    const crossAxisMulti = rtl && isVertical ? -1 : 1;
    const rawValue = evaluate(options, state);
    let {
      mainAxis,
      crossAxis,
      alignmentAxis
    } = typeof rawValue === "number" ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : __spreadValues({
      mainAxis: 0,
      crossAxis: 0,
      alignmentAxis: null
    }, rawValue);
    if (alignment && typeof alignmentAxis === "number") {
      crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  });
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    fn(state) {
      return __async(this, null, function* () {
        var _middlewareData$offse, _middlewareData$arrow;
        const {
          x,
          y,
          placement,
          middlewareData
        } = state;
        const diffCoords = yield convertValueToCoords(state, options);
        if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        return {
          x: x + diffCoords.x,
          y: y + diffCoords.y,
          data: __spreadProps(__spreadValues({}, diffCoords), {
            placement
          })
        };
      });
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    fn(state) {
      return __async(this, null, function* () {
        const {
          x,
          y,
          placement
        } = state;
        const _a2 = evaluate(options, state), {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = false,
          limiter = {
            fn: (_ref) => {
              let {
                x: x2,
                y: y2
              } = _ref;
              return {
                x: x2,
                y: y2
              };
            }
          }
        } = _a2, detectOverflowOptions = __objRest(_a2, [
          "mainAxis",
          "crossAxis",
          "limiter"
        ]);
        const coords = {
          x,
          y
        };
        const overflow = yield detectOverflow(state, detectOverflowOptions);
        const crossAxis = getSideAxis(getSide(placement));
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        if (checkMainAxis) {
          const minSide = mainAxis === "y" ? "top" : "left";
          const maxSide = mainAxis === "y" ? "bottom" : "right";
          const min2 = mainAxisCoord + overflow[minSide];
          const max2 = mainAxisCoord - overflow[maxSide];
          mainAxisCoord = clamp(min2, mainAxisCoord, max2);
        }
        if (checkCrossAxis) {
          const minSide = crossAxis === "y" ? "top" : "left";
          const maxSide = crossAxis === "y" ? "bottom" : "right";
          const min2 = crossAxisCoord + overflow[minSide];
          const max2 = crossAxisCoord - overflow[maxSide];
          crossAxisCoord = clamp(min2, crossAxisCoord, max2);
        }
        const limitedCoords = limiter.fn(__spreadProps(__spreadValues({}, state), {
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        }));
        return __spreadProps(__spreadValues({}, limitedCoords), {
          data: {
            x: limitedCoords.x - x,
            y: limitedCoords.y - y
          }
        });
      });
    }
  };
};
var limitShift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    options,
    fn(state) {
      const {
        x,
        y,
        placement,
        rects,
        middlewareData
      } = state;
      const {
        offset: offset2 = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const crossAxis = getSideAxis(placement);
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = evaluate(offset2, state);
      const computedOffset = typeof rawOffset === "number" ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : __spreadValues({
        mainAxis: 0,
        crossAxis: 0
      }, rawOffset);
      if (checkMainAxis) {
        const len = mainAxis === "y" ? "height" : "width";
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        const len = mainAxis === "y" ? "width" : "height";
        const isOriginSide = ["top", "left"].includes(getSide(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
};

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle2(element);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentIFrame = win.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== win) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentIFrame = getWindow(currentIFrame).frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = __spreadProps(__spreadValues({}, clippingAncestor), {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    });
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const window2 = getWindow(element);
  if (!isHTMLElement(element)) {
    return window2;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
var getElementRects = function(_ref) {
  return __async(this, null, function* () {
    let {
      reference,
      floating,
      strategy
    } = _ref;
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    return {
      reference: getRectRelativeToOffsetParent(reference, yield getOffsetParentFn(floating), strategy),
      floating: __spreadValues({
        x: 0,
        y: 0
      }, yield getDimensionsFn(floating))
    };
  });
};
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    clearTimeout(timeoutId);
    io && io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, __spreadProps(__spreadValues({}, options), {
        // Handle <iframe>s
        root: root.ownerDocument
      }));
    } catch (e2) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          resizeObserver && resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo && cleanupIo();
    resizeObserver && resizeObserver.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var autoPlacement2 = autoPlacement;
var shift2 = shift;
var flip2 = flip;
var arrow2 = arrow;
var limitShift2 = limitShift;
var computePosition2 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = __spreadValues({
    platform
  }, options);
  const platformWithCache = __spreadProps(__spreadValues({}, mergedOptions.platform), {
    _c: cache
  });
  return computePosition(reference, floating, __spreadProps(__spreadValues({}, mergedOptions), {
    platform: platformWithCache
  }));
};

// node_modules/ngx-popperjs/fesm2022/ngx-popperjs.mjs
var _c0 = ["popperViewRef"];
function NgxPopperjsContentComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 5);
    ɵɵprojection(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("innerHTML", ctx_r1.text, ɵɵsanitizeHtml);
  }
}
function NgxPopperjsContentComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 6);
    ɵɵprojection(1, 1);
    ɵɵelementEnd();
  }
}
var _c1 = ["*", "*"];
var NgxPopperjsTriggers;
(function(NgxPopperjsTriggers2) {
  NgxPopperjsTriggers2["click"] = "click";
  NgxPopperjsTriggers2["hover"] = "hover";
  NgxPopperjsTriggers2["mousedown"] = "mousedown";
  NgxPopperjsTriggers2["none"] = "none";
})(NgxPopperjsTriggers || (NgxPopperjsTriggers = {}));
var NgxPopperjsContentComponent = class _NgxPopperjsContentComponent {
  elRef;
  _viewRef;
  _changeDetectorRef;
  static nextId = 0;
  ariaHidden;
  arrowColor = null;
  displayType;
  id = `ngx_poppperjs_${++_NgxPopperjsContentComponent.nextId}`;
  isMouseOver = false;
  onHidden = new EventEmitter();
  onUpdate;
  opacity;
  popperInstance;
  popperOptions = {
    disableAnimation: false,
    disableDefaultStyling: false,
    boundariesElement: "",
    trigger: NgxPopperjsTriggers.hover,
    positionFixed: false,
    appendToBody: false,
    popperModifiers: []
  };
  popperViewRef;
  referenceObject;
  state;
  text;
  _destroy$ = new Subject();
  _resizeCtrl$ = new Subject();
  _styleId = `${this.id}_style`;
  constructor(elRef, _viewRef, _changeDetectorRef) {
    this.elRef = elRef;
    this._viewRef = _viewRef;
    this._changeDetectorRef = _changeDetectorRef;
    this._toggleVisibility(false);
  }
  clean() {
    this.toggleVisibility(false);
    if (!this.popperInstance) {
      return;
    }
    this.popperInstance();
  }
  extractAppliedClassListExpr(classList = []) {
    const klassList = Array.isArray(classList) ? classList : typeof classList === "string" ? classList.replace(/ /, "").split(",") : [];
    return klassList.reduce((acc, klass) => {
      acc[klass] = true;
      return acc;
    }, {});
  }
  hide() {
    if (this.popperInstance) {
      this.popperInstance();
    }
    this.toggleVisibility(false);
    this.onHidden.emit();
  }
  ngOnDestroy() {
    this._destroy$.next();
    this.clean();
    if (this.popperOptions.appendTo && this.elRef && this.elRef.nativeElement && this.elRef.nativeElement.parentNode) {
      this._viewRef.detach();
      this.elRef.nativeElement.parentNode.removeChild(this.elRef.nativeElement);
    }
  }
  onDocumentResize() {
    this.update();
  }
  onMouseOver() {
    this.isMouseOver = true;
  }
  show() {
    if (!this.referenceObject) {
      return;
    }
    this._resizeCtrl$.next();
    this._determineArrowColor();
    this.popperInstance = autoUpdate(this.referenceObject, this.popperViewRef.nativeElement, () => {
      this._computePosition();
    });
    fromEvent(document, "resize").pipe(takeUntil(this._resizeCtrl$), takeUntil(this._destroy$)).subscribe({
      next: () => this.onDocumentResize()
    });
  }
  showOnLeave() {
    this.isMouseOver = false;
    if (this.popperOptions.trigger !== NgxPopperjsTriggers.hover && !this.popperOptions.hideOnMouseLeave) {
      return;
    }
    this.hide();
  }
  // Toggle visibility and detect changes - Run only after ngOnInit!
  toggleVisibility(state) {
    this._toggleVisibility(state);
    if (!this._changeDetectorRef["destroyed"]) {
      this._changeDetectorRef.detectChanges();
    }
  }
  update() {
    this._computePosition();
  }
  _computePosition() {
    const appendToParent = this.popperOptions.appendTo && document.querySelector(this.popperOptions.appendTo);
    if (appendToParent && this.elRef.nativeElement.parentNode !== appendToParent) {
      this.elRef.nativeElement.parentNode && this.elRef.nativeElement.parentNode.removeChild(this.elRef.nativeElement);
      appendToParent.appendChild(this.elRef.nativeElement);
    }
    const arrowElement = this.elRef.nativeElement.querySelector(".ngxp__arrow");
    const arrowLen = arrowElement.offsetWidth;
    const floatingOffset = Math.sqrt(2 * arrowLen ** 2) / 2;
    const boundaryMiddleware = [];
    if (this.popperOptions.flip) {
      boundaryMiddleware.push(flip2());
    }
    if (this.popperOptions.preventOverflow) {
      boundaryMiddleware.push(shift2({
        limiter: limitShift2()
      }));
    }
    const popperOptions = {
      placement: this.popperOptions.placement,
      strategy: this.popperOptions.positionFixed ? "fixed" : "absolute",
      middleware: [offset(floatingOffset), ...boundaryMiddleware, arrow2({
        element: arrowElement,
        padding: 4
      })]
    };
    if (!this.popperOptions.preventOverflow && !popperOptions.placement) {
      const boundariesElement = this.popperOptions.boundariesElement && document.querySelector(this.popperOptions.boundariesElement);
      popperOptions.middleware.push(autoPlacement2({
        boundary: boundariesElement
      }));
    }
    computePosition2(this.referenceObject, this.popperViewRef.nativeElement, popperOptions).then(({
      middlewareData,
      x,
      y,
      placement
    }) => {
      const side = placement.split("-")[0];
      this.popperViewRef.nativeElement.setAttribute("data-popper-placement", side);
      if (middlewareData.arrow) {
        const staticSide = {
          top: "bottom",
          right: "left",
          bottom: "top",
          left: "right"
        }[side];
        Object.assign(arrowElement.style, {
          left: middlewareData.arrow.x != null ? `${middlewareData.arrow.x}px` : "",
          top: middlewareData.arrow.y != null ? `${middlewareData.arrow.y}px` : "",
          [staticSide]: `${-arrowLen / 2}px`
        });
      }
      Object.assign(this.popperViewRef.nativeElement.style, {
        left: `${x}px`,
        top: `${y}px`
      });
      this.toggleVisibility(true);
      this.onUpdate?.();
    });
  }
  _createArrowSelector() {
    return `div#${this.id}.ngxp__container > .ngxp__arrow.ngxp__force-arrow`;
  }
  _determineArrowColor() {
    if (!this.popperOptions.styles || this.arrowColor) {
      return false;
    }
    const ruleValue = this.popperOptions.styles["background-color"] || this.popperOptions.styles.backgroundColor;
    if (this.arrowColor === ruleValue) {
      return false;
    }
    this.arrowColor = ruleValue;
    let $style = document.querySelector(`#${this._styleId}`);
    const styleContent = this.arrowColor ? `${this._createArrowSelector()}:before { background-color: ${this.arrowColor}; }` : "";
    if (!$style) {
      $style = document.createElement("style");
      $style.id = this._styleId;
      $style.setAttribute("type", "text/css");
      document.head.appendChild($style);
    }
    if ($style["styleSheet"]) {
      $style["styleSheet"].cssText = styleContent;
    } else {
      $style.innerHTML = styleContent;
    }
  }
  _toggleVisibility(state) {
    this.displayType = ["none", "block"][+state];
    this.opacity = +state;
    this.ariaHidden = `${!state}`;
    this.state = state;
  }
  /** @nocollapse */
  static ɵfac = function NgxPopperjsContentComponent_Factory(t2) {
    return new (t2 || _NgxPopperjsContentComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(ChangeDetectorRef));
  };
  /** @nocollapse */
  static ɵcmp = ɵɵdefineComponent({
    type: _NgxPopperjsContentComponent,
    selectors: [["popper-content"]],
    viewQuery: function NgxPopperjsContentComponent_Query(rf, ctx) {
      if (rf & 1) {
        ɵɵviewQuery(_c0, 7);
      }
      if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.popperViewRef = _t.first);
      }
    },
    hostBindings: function NgxPopperjsContentComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        ɵɵlistener("mouseover", function NgxPopperjsContentComponent_mouseover_HostBindingHandler() {
          return ctx.onMouseOver();
        })("mouseleave", function NgxPopperjsContentComponent_mouseleave_HostBindingHandler() {
          return ctx.showOnLeave();
        });
      }
    },
    exportAs: ["ngxPopperjsContent"],
    standalone: true,
    features: [ɵɵStandaloneFeature],
    ngContentSelectors: _c1,
    decls: 5,
    vars: 19,
    consts: [[3, "ngStyle", "ngClass"], ["popperViewRef", ""], ["class", "ngxp__inner", 3, "innerHTML", 4, "ngIf"], ["class", "ngxp__inner", 4, "ngIf"], [1, "ngxp__arrow", 3, "ngClass"], [1, "ngxp__inner", 3, "innerHTML"], [1, "ngxp__inner"]],
    template: function NgxPopperjsContentComponent_Template(rf, ctx) {
      if (rf & 1) {
        ɵɵprojectionDef(_c1);
        ɵɵelementStart(0, "div", 0, 1);
        ɵɵtemplate(2, NgxPopperjsContentComponent_div_2_Template, 2, 1, "div", 2)(3, NgxPopperjsContentComponent_div_3_Template, 2, 0, "div", 3);
        ɵɵelement(4, "div", 4);
        ɵɵelementEnd();
      }
      if (rf & 2) {
        ɵɵstyleProp("display", ctx.displayType)("opacity", ctx.opacity);
        ɵɵclassProp("ngxp__container", !ctx.popperOptions.disableDefaultStyling)("ngxp__animation", !ctx.popperOptions.disableAnimation);
        ɵɵproperty("ngStyle", ctx.popperOptions.styles)("ngClass", ctx.extractAppliedClassListExpr(ctx.popperOptions.applyClass));
        ɵɵattribute("id", ctx.id)("aria-hidden", ctx.ariaHidden)("aria-describedby", ctx.popperOptions.ariaDescribe || null)("role", ctx.popperOptions.ariaRole);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.text);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.text);
        ɵɵadvance(1);
        ɵɵclassProp("ngxp__force-arrow", ctx.arrowColor);
        ɵɵproperty("ngClass", ctx.extractAppliedClassListExpr(ctx.popperOptions.applyArrowClass));
      }
    },
    dependencies: [NgStyle, NgClass, NgIf],
    styles: ["popper-content{position:relative;display:block}.ngxp__container{display:none;position:absolute;border-radius:3px;border:1px solid grey;box-shadow:0 0 2px #00000080;padding:10px}.ngxp__container.ngxp__animation{animation:ngxp-fadeIn .15s ease-out}.ngxp__container>.ngxp__arrow{position:absolute;width:10px;height:10px;z-index:-1;transform:rotate(45deg);background-color:red}.ngxp__container[data-popper-placement^=top]>.ngxp__arrow{bottom:-5px}.ngxp__container[data-popper-placement^=bottom]>.ngxp__arrow{top:-5px}.ngxp__container[data-popper-placement^=left]>.ngxp__arrow{right:-5px}.ngxp__container[data-popper-placement^=right]>.ngxp__arrow{left:-5px}@keyframes ngxp-fadeIn{0%{display:none;opacity:0}1%{display:block;opacity:0}to{display:block;opacity:1}}\n"],
    encapsulation: 2,
    changeDetection: 0
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgxPopperjsContentComponent, [{
    type: Component,
    args: [{
      selector: "popper-content",
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      exportAs: "ngxPopperjsContent",
      standalone: true,
      imports: [NgStyle, NgClass, NgIf],
      template: '<div #popperViewRef\r\n     [attr.id]="id"\r\n     [class.ngxp__container]="!popperOptions.disableDefaultStyling"\r\n     [class.ngxp__animation]="!popperOptions.disableAnimation"\r\n     [style.display]="displayType"\r\n     [style.opacity]="opacity"\r\n     [ngStyle]="popperOptions.styles"\r\n     [ngClass]="extractAppliedClassListExpr(popperOptions.applyClass)"\r\n     attr.aria-hidden="{{ariaHidden}}"\r\n     [attr.aria-describedby]="popperOptions.ariaDescribe || null"\r\n     attr.role="{{popperOptions.ariaRole}}">\r\n    <div *ngIf="text"\r\n         class="ngxp__inner"\r\n         [innerHTML]="text">\r\n        <ng-content></ng-content>\r\n    </div>\r\n    <div *ngIf="!text"\r\n         class="ngxp__inner">\r\n        <ng-content></ng-content>\r\n    </div>\r\n    <div class="ngxp__arrow"\r\n         [class.ngxp__force-arrow]="arrowColor"\r\n         [ngClass]="extractAppliedClassListExpr(popperOptions.applyArrowClass)"></div>\r\n\r\n</div>\r\n',
      styles: ["popper-content{position:relative;display:block}.ngxp__container{display:none;position:absolute;border-radius:3px;border:1px solid grey;box-shadow:0 0 2px #00000080;padding:10px}.ngxp__container.ngxp__animation{animation:ngxp-fadeIn .15s ease-out}.ngxp__container>.ngxp__arrow{position:absolute;width:10px;height:10px;z-index:-1;transform:rotate(45deg);background-color:red}.ngxp__container[data-popper-placement^=top]>.ngxp__arrow{bottom:-5px}.ngxp__container[data-popper-placement^=bottom]>.ngxp__arrow{top:-5px}.ngxp__container[data-popper-placement^=left]>.ngxp__arrow{right:-5px}.ngxp__container[data-popper-placement^=right]>.ngxp__arrow{left:-5px}@keyframes ngxp-fadeIn{0%{display:none;opacity:0}1%{display:block;opacity:0}to{display:block;opacity:1}}\n"]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: ViewContainerRef
  }, {
    type: ChangeDetectorRef
  }], {
    popperViewRef: [{
      type: ViewChild,
      args: ["popperViewRef", {
        static: true
      }]
    }],
    onMouseOver: [{
      type: HostListener,
      args: ["mouseover"]
    }],
    showOnLeave: [{
      type: HostListener,
      args: ["mouseleave"]
    }]
  });
})();
var NGX_POPPERJS_DEFAULTS = new InjectionToken("NGX_POPPERJS_DEFAULTS");
var NgxPopperjsUtils = class {
  /** Coerces a data-bound value (typically a string) to a boolean. */
  static coerceBooleanProperty(value) {
    return value != null && `${value}` !== "false";
  }
};
var NgxPopperjsDirective = class _NgxPopperjsDirective {
  _changeDetectorRef;
  _elementRef;
  _vcr;
  _popperDefaults;
  static baseOptions = {
    showDelay: 0,
    hideOnClickOutside: true,
    hideOnMouseLeave: false,
    hideOnScroll: false,
    appendTo: void 0,
    ariaRole: "popper",
    ariaDescribe: "",
    styles: {},
    trigger: NgxPopperjsTriggers.click
  };
  set applyClass(newValue) {
    if (newValue === this._applyClass) {
      return;
    }
    this._applyClass = newValue;
    this._checkExisting("applyClass", newValue);
  }
  get applyClass() {
    return this._applyClass;
  }
  set hideOnClickOutside(newValue) {
    this._hideOnClickOutside = NgxPopperjsUtils.coerceBooleanProperty(newValue);
  }
  get hideOnClickOutside() {
    return this._hideOnClickOutside;
  }
  set content(newValue) {
    if (newValue === this._content) {
      return;
    }
    this._content = newValue;
    if (this._popperContent) {
      if (typeof newValue === "string") {
        this._popperContent.text = newValue;
      } else {
        this._popperContent = newValue;
      }
    }
  }
  get content() {
    return this._content;
  }
  set flip(newValue) {
    this._flip = NgxPopperjsUtils.coerceBooleanProperty(newValue);
    this._checkExisting("preventOverflow", this._preventOverflow);
  }
  get flip() {
    return this._flip;
  }
  set placement(newValue) {
    this._placement = newValue;
    this._checkExisting("placement", newValue);
  }
  get placement() {
    return this._placement;
  }
  set preventOverflow(newValue) {
    this._preventOverflow = NgxPopperjsUtils.coerceBooleanProperty(newValue);
    this._checkExisting("preventOverflow", this._preventOverflow);
  }
  get preventOverflow() {
    return this._preventOverflow;
  }
  set popperApplyArrowClass(newValue) {
    if (newValue === this._applyArrowClass) {
      return;
    }
    this._applyArrowClass = newValue;
    if (this._popperContent) {
      this._popperContent.popperOptions.applyArrowClass = newValue;
      if (!this._shown) {
        return;
      }
      this._popperContent.update();
    }
  }
  get popperApplyArrowClass() {
    return this._applyArrowClass;
  }
  set disabled(newValue) {
    if (newValue === this._disabled) {
      return;
    }
    this._disabled = !!newValue;
    if (this._shown) {
      this.hide();
    }
  }
  get disabled() {
    return this._disabled;
  }
  ariaDescribe;
  ariaRole;
  boundariesElement;
  disableAnimation;
  disableStyle;
  hideOnMouseLeave;
  hideOnScroll;
  hideTimeout = 0;
  popperAppendTo;
  popperOnHidden = new EventEmitter();
  popperOnShown = new EventEmitter();
  popperOnUpdate = new EventEmitter();
  positionFixed;
  showDelay;
  showOnStart;
  showTrigger;
  styles;
  targetElement;
  timeoutAfterShow = 0;
  _applyArrowClass;
  _applyClass;
  _content;
  _destroy$ = new Subject();
  _disabled;
  _flip = true;
  _globalEventListenersCtrl$ = new Subject();
  _hideOnClickOutside = true;
  _placement;
  _popperContent;
  _popperContentClass = NgxPopperjsContentComponent;
  _popperContentRef;
  _preventOverflow = true;
  _scheduledHideTimeoutCtrl$ = new Subject();
  _scheduledShowTimeoutCtrl$ = new Subject();
  _shown = false;
  constructor(_changeDetectorRef, _elementRef, _vcr, _popperDefaults = {}) {
    this._changeDetectorRef = _changeDetectorRef;
    this._elementRef = _elementRef;
    this._vcr = _vcr;
    this._popperDefaults = _popperDefaults;
    _NgxPopperjsDirective.baseOptions = __spreadValues(__spreadValues({}, _NgxPopperjsDirective.baseOptions), this._popperDefaults);
  }
  static assignDefined(target, ...sources) {
    for (const source of sources) {
      for (const key of Object.keys(source)) {
        const val = source[key];
        if (val !== void 0) {
          target[key] = val;
        }
      }
    }
    return target;
  }
  applyTriggerListeners() {
    switch (this.showTrigger) {
      case NgxPopperjsTriggers.click:
        this._addListener("click", this.toggle.bind(this));
        break;
      case NgxPopperjsTriggers.mousedown:
        this._addListener("mousedown", this.toggle.bind(this));
        break;
      case NgxPopperjsTriggers.hover:
        this._addListener("mouseenter", this.scheduledShow.bind(this, this.showDelay));
        ["touchend", "touchcancel", "mouseleave"].forEach((eventName) => {
          this._addListener(eventName, this.scheduledHide.bind(this, null, this.hideTimeout));
        });
        break;
    }
    if (this.showTrigger !== NgxPopperjsTriggers.hover && this.hideOnMouseLeave) {
      ["touchend", "touchcancel", "mouseleave"].forEach((eventName) => {
        this._addListener(eventName, this.scheduledHide.bind(this, null, this.hideTimeout));
      });
    }
  }
  getRefElement() {
    return this.targetElement || this._elementRef.nativeElement;
  }
  hide() {
    if (this.disabled) {
      return;
    }
    if (!this._shown) {
      this._scheduledShowTimeoutCtrl$.next();
      return;
    }
    this._shown = false;
    if (this._popperContentRef) {
      this._popperContentRef.instance.hide();
    } else {
      this._popperContent.hide();
    }
    this.popperOnHidden.emit(this);
    this._globalEventListenersCtrl$.next();
  }
  hideOnClickOutsideHandler($event) {
    if (this.disabled || !this.hideOnClickOutside || $event.target === this._popperContent.elRef.nativeElement || this._popperContent.elRef.nativeElement.contains($event.target)) {
      return;
    }
    this.scheduledHide($event, this.hideTimeout);
  }
  hideOnScrollHandler($event) {
    if (this.disabled || !this.hideOnScroll) {
      return;
    }
    this.scheduledHide($event, this.hideTimeout);
  }
  ngOnDestroy() {
    this._destroy$.next();
    this._destroy$.complete();
    this._popperContent && this._popperContent.clean();
  }
  ngOnInit() {
    if (typeof this.content === "string") {
      this._popperContent = this._constructContent();
      this._popperContent.text = this.content;
    } else if (typeof this.content === "undefined") {
      this._popperContent = this._constructContent();
      this._popperContent.text = "";
    } else {
      this._popperContent = this.content;
    }
    const popperRef = this._popperContent;
    popperRef.referenceObject = this.getRefElement();
    this._setContentProperties(popperRef);
    this._setDefaults();
    this.applyTriggerListeners();
    if (this.showOnStart) {
      this.scheduledShow();
    }
  }
  scheduledHide($event = null, delay = this.hideTimeout) {
    if (this.disabled) {
      return;
    }
    this._scheduledShowTimeoutCtrl$.next();
    timer(delay).pipe(takeUntil(this._scheduledHideTimeoutCtrl$), takeUntil(this._destroy$)).subscribe({
      next: () => {
        const toElement = $event ? $event.toElement : null;
        const popperContentView = this._popperContent.popperViewRef ? this._popperContent.popperViewRef.nativeElement : false;
        if (!popperContentView || popperContentView === toElement || popperContentView.contains(toElement) || this.content && this.content.isMouseOver) {
          return;
        }
        this.hide();
        this._applyChanges();
      }
    });
  }
  scheduledShow(delay = this.showDelay) {
    if (this.disabled) {
      return;
    }
    this._scheduledHideTimeoutCtrl$.next();
    timer(delay).pipe(takeUntil(this._scheduledShowTimeoutCtrl$), takeUntil(this._destroy$)).subscribe({
      next: () => {
        this.show();
        this._applyChanges();
      }
    });
  }
  show() {
    if (this._shown) {
      this._scheduledHideTimeoutCtrl$.next();
      return;
    }
    this._shown = true;
    const popperRef = this._popperContent;
    const element = this.getRefElement();
    if (popperRef.referenceObject !== element) {
      popperRef.referenceObject = element;
    }
    this._setContentProperties(popperRef);
    popperRef.show();
    this.popperOnShown.emit(this);
    if (this.timeoutAfterShow > 0) {
      this.scheduledHide(null, this.timeoutAfterShow);
    }
    fromEvent(document, "click").pipe(takeUntil(this._globalEventListenersCtrl$), takeUntil(this._destroy$)).subscribe({
      next: (e2) => this.hideOnClickOutsideHandler(e2)
    });
    fromEvent(this._getScrollParent(this.getRefElement()), "scroll").pipe(takeUntil(this._globalEventListenersCtrl$), takeUntil(this._destroy$)).subscribe({
      next: (e2) => {
        this.hideOnScrollHandler(e2);
      }
    });
  }
  toggle() {
    if (this.disabled) {
      return;
    }
    this._shown ? this.scheduledHide(null, this.hideTimeout) : this.scheduledShow();
  }
  _addListener(eventName, cb) {
    fromEvent(this._elementRef.nativeElement, eventName).pipe(takeUntil(this._destroy$)).subscribe({
      next: cb
    });
  }
  _applyChanges() {
    this._changeDetectorRef.markForCheck();
    this._changeDetectorRef.detectChanges();
  }
  _checkExisting(key, newValue) {
    if (this._popperContent) {
      this._popperContent.popperOptions[key] = newValue;
      if (!this._shown) {
        return;
      }
      this._popperContent.update();
    }
  }
  _constructContent() {
    this._popperContentRef = this._vcr.createComponent(this._popperContentClass);
    return this._popperContentRef.instance;
  }
  _getScrollParent(node) {
    const isElement2 = node instanceof HTMLElement;
    const overflowY = isElement2 && window.getComputedStyle(node).overflowY;
    const isScrollable = overflowY !== "visible" && overflowY !== "hidden";
    if (!node) {
      return null;
    } else if (isScrollable && node.scrollHeight > node.clientHeight) {
      return node;
    }
    return this._getScrollParent(node.parentNode) || document;
  }
  _onPopperUpdate(event) {
    this.popperOnUpdate.emit(event);
  }
  _setContentProperties(popperRef) {
    popperRef.popperOptions = _NgxPopperjsDirective.assignDefined(popperRef.popperOptions, _NgxPopperjsDirective.baseOptions, {
      showDelay: this.showDelay,
      disableAnimation: this.disableAnimation,
      disableDefaultStyling: this.disableStyle,
      placement: this.placement,
      boundariesElement: this.boundariesElement,
      trigger: this.showTrigger,
      positionFixed: this.positionFixed,
      ariaDescribe: this.ariaDescribe,
      ariaRole: this.ariaRole,
      applyClass: this.applyClass,
      applyArrowClass: this.popperApplyArrowClass,
      hideOnMouseLeave: this.hideOnMouseLeave,
      styles: this.styles,
      appendTo: this.popperAppendTo,
      preventOverflow: this.preventOverflow
    });
    popperRef.onUpdate = this._onPopperUpdate.bind(this);
    popperRef.onHidden.pipe(takeUntil(this._destroy$)).subscribe(this.hide.bind(this));
  }
  _setDefaults() {
    ["showDelay", "hideOnScroll", "hideOnMouseLeave", "hideOnClickOutside", "ariaRole", "ariaDescribe"].forEach((key) => {
      this[key] = this[key] === void 0 ? _NgxPopperjsDirective.baseOptions[key] : this[key];
    });
    this.showTrigger = this.showTrigger || _NgxPopperjsDirective.baseOptions.trigger;
    this.styles = this.styles === void 0 ? __spreadValues({}, _NgxPopperjsDirective.baseOptions.styles) : this.styles;
  }
  /** @nocollapse */
  static ɵfac = function NgxPopperjsDirective_Factory(t2) {
    return new (t2 || _NgxPopperjsDirective)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(NGX_POPPERJS_DEFAULTS));
  };
  /** @nocollapse */
  static ɵdir = ɵɵdefineDirective({
    type: _NgxPopperjsDirective,
    selectors: [["", "popper", ""]],
    inputs: {
      applyClass: ["popperApplyClass", "applyClass"],
      hideOnClickOutside: ["popperHideOnClickOutside", "hideOnClickOutside"],
      content: ["popper", "content"],
      flip: ["popperFlip", "flip"],
      placement: ["popperPlacement", "placement"],
      preventOverflow: ["popperPreventOverflow", "preventOverflow"],
      popperApplyArrowClass: "popperApplyArrowClass",
      disabled: ["popperDisabled", "disabled"],
      ariaDescribe: ["popperAriaDescribeBy", "ariaDescribe"],
      ariaRole: ["popperAriaRole", "ariaRole"],
      boundariesElement: ["popperBoundaries", "boundariesElement"],
      disableAnimation: ["popperDisableAnimation", "disableAnimation"],
      disableStyle: ["popperDisableStyle", "disableStyle"],
      hideOnMouseLeave: ["popperHideOnMouseLeave", "hideOnMouseLeave"],
      hideOnScroll: ["popperHideOnScroll", "hideOnScroll"],
      hideTimeout: ["popperTimeout", "hideTimeout"],
      popperAppendTo: "popperAppendTo",
      positionFixed: ["popperPositionFixed", "positionFixed"],
      showDelay: ["popperDelay", "showDelay"],
      showOnStart: ["popperShowOnStart", "showOnStart"],
      showTrigger: ["popperTrigger", "showTrigger"],
      styles: ["popperStyles", "styles"],
      targetElement: ["popperTarget", "targetElement"],
      timeoutAfterShow: ["popperTimeoutAfterShow", "timeoutAfterShow"]
    },
    outputs: {
      popperOnHidden: "popperOnHidden",
      popperOnShown: "popperOnShown",
      popperOnUpdate: "popperOnUpdate"
    },
    exportAs: ["popper"],
    standalone: true
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgxPopperjsDirective, [{
    type: Directive,
    args: [{
      // tslint:disable-next-line:directive-selector
      selector: "[popper]",
      exportAs: "popper",
      standalone: true
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: ElementRef
  }, {
    type: ViewContainerRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [NGX_POPPERJS_DEFAULTS]
    }]
  }], {
    applyClass: [{
      type: Input,
      args: ["popperApplyClass"]
    }],
    hideOnClickOutside: [{
      type: Input,
      args: ["popperHideOnClickOutside"]
    }],
    content: [{
      type: Input,
      args: ["popper"]
    }],
    flip: [{
      type: Input,
      args: ["popperFlip"]
    }],
    placement: [{
      type: Input,
      args: ["popperPlacement"]
    }],
    preventOverflow: [{
      type: Input,
      args: ["popperPreventOverflow"]
    }],
    popperApplyArrowClass: [{
      type: Input
    }],
    disabled: [{
      type: Input,
      args: ["popperDisabled"]
    }],
    ariaDescribe: [{
      type: Input,
      args: ["popperAriaDescribeBy"]
    }],
    ariaRole: [{
      type: Input,
      args: ["popperAriaRole"]
    }],
    boundariesElement: [{
      type: Input,
      args: ["popperBoundaries"]
    }],
    disableAnimation: [{
      type: Input,
      args: ["popperDisableAnimation"]
    }],
    disableStyle: [{
      type: Input,
      args: ["popperDisableStyle"]
    }],
    hideOnMouseLeave: [{
      type: Input,
      args: ["popperHideOnMouseLeave"]
    }],
    hideOnScroll: [{
      type: Input,
      args: ["popperHideOnScroll"]
    }],
    hideTimeout: [{
      type: Input,
      args: ["popperTimeout"]
    }],
    popperAppendTo: [{
      type: Input
    }],
    popperOnHidden: [{
      type: Output
    }],
    popperOnShown: [{
      type: Output
    }],
    popperOnUpdate: [{
      type: Output
    }],
    positionFixed: [{
      type: Input,
      args: ["popperPositionFixed"]
    }],
    showDelay: [{
      type: Input,
      args: ["popperDelay"]
    }],
    showOnStart: [{
      type: Input,
      args: ["popperShowOnStart"]
    }],
    showTrigger: [{
      type: Input,
      args: ["popperTrigger"]
    }],
    styles: [{
      type: Input,
      args: ["popperStyles"]
    }],
    targetElement: [{
      type: Input,
      args: ["popperTarget"]
    }],
    timeoutAfterShow: [{
      type: Input,
      args: ["popperTimeoutAfterShow"]
    }]
  });
})();
var NgxPopperjsLooseDirective = class _NgxPopperjsLooseDirective extends NgxPopperjsDirective {
  set popperLoose(newValue) {
    this.content = newValue;
  }
  set popperLoosePlacement(newValue) {
    this.placement = newValue;
  }
  set popperLooseTrigger(newValue) {
    this.showTrigger = newValue;
  }
  constructor(changeDetectorRef, elementRef, vcr, popperDefaults = {}) {
    super(changeDetectorRef, elementRef, vcr, popperDefaults);
  }
  /** @nocollapse */
  static ɵfac = function NgxPopperjsLooseDirective_Factory(t2) {
    return new (t2 || _NgxPopperjsLooseDirective)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(NGX_POPPERJS_DEFAULTS));
  };
  /** @nocollapse */
  static ɵdir = ɵɵdefineDirective({
    type: _NgxPopperjsLooseDirective,
    selectors: [["", "popperLoose", ""]],
    inputs: {
      popperLoose: "popperLoose",
      popperLoosePlacement: "popperLoosePlacement",
      popperLooseTrigger: "popperLooseTrigger"
    },
    exportAs: ["popperLoose"],
    standalone: true,
    features: [ɵɵInheritDefinitionFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgxPopperjsLooseDirective, [{
    type: Directive,
    args: [{
      selector: "[popperLoose]",
      exportAs: "popperLoose",
      standalone: true
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: ElementRef
  }, {
    type: ViewContainerRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [NGX_POPPERJS_DEFAULTS]
    }]
  }], {
    popperLoose: [{
      type: Input
    }],
    popperLoosePlacement: [{
      type: Input
    }],
    popperLooseTrigger: [{
      type: Input
    }]
  });
})();
var NgxPopperjsPlacements;
(function(NgxPopperjsPlacements2) {
  NgxPopperjsPlacements2["TOP"] = "top";
  NgxPopperjsPlacements2["BOTTOM"] = "bottom";
  NgxPopperjsPlacements2["LEFT"] = "left";
  NgxPopperjsPlacements2["RIGHT"] = "right";
  NgxPopperjsPlacements2["TOPSTART"] = "top-start";
  NgxPopperjsPlacements2["BOTTOMSTART"] = "bottom-start";
  NgxPopperjsPlacements2["LEFTSTART"] = "left-start";
  NgxPopperjsPlacements2["RIGHTSTART"] = "right-start";
  NgxPopperjsPlacements2["TOPEND"] = "top-end";
  NgxPopperjsPlacements2["BOTTOMEND"] = "bottom-end";
  NgxPopperjsPlacements2["LEFTEND"] = "left-end";
  NgxPopperjsPlacements2["RIGHTEND"] = "right-end";
})(NgxPopperjsPlacements || (NgxPopperjsPlacements = {}));
function provideNgxPopperjsOptions(config = {}) {
  return [{
    provide: NGX_POPPERJS_DEFAULTS,
    useValue: config
  }];
}
var NgxPopperjsModule = class _NgxPopperjsModule {
  static forRoot(popperBaseOptions) {
    return {
      ngModule: _NgxPopperjsModule,
      providers: [provideNgxPopperjsOptions(popperBaseOptions)]
    };
  }
  /** @nocollapse */
  static ɵfac = function NgxPopperjsModule_Factory(t2) {
    return new (t2 || _NgxPopperjsModule)();
  };
  /** @nocollapse */
  static ɵmod = ɵɵdefineNgModule({
    type: _NgxPopperjsModule,
    imports: [CommonModule, NgxPopperjsContentComponent, NgxPopperjsDirective, NgxPopperjsLooseDirective],
    exports: [NgxPopperjsContentComponent, NgxPopperjsDirective, NgxPopperjsLooseDirective]
  });
  /** @nocollapse */
  static ɵinj = ɵɵdefineInjector({
    providers: [provideNgxPopperjsOptions()],
    imports: [CommonModule]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgxPopperjsModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, NgxPopperjsContentComponent, NgxPopperjsDirective, NgxPopperjsLooseDirective],
      exports: [NgxPopperjsContentComponent, NgxPopperjsDirective, NgxPopperjsLooseDirective],
      providers: [provideNgxPopperjsOptions()]
    }]
  }], null, null);
})();

// node_modules/stream-chat-angular/fesm2015/stream-chat-angular.js
var import_dayjs = __toESM(require_dayjs_min());
var import_calendar = __toESM(require_calendar());
var import_relativeTime = __toESM(require_relativeTime());

// node_modules/@stream-io/transliterate/dist/index.modern.js
var import_lodash = __toESM(require_lodash());
function t() {
  return t = Object.assign || function(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var o2 = arguments[t2];
      for (var a2 in o2)
        Object.prototype.hasOwnProperty.call(o2, a2) && (e2[a2] = o2[a2]);
    }
    return e2;
  }, t.apply(this, arguments);
}
var o = /[|\\{}()[\]^$+*?.]/g;
var a = function(e2) {
  if ("string" != typeof e2)
    throw new TypeError("Expected a string");
  return e2.replace(o, "\\$&");
};
var s = [["ß", "ss"], ["ẞ", "Ss"], ["ä", "ae"], ["Ä", "Ae"], ["ö", "oe"], ["Ö", "Oe"], ["ü", "ue"], ["Ü", "Ue"], ["À", "A"], ["Á", "A"], ["Â", "A"], ["Ã", "A"], ["Ä", "Ae"], ["Å", "A"], ["Æ", "AE"], ["Ç", "C"], ["È", "E"], ["É", "E"], ["Ê", "E"], ["Ë", "E"], ["Ì", "I"], ["Í", "I"], ["Î", "I"], ["Ï", "I"], ["Ð", "D"], ["Ñ", "N"], ["Ò", "O"], ["Ó", "O"], ["Ô", "O"], ["Õ", "O"], ["Ö", "Oe"], ["Ő", "O"], ["Ø", "O"], ["Ù", "U"], ["Ú", "U"], ["Û", "U"], ["Ü", "Ue"], ["Ű", "U"], ["Ý", "Y"], ["Þ", "TH"], ["ß", "ss"], ["à", "a"], ["á", "a"], ["â", "a"], ["ã", "a"], ["ä", "ae"], ["å", "a"], ["æ", "ae"], ["ç", "c"], ["è", "e"], ["é", "e"], ["ê", "e"], ["ë", "e"], ["ì", "i"], ["í", "i"], ["î", "i"], ["ï", "i"], ["ð", "d"], ["ñ", "n"], ["ò", "o"], ["ó", "o"], ["ô", "o"], ["õ", "o"], ["ö", "oe"], ["ő", "o"], ["ø", "o"], ["ù", "u"], ["ú", "u"], ["û", "u"], ["ü", "ue"], ["ű", "u"], ["ý", "y"], ["þ", "th"], ["ÿ", "y"], ["ẞ", "SS"], ["à", "a"], ["À", "A"], ["á", "a"], ["Á", "A"], ["â", "a"], ["Â", "A"], ["ã", "a"], ["Ã", "A"], ["è", "e"], ["È", "E"], ["é", "e"], ["É", "E"], ["ê", "e"], ["Ê", "E"], ["ì", "i"], ["Ì", "I"], ["í", "i"], ["Í", "I"], ["ò", "o"], ["Ò", "O"], ["ó", "o"], ["Ó", "O"], ["ô", "o"], ["Ô", "O"], ["õ", "o"], ["Õ", "O"], ["ù", "u"], ["Ù", "U"], ["ú", "u"], ["Ú", "U"], ["ý", "y"], ["Ý", "Y"], ["ă", "a"], ["Ă", "A"], ["Đ", "D"], ["đ", "d"], ["ĩ", "i"], ["Ĩ", "I"], ["ũ", "u"], ["Ũ", "U"], ["ơ", "o"], ["Ơ", "O"], ["ư", "u"], ["Ư", "U"], ["ạ", "a"], ["Ạ", "A"], ["ả", "a"], ["Ả", "A"], ["ấ", "a"], ["Ấ", "A"], ["ầ", "a"], ["Ầ", "A"], ["ẩ", "a"], ["Ẩ", "A"], ["ẫ", "a"], ["Ẫ", "A"], ["ậ", "a"], ["Ậ", "A"], ["ắ", "a"], ["Ắ", "A"], ["ằ", "a"], ["Ằ", "A"], ["ẳ", "a"], ["Ẳ", "A"], ["ẵ", "a"], ["Ẵ", "A"], ["ặ", "a"], ["Ặ", "A"], ["ẹ", "e"], ["Ẹ", "E"], ["ẻ", "e"], ["Ẻ", "E"], ["ẽ", "e"], ["Ẽ", "E"], ["ế", "e"], ["Ế", "E"], ["ề", "e"], ["Ề", "E"], ["ể", "e"], ["Ể", "E"], ["ễ", "e"], ["Ễ", "E"], ["ệ", "e"], ["Ệ", "E"], ["ỉ", "i"], ["Ỉ", "I"], ["ị", "i"], ["Ị", "I"], ["ọ", "o"], ["Ọ", "O"], ["ỏ", "o"], ["Ỏ", "O"], ["ố", "o"], ["Ố", "O"], ["ồ", "o"], ["Ồ", "O"], ["ổ", "o"], ["Ổ", "O"], ["ỗ", "o"], ["Ỗ", "O"], ["ộ", "o"], ["Ộ", "O"], ["ớ", "o"], ["Ớ", "O"], ["ờ", "o"], ["Ờ", "O"], ["ở", "o"], ["Ở", "O"], ["ỡ", "o"], ["Ỡ", "O"], ["ợ", "o"], ["Ợ", "O"], ["ụ", "u"], ["Ụ", "U"], ["ủ", "u"], ["Ủ", "U"], ["ứ", "u"], ["Ứ", "U"], ["ừ", "u"], ["Ừ", "U"], ["ử", "u"], ["Ử", "U"], ["ữ", "u"], ["Ữ", "U"], ["ự", "u"], ["Ự", "U"], ["ỳ", "y"], ["Ỳ", "Y"], ["ỵ", "y"], ["Ỵ", "Y"], ["ỷ", "y"], ["Ỷ", "Y"], ["ỹ", "y"], ["Ỹ", "Y"], ["ء", "e"], ["آ", "a"], ["أ", "a"], ["ؤ", "w"], ["إ", "i"], ["ئ", "y"], ["ا", "a"], ["ب", "b"], ["ة", "t"], ["ت", "t"], ["ث", "th"], ["ج", "j"], ["ح", "h"], ["خ", "kh"], ["د", "d"], ["ذ", "dh"], ["ر", "r"], ["ز", "z"], ["س", "s"], ["ش", "sh"], ["ص", "s"], ["ض", "d"], ["ط", "t"], ["ظ", "z"], ["ع", "e"], ["غ", "gh"], ["ـ", "_"], ["ف", "f"], ["ق", "q"], ["ك", "k"], ["ل", "l"], ["م", "m"], ["ن", "n"], ["ه", "h"], ["و", "w"], ["ى", "a"], ["ي", "y"], ["َ‎", "a"], ["ُ", "u"], ["ِ‎", "i"], ["٠", "0"], ["١", "1"], ["٢", "2"], ["٣", "3"], ["٤", "4"], ["٥", "5"], ["٦", "6"], ["٧", "7"], ["٨", "8"], ["٩", "9"], ["چ", "ch"], ["ک", "k"], ["گ", "g"], ["پ", "p"], ["ژ", "zh"], ["ی", "y"], ["۰", "0"], ["۱", "1"], ["۲", "2"], ["۳", "3"], ["۴", "4"], ["۵", "5"], ["۶", "6"], ["۷", "7"], ["۸", "8"], ["۹", "9"], ["ټ", "p"], ["ځ", "z"], ["څ", "c"], ["ډ", "d"], ["ﺫ", "d"], ["ﺭ", "r"], ["ړ", "r"], ["ﺯ", "z"], ["ږ", "g"], ["ښ", "x"], ["ګ", "g"], ["ڼ", "n"], ["ۀ", "e"], ["ې", "e"], ["ۍ", "ai"], ["ٹ", "t"], ["ڈ", "d"], ["ڑ", "r"], ["ں", "n"], ["ہ", "h"], ["ھ", "h"], ["ے", "e"], ["А", "A"], ["а", "a"], ["Б", "B"], ["б", "b"], ["В", "V"], ["в", "v"], ["Г", "G"], ["г", "g"], ["Д", "D"], ["д", "d"], ["ъе", "ye"], ["Ъе", "Ye"], ["ъЕ", "yE"], ["ЪЕ", "YE"], ["Е", "E"], ["е", "e"], ["Ё", "Yo"], ["ё", "yo"], ["Ж", "Zh"], ["ж", "zh"], ["З", "Z"], ["з", "z"], ["И", "I"], ["и", "i"], ["ый", "iy"], ["Ый", "Iy"], ["ЫЙ", "IY"], ["ыЙ", "iY"], ["Й", "Y"], ["й", "y"], ["К", "K"], ["к", "k"], ["Л", "L"], ["л", "l"], ["М", "M"], ["м", "m"], ["Н", "N"], ["н", "n"], ["О", "O"], ["о", "o"], ["П", "P"], ["п", "p"], ["Р", "R"], ["р", "r"], ["С", "S"], ["с", "s"], ["Т", "T"], ["т", "t"], ["У", "U"], ["у", "u"], ["Ф", "F"], ["ф", "f"], ["Х", "Kh"], ["х", "kh"], ["Ц", "Ts"], ["ц", "ts"], ["Ч", "Ch"], ["ч", "ch"], ["Ш", "Sh"], ["ш", "sh"], ["Щ", "Sch"], ["щ", "sch"], ["Ъ", ""], ["ъ", ""], ["Ы", "Y"], ["ы", "y"], ["Ь", ""], ["ь", ""], ["Э", "E"], ["э", "e"], ["Ю", "Yu"], ["ю", "yu"], ["Я", "Ya"], ["я", "ya"], ["ă", "a"], ["Ă", "A"], ["ș", "s"], ["Ș", "S"], ["ț", "t"], ["Ț", "T"], ["ţ", "t"], ["Ţ", "T"], ["ş", "s"], ["Ş", "S"], ["ç", "c"], ["Ç", "C"], ["ğ", "g"], ["Ğ", "G"], ["ı", "i"], ["İ", "I"], ["ա", "a"], ["Ա", "A"], ["բ", "b"], ["Բ", "B"], ["գ", "g"], ["Գ", "G"], ["դ", "d"], ["Դ", "D"], ["ե", "ye"], ["Ե", "Ye"], ["զ", "z"], ["Զ", "Z"], ["է", "e"], ["Է", "E"], ["ը", "y"], ["Ը", "Y"], ["թ", "t"], ["Թ", "T"], ["ժ", "zh"], ["Ժ", "Zh"], ["ի", "i"], ["Ի", "I"], ["լ", "l"], ["Լ", "L"], ["խ", "kh"], ["Խ", "Kh"], ["ծ", "ts"], ["Ծ", "Ts"], ["կ", "k"], ["Կ", "K"], ["հ", "h"], ["Հ", "H"], ["ձ", "dz"], ["Ձ", "Dz"], ["ղ", "gh"], ["Ղ", "Gh"], ["ճ", "tch"], ["Ճ", "Tch"], ["մ", "m"], ["Մ", "M"], ["յ", "y"], ["Յ", "Y"], ["ն", "n"], ["Ն", "N"], ["շ", "sh"], ["Շ", "Sh"], ["ո", "vo"], ["Ո", "Vo"], ["չ", "ch"], ["Չ", "Ch"], ["պ", "p"], ["Պ", "P"], ["ջ", "j"], ["Ջ", "J"], ["ռ", "r"], ["Ռ", "R"], ["ս", "s"], ["Ս", "S"], ["վ", "v"], ["Վ", "V"], ["տ", "t"], ["Տ", "T"], ["ր", "r"], ["Ր", "R"], ["ց", "c"], ["Ց", "C"], ["ու", "u"], ["ՈՒ", "U"], ["Ու", "U"], ["փ", "p"], ["Փ", "P"], ["ք", "q"], ["Ք", "Q"], ["օ", "o"], ["Օ", "O"], ["ֆ", "f"], ["Ֆ", "F"], ["և", "yev"], ["ა", "a"], ["ბ", "b"], ["გ", "g"], ["დ", "d"], ["ე", "e"], ["ვ", "v"], ["ზ", "z"], ["თ", "t"], ["ი", "i"], ["კ", "k"], ["ლ", "l"], ["მ", "m"], ["ნ", "n"], ["ო", "o"], ["პ", "p"], ["ჟ", "zh"], ["რ", "r"], ["ს", "s"], ["ტ", "t"], ["უ", "u"], ["ფ", "ph"], ["ქ", "q"], ["ღ", "gh"], ["ყ", "k"], ["შ", "sh"], ["ჩ", "ch"], ["ც", "ts"], ["ძ", "dz"], ["წ", "ts"], ["ჭ", "tch"], ["ხ", "kh"], ["ჯ", "j"], ["ჰ", "h"], ["č", "c"], ["ď", "d"], ["ě", "e"], ["ň", "n"], ["ř", "r"], ["š", "s"], ["ť", "t"], ["ů", "u"], ["ž", "z"], ["Č", "C"], ["Ď", "D"], ["Ě", "E"], ["Ň", "N"], ["Ř", "R"], ["Š", "S"], ["Ť", "T"], ["Ů", "U"], ["Ž", "Z"], ["ހ", "h"], ["ށ", "sh"], ["ނ", "n"], ["ރ", "r"], ["ބ", "b"], ["ޅ", "lh"], ["ކ", "k"], ["އ", "a"], ["ވ", "v"], ["މ", "m"], ["ފ", "f"], ["ދ", "dh"], ["ތ", "th"], ["ލ", "l"], ["ގ", "g"], ["ޏ", "gn"], ["ސ", "s"], ["ޑ", "d"], ["ޒ", "z"], ["ޓ", "t"], ["ޔ", "y"], ["ޕ", "p"], ["ޖ", "j"], ["ޗ", "ch"], ["ޘ", "tt"], ["ޙ", "hh"], ["ޚ", "kh"], ["ޛ", "th"], ["ޜ", "z"], ["ޝ", "sh"], ["ޞ", "s"], ["ޟ", "d"], ["ޠ", "t"], ["ޡ", "z"], ["ޢ", "a"], ["ޣ", "gh"], ["ޤ", "q"], ["ޥ", "w"], ["ަ", "a"], ["ާ", "aa"], ["ި", "i"], ["ީ", "ee"], ["ު", "u"], ["ޫ", "oo"], ["ެ", "e"], ["ޭ", "ey"], ["ޮ", "o"], ["ޯ", "oa"], ["ް", ""], ["α", "a"], ["β", "v"], ["γ", "g"], ["δ", "d"], ["ε", "e"], ["ζ", "z"], ["η", "i"], ["θ", "th"], ["ι", "i"], ["κ", "k"], ["λ", "l"], ["μ", "m"], ["ν", "n"], ["ξ", "ks"], ["ο", "o"], ["π", "p"], ["ρ", "r"], ["σ", "s"], ["τ", "t"], ["υ", "y"], ["φ", "f"], ["χ", "x"], ["ψ", "ps"], ["ω", "o"], ["ά", "a"], ["έ", "e"], ["ί", "i"], ["ό", "o"], ["ύ", "y"], ["ή", "i"], ["ώ", "o"], ["ς", "s"], ["ϊ", "i"], ["ΰ", "y"], ["ϋ", "y"], ["ΐ", "i"], ["Α", "A"], ["Β", "B"], ["Γ", "G"], ["Δ", "D"], ["Ε", "E"], ["Ζ", "Z"], ["Η", "I"], ["Θ", "TH"], ["Ι", "I"], ["Κ", "K"], ["Λ", "L"], ["Μ", "M"], ["Ν", "N"], ["Ξ", "KS"], ["Ο", "O"], ["Π", "P"], ["Ρ", "R"], ["Σ", "S"], ["Τ", "T"], ["Υ", "Y"], ["Φ", "F"], ["Χ", "X"], ["Ψ", "PS"], ["Ω", "O"], ["Ά", "A"], ["Έ", "E"], ["Ί", "I"], ["Ό", "O"], ["Ύ", "Y"], ["Ή", "I"], ["Ώ", "O"], ["Ϊ", "I"], ["Ϋ", "Y"], ["ā", "a"], ["ē", "e"], ["ģ", "g"], ["ī", "i"], ["ķ", "k"], ["ļ", "l"], ["ņ", "n"], ["ū", "u"], ["Ā", "A"], ["Ē", "E"], ["Ģ", "G"], ["Ī", "I"], ["Ķ", "K"], ["Ļ", "L"], ["Ņ", "N"], ["Ū", "U"], ["č", "c"], ["š", "s"], ["ž", "z"], ["Č", "C"], ["Š", "S"], ["Ž", "Z"], ["ą", "a"], ["č", "c"], ["ę", "e"], ["ė", "e"], ["į", "i"], ["š", "s"], ["ų", "u"], ["ū", "u"], ["ž", "z"], ["Ą", "A"], ["Č", "C"], ["Ę", "E"], ["Ė", "E"], ["Į", "I"], ["Š", "S"], ["Ų", "U"], ["Ū", "U"], ["Ќ", "Kj"], ["ќ", "kj"], ["Љ", "Lj"], ["љ", "lj"], ["Њ", "Nj"], ["њ", "nj"], ["Тс", "Ts"], ["тс", "ts"], ["ą", "a"], ["ć", "c"], ["ę", "e"], ["ł", "l"], ["ń", "n"], ["ś", "s"], ["ź", "z"], ["ż", "z"], ["Ą", "A"], ["Ć", "C"], ["Ę", "E"], ["Ł", "L"], ["Ń", "N"], ["Ś", "S"], ["Ź", "Z"], ["Ż", "Z"], ["Є", "Ye"], ["І", "I"], ["Ї", "Yi"], ["Ґ", "G"], ["є", "ye"], ["і", "i"], ["ї", "yi"], ["ґ", "g"], ["Ĳ", "IJ"], ["ĳ", "ij"], ["¢", "c"], ["¥", "Y"], ["߿", "b"], ["৳", "t"], ["૱", "Bo"], ["฿", "B"], ["₠", "CE"], ["₡", "C"], ["₢", "Cr"], ["₣", "F"], ["₥", "m"], ["₦", "N"], ["₧", "Pt"], ["₨", "Rs"], ["₩", "W"], ["₫", "s"], ["€", "E"], ["₭", "K"], ["₮", "T"], ["₯", "Dp"], ["₰", "S"], ["₱", "P"], ["₲", "G"], ["₳", "A"], ["₴", "S"], ["₵", "C"], ["₶", "tt"], ["₷", "S"], ["₸", "T"], ["₹", "R"], ["₺", "L"], ["₽", "P"], ["₿", "B"], ["﹩", "$"], ["￠", "c"], ["￥", "Y"], ["￦", "W"], ["𝐀", "A"], ["𝐁", "B"], ["𝐂", "C"], ["𝐃", "D"], ["𝐄", "E"], ["𝐅", "F"], ["𝐆", "G"], ["𝐇", "H"], ["𝐈", "I"], ["𝐉", "J"], ["𝐊", "K"], ["𝐋", "L"], ["𝐌", "M"], ["𝐍", "N"], ["𝐎", "O"], ["𝐏", "P"], ["𝐐", "Q"], ["𝐑", "R"], ["𝐒", "S"], ["𝐓", "T"], ["𝐔", "U"], ["𝐕", "V"], ["𝐖", "W"], ["𝐗", "X"], ["𝐘", "Y"], ["𝐙", "Z"], ["𝐚", "a"], ["𝐛", "b"], ["𝐜", "c"], ["𝐝", "d"], ["𝐞", "e"], ["𝐟", "f"], ["𝐠", "g"], ["𝐡", "h"], ["𝐢", "i"], ["𝐣", "j"], ["𝐤", "k"], ["𝐥", "l"], ["𝐦", "m"], ["𝐧", "n"], ["𝐨", "o"], ["𝐩", "p"], ["𝐪", "q"], ["𝐫", "r"], ["𝐬", "s"], ["𝐭", "t"], ["𝐮", "u"], ["𝐯", "v"], ["𝐰", "w"], ["𝐱", "x"], ["𝐲", "y"], ["𝐳", "z"], ["𝐴", "A"], ["𝐵", "B"], ["𝐶", "C"], ["𝐷", "D"], ["𝐸", "E"], ["𝐹", "F"], ["𝐺", "G"], ["𝐻", "H"], ["𝐼", "I"], ["𝐽", "J"], ["𝐾", "K"], ["𝐿", "L"], ["𝑀", "M"], ["𝑁", "N"], ["𝑂", "O"], ["𝑃", "P"], ["𝑄", "Q"], ["𝑅", "R"], ["𝑆", "S"], ["𝑇", "T"], ["𝑈", "U"], ["𝑉", "V"], ["𝑊", "W"], ["𝑋", "X"], ["𝑌", "Y"], ["𝑍", "Z"], ["𝑎", "a"], ["𝑏", "b"], ["𝑐", "c"], ["𝑑", "d"], ["𝑒", "e"], ["𝑓", "f"], ["𝑔", "g"], ["𝑖", "i"], ["𝑗", "j"], ["𝑘", "k"], ["𝑙", "l"], ["𝑚", "m"], ["𝑛", "n"], ["𝑜", "o"], ["𝑝", "p"], ["𝑞", "q"], ["𝑟", "r"], ["𝑠", "s"], ["𝑡", "t"], ["𝑢", "u"], ["𝑣", "v"], ["𝑤", "w"], ["𝑥", "x"], ["𝑦", "y"], ["𝑧", "z"], ["𝑨", "A"], ["𝑩", "B"], ["𝑪", "C"], ["𝑫", "D"], ["𝑬", "E"], ["𝑭", "F"], ["𝑮", "G"], ["𝑯", "H"], ["𝑰", "I"], ["𝑱", "J"], ["𝑲", "K"], ["𝑳", "L"], ["𝑴", "M"], ["𝑵", "N"], ["𝑶", "O"], ["𝑷", "P"], ["𝑸", "Q"], ["𝑹", "R"], ["𝑺", "S"], ["𝑻", "T"], ["𝑼", "U"], ["𝑽", "V"], ["𝑾", "W"], ["𝑿", "X"], ["𝒀", "Y"], ["𝒁", "Z"], ["𝒂", "a"], ["𝒃", "b"], ["𝒄", "c"], ["𝒅", "d"], ["𝒆", "e"], ["𝒇", "f"], ["𝒈", "g"], ["𝒉", "h"], ["𝒊", "i"], ["𝒋", "j"], ["𝒌", "k"], ["𝒍", "l"], ["𝒎", "m"], ["𝒏", "n"], ["𝒐", "o"], ["𝒑", "p"], ["𝒒", "q"], ["𝒓", "r"], ["𝒔", "s"], ["𝒕", "t"], ["𝒖", "u"], ["𝒗", "v"], ["𝒘", "w"], ["𝒙", "x"], ["𝒚", "y"], ["𝒛", "z"], ["𝒜", "A"], ["𝒞", "C"], ["𝒟", "D"], ["𝒢", "g"], ["𝒥", "J"], ["𝒦", "K"], ["𝒩", "N"], ["𝒪", "O"], ["𝒫", "P"], ["𝒬", "Q"], ["𝒮", "S"], ["𝒯", "T"], ["𝒰", "U"], ["𝒱", "V"], ["𝒲", "W"], ["𝒳", "X"], ["𝒴", "Y"], ["𝒵", "Z"], ["𝒶", "a"], ["𝒷", "b"], ["𝒸", "c"], ["𝒹", "d"], ["𝒻", "f"], ["𝒽", "h"], ["𝒾", "i"], ["𝒿", "j"], ["𝓀", "h"], ["𝓁", "l"], ["𝓂", "m"], ["𝓃", "n"], ["𝓅", "p"], ["𝓆", "q"], ["𝓇", "r"], ["𝓈", "s"], ["𝓉", "t"], ["𝓊", "u"], ["𝓋", "v"], ["𝓌", "w"], ["𝓍", "x"], ["𝓎", "y"], ["𝓏", "z"], ["𝓐", "A"], ["𝓑", "B"], ["𝓒", "C"], ["𝓓", "D"], ["𝓔", "E"], ["𝓕", "F"], ["𝓖", "G"], ["𝓗", "H"], ["𝓘", "I"], ["𝓙", "J"], ["𝓚", "K"], ["𝓛", "L"], ["𝓜", "M"], ["𝓝", "N"], ["𝓞", "O"], ["𝓟", "P"], ["𝓠", "Q"], ["𝓡", "R"], ["𝓢", "S"], ["𝓣", "T"], ["𝓤", "U"], ["𝓥", "V"], ["𝓦", "W"], ["𝓧", "X"], ["𝓨", "Y"], ["𝓩", "Z"], ["𝓪", "a"], ["𝓫", "b"], ["𝓬", "c"], ["𝓭", "d"], ["𝓮", "e"], ["𝓯", "f"], ["𝓰", "g"], ["𝓱", "h"], ["𝓲", "i"], ["𝓳", "j"], ["𝓴", "k"], ["𝓵", "l"], ["𝓶", "m"], ["𝓷", "n"], ["𝓸", "o"], ["𝓹", "p"], ["𝓺", "q"], ["𝓻", "r"], ["𝓼", "s"], ["𝓽", "t"], ["𝓾", "u"], ["𝓿", "v"], ["𝔀", "w"], ["𝔁", "x"], ["𝔂", "y"], ["𝔃", "z"], ["𝔄", "A"], ["𝔅", "B"], ["𝔇", "D"], ["𝔈", "E"], ["𝔉", "F"], ["𝔊", "G"], ["𝔍", "J"], ["𝔎", "K"], ["𝔏", "L"], ["𝔐", "M"], ["𝔑", "N"], ["𝔒", "O"], ["𝔓", "P"], ["𝔔", "Q"], ["𝔖", "S"], ["𝔗", "T"], ["𝔘", "U"], ["𝔙", "V"], ["𝔚", "W"], ["𝔛", "X"], ["𝔜", "Y"], ["𝔞", "a"], ["𝔟", "b"], ["𝔠", "c"], ["𝔡", "d"], ["𝔢", "e"], ["𝔣", "f"], ["𝔤", "g"], ["𝔥", "h"], ["𝔦", "i"], ["𝔧", "j"], ["𝔨", "k"], ["𝔩", "l"], ["𝔪", "m"], ["𝔫", "n"], ["𝔬", "o"], ["𝔭", "p"], ["𝔮", "q"], ["𝔯", "r"], ["𝔰", "s"], ["𝔱", "t"], ["𝔲", "u"], ["𝔳", "v"], ["𝔴", "w"], ["𝔵", "x"], ["𝔶", "y"], ["𝔷", "z"], ["𝔸", "A"], ["𝔹", "B"], ["𝔻", "D"], ["𝔼", "E"], ["𝔽", "F"], ["𝔾", "G"], ["𝕀", "I"], ["𝕁", "J"], ["𝕂", "K"], ["𝕃", "L"], ["𝕄", "M"], ["𝕆", "N"], ["𝕊", "S"], ["𝕋", "T"], ["𝕌", "U"], ["𝕍", "V"], ["𝕎", "W"], ["𝕏", "X"], ["𝕐", "Y"], ["𝕒", "a"], ["𝕓", "b"], ["𝕔", "c"], ["𝕕", "d"], ["𝕖", "e"], ["𝕗", "f"], ["𝕘", "g"], ["𝕙", "h"], ["𝕚", "i"], ["𝕛", "j"], ["𝕜", "k"], ["𝕝", "l"], ["𝕞", "m"], ["𝕟", "n"], ["𝕠", "o"], ["𝕡", "p"], ["𝕢", "q"], ["𝕣", "r"], ["𝕤", "s"], ["𝕥", "t"], ["𝕦", "u"], ["𝕧", "v"], ["𝕨", "w"], ["𝕩", "x"], ["𝕪", "y"], ["𝕫", "z"], ["𝕬", "A"], ["𝕭", "B"], ["𝕮", "C"], ["𝕯", "D"], ["𝕰", "E"], ["𝕱", "F"], ["𝕲", "G"], ["𝕳", "H"], ["𝕴", "I"], ["𝕵", "J"], ["𝕶", "K"], ["𝕷", "L"], ["𝕸", "M"], ["𝕹", "N"], ["𝕺", "O"], ["𝕻", "P"], ["𝕼", "Q"], ["𝕽", "R"], ["𝕾", "S"], ["𝕿", "T"], ["𝖀", "U"], ["𝖁", "V"], ["𝖂", "W"], ["𝖃", "X"], ["𝖄", "Y"], ["𝖅", "Z"], ["𝖆", "a"], ["𝖇", "b"], ["𝖈", "c"], ["𝖉", "d"], ["𝖊", "e"], ["𝖋", "f"], ["𝖌", "g"], ["𝖍", "h"], ["𝖎", "i"], ["𝖏", "j"], ["𝖐", "k"], ["𝖑", "l"], ["𝖒", "m"], ["𝖓", "n"], ["𝖔", "o"], ["𝖕", "p"], ["𝖖", "q"], ["𝖗", "r"], ["𝖘", "s"], ["𝖙", "t"], ["𝖚", "u"], ["𝖛", "v"], ["𝖜", "w"], ["𝖝", "x"], ["𝖞", "y"], ["𝖟", "z"], ["𝖠", "A"], ["𝖡", "B"], ["𝖢", "C"], ["𝖣", "D"], ["𝖤", "E"], ["𝖥", "F"], ["𝖦", "G"], ["𝖧", "H"], ["𝖨", "I"], ["𝖩", "J"], ["𝖪", "K"], ["𝖫", "L"], ["𝖬", "M"], ["𝖭", "N"], ["𝖮", "O"], ["𝖯", "P"], ["𝖰", "Q"], ["𝖱", "R"], ["𝖲", "S"], ["𝖳", "T"], ["𝖴", "U"], ["𝖵", "V"], ["𝖶", "W"], ["𝖷", "X"], ["𝖸", "Y"], ["𝖹", "Z"], ["𝖺", "a"], ["𝖻", "b"], ["𝖼", "c"], ["𝖽", "d"], ["𝖾", "e"], ["𝖿", "f"], ["𝗀", "g"], ["𝗁", "h"], ["𝗂", "i"], ["𝗃", "j"], ["𝗄", "k"], ["𝗅", "l"], ["𝗆", "m"], ["𝗇", "n"], ["𝗈", "o"], ["𝗉", "p"], ["𝗊", "q"], ["𝗋", "r"], ["𝗌", "s"], ["𝗍", "t"], ["𝗎", "u"], ["𝗏", "v"], ["𝗐", "w"], ["𝗑", "x"], ["𝗒", "y"], ["𝗓", "z"], ["𝗔", "A"], ["𝗕", "B"], ["𝗖", "C"], ["𝗗", "D"], ["𝗘", "E"], ["𝗙", "F"], ["𝗚", "G"], ["𝗛", "H"], ["𝗜", "I"], ["𝗝", "J"], ["𝗞", "K"], ["𝗟", "L"], ["𝗠", "M"], ["𝗡", "N"], ["𝗢", "O"], ["𝗣", "P"], ["𝗤", "Q"], ["𝗥", "R"], ["𝗦", "S"], ["𝗧", "T"], ["𝗨", "U"], ["𝗩", "V"], ["𝗪", "W"], ["𝗫", "X"], ["𝗬", "Y"], ["𝗭", "Z"], ["𝗮", "a"], ["𝗯", "b"], ["𝗰", "c"], ["𝗱", "d"], ["𝗲", "e"], ["𝗳", "f"], ["𝗴", "g"], ["𝗵", "h"], ["𝗶", "i"], ["𝗷", "j"], ["𝗸", "k"], ["𝗹", "l"], ["𝗺", "m"], ["𝗻", "n"], ["𝗼", "o"], ["𝗽", "p"], ["𝗾", "q"], ["𝗿", "r"], ["𝘀", "s"], ["𝘁", "t"], ["𝘂", "u"], ["𝘃", "v"], ["𝘄", "w"], ["𝘅", "x"], ["𝘆", "y"], ["𝘇", "z"], ["𝘈", "A"], ["𝘉", "B"], ["𝘊", "C"], ["𝘋", "D"], ["𝘌", "E"], ["𝘍", "F"], ["𝘎", "G"], ["𝘏", "H"], ["𝘐", "I"], ["𝘑", "J"], ["𝘒", "K"], ["𝘓", "L"], ["𝘔", "M"], ["𝘕", "N"], ["𝘖", "O"], ["𝘗", "P"], ["𝘘", "Q"], ["𝘙", "R"], ["𝘚", "S"], ["𝘛", "T"], ["𝘜", "U"], ["𝘝", "V"], ["𝘞", "W"], ["𝘟", "X"], ["𝘠", "Y"], ["𝘡", "Z"], ["𝘢", "a"], ["𝘣", "b"], ["𝘤", "c"], ["𝘥", "d"], ["𝘦", "e"], ["𝘧", "f"], ["𝘨", "g"], ["𝘩", "h"], ["𝘪", "i"], ["𝘫", "j"], ["𝘬", "k"], ["𝘭", "l"], ["𝘮", "m"], ["𝘯", "n"], ["𝘰", "o"], ["𝘱", "p"], ["𝘲", "q"], ["𝘳", "r"], ["𝘴", "s"], ["𝘵", "t"], ["𝘶", "u"], ["𝘷", "v"], ["𝘸", "w"], ["𝘹", "x"], ["𝘺", "y"], ["𝘻", "z"], ["𝘼", "A"], ["𝘽", "B"], ["𝘾", "C"], ["𝘿", "D"], ["𝙀", "E"], ["𝙁", "F"], ["𝙂", "G"], ["𝙃", "H"], ["𝙄", "I"], ["𝙅", "J"], ["𝙆", "K"], ["𝙇", "L"], ["𝙈", "M"], ["𝙉", "N"], ["𝙊", "O"], ["𝙋", "P"], ["𝙌", "Q"], ["𝙍", "R"], ["𝙎", "S"], ["𝙏", "T"], ["𝙐", "U"], ["𝙑", "V"], ["𝙒", "W"], ["𝙓", "X"], ["𝙔", "Y"], ["𝙕", "Z"], ["𝙖", "a"], ["𝙗", "b"], ["𝙘", "c"], ["𝙙", "d"], ["𝙚", "e"], ["𝙛", "f"], ["𝙜", "g"], ["𝙝", "h"], ["𝙞", "i"], ["𝙟", "j"], ["𝙠", "k"], ["𝙡", "l"], ["𝙢", "m"], ["𝙣", "n"], ["𝙤", "o"], ["𝙥", "p"], ["𝙦", "q"], ["𝙧", "r"], ["𝙨", "s"], ["𝙩", "t"], ["𝙪", "u"], ["𝙫", "v"], ["𝙬", "w"], ["𝙭", "x"], ["𝙮", "y"], ["𝙯", "z"], ["𝙰", "A"], ["𝙱", "B"], ["𝙲", "C"], ["𝙳", "D"], ["𝙴", "E"], ["𝙵", "F"], ["𝙶", "G"], ["𝙷", "H"], ["𝙸", "I"], ["𝙹", "J"], ["𝙺", "K"], ["𝙻", "L"], ["𝙼", "M"], ["𝙽", "N"], ["𝙾", "O"], ["𝙿", "P"], ["𝚀", "Q"], ["𝚁", "R"], ["𝚂", "S"], ["𝚃", "T"], ["𝚄", "U"], ["𝚅", "V"], ["𝚆", "W"], ["𝚇", "X"], ["𝚈", "Y"], ["𝚉", "Z"], ["𝚊", "a"], ["𝚋", "b"], ["𝚌", "c"], ["𝚍", "d"], ["𝚎", "e"], ["𝚏", "f"], ["𝚐", "g"], ["𝚑", "h"], ["𝚒", "i"], ["𝚓", "j"], ["𝚔", "k"], ["𝚕", "l"], ["𝚖", "m"], ["𝚗", "n"], ["𝚘", "o"], ["𝚙", "p"], ["𝚚", "q"], ["𝚛", "r"], ["𝚜", "s"], ["𝚝", "t"], ["𝚞", "u"], ["𝚟", "v"], ["𝚠", "w"], ["𝚡", "x"], ["𝚢", "y"], ["𝚣", "z"], ["𝚤", "l"], ["𝚥", "j"], ["𝛢", "A"], ["𝛣", "B"], ["𝛤", "G"], ["𝛥", "D"], ["𝛦", "E"], ["𝛧", "Z"], ["𝛨", "I"], ["𝛩", "TH"], ["𝛪", "I"], ["𝛫", "K"], ["𝛬", "L"], ["𝛭", "M"], ["𝛮", "N"], ["𝛯", "KS"], ["𝛰", "O"], ["𝛱", "P"], ["𝛲", "R"], ["𝛳", "TH"], ["𝛴", "S"], ["𝛵", "T"], ["𝛶", "Y"], ["𝛷", "F"], ["𝛸", "x"], ["𝛹", "PS"], ["𝛺", "O"], ["𝛻", "D"], ["𝛼", "a"], ["𝛽", "b"], ["𝛾", "g"], ["𝛿", "d"], ["𝜀", "e"], ["𝜁", "z"], ["𝜂", "i"], ["𝜃", "th"], ["𝜄", "i"], ["𝜅", "k"], ["𝜆", "l"], ["𝜇", "m"], ["𝜈", "n"], ["𝜉", "ks"], ["𝜊", "o"], ["𝜋", "p"], ["𝜌", "r"], ["𝜍", "s"], ["𝜎", "s"], ["𝜏", "t"], ["𝜐", "y"], ["𝜑", "f"], ["𝜒", "x"], ["𝜓", "ps"], ["𝜔", "o"], ["𝜕", "d"], ["𝜖", "E"], ["𝜗", "TH"], ["𝜘", "K"], ["𝜙", "f"], ["𝜚", "r"], ["𝜛", "p"], ["𝜜", "A"], ["𝜝", "V"], ["𝜞", "G"], ["𝜟", "D"], ["𝜠", "E"], ["𝜡", "Z"], ["𝜢", "I"], ["𝜣", "TH"], ["𝜤", "I"], ["𝜥", "K"], ["𝜦", "L"], ["𝜧", "M"], ["𝜨", "N"], ["𝜩", "KS"], ["𝜪", "O"], ["𝜫", "P"], ["𝜬", "S"], ["𝜭", "TH"], ["𝜮", "S"], ["𝜯", "T"], ["𝜰", "Y"], ["𝜱", "F"], ["𝜲", "X"], ["𝜳", "PS"], ["𝜴", "O"], ["𝜵", "D"], ["𝜶", "a"], ["𝜷", "v"], ["𝜸", "g"], ["𝜹", "d"], ["𝜺", "e"], ["𝜻", "z"], ["𝜼", "i"], ["𝜽", "th"], ["𝜾", "i"], ["𝜿", "k"], ["𝝀", "l"], ["𝝁", "m"], ["𝝂", "n"], ["𝝃", "ks"], ["𝝄", "o"], ["𝝅", "p"], ["𝝆", "r"], ["𝝇", "s"], ["𝝈", "s"], ["𝝉", "t"], ["𝝊", "y"], ["𝝋", "f"], ["𝝌", "x"], ["𝝍", "ps"], ["𝝎", "o"], ["𝝏", "a"], ["𝝐", "e"], ["𝝑", "i"], ["𝝒", "k"], ["𝝓", "f"], ["𝝔", "r"], ["𝝕", "p"], ["𝝖", "A"], ["𝝗", "B"], ["𝝘", "G"], ["𝝙", "D"], ["𝝚", "E"], ["𝝛", "Z"], ["𝝜", "I"], ["𝝝", "TH"], ["𝝞", "I"], ["𝝟", "K"], ["𝝠", "L"], ["𝝡", "M"], ["𝝢", "N"], ["𝝣", "KS"], ["𝝤", "O"], ["𝝥", "P"], ["𝝦", "R"], ["𝝧", "TH"], ["𝝨", "S"], ["𝝩", "T"], ["𝝪", "Y"], ["𝝫", "F"], ["𝝬", "X"], ["𝝭", "PS"], ["𝝮", "O"], ["𝝯", "D"], ["𝝰", "a"], ["𝝱", "v"], ["𝝲", "g"], ["𝝳", "d"], ["𝝴", "e"], ["𝝵", "z"], ["𝝶", "i"], ["𝝷", "th"], ["𝝸", "i"], ["𝝹", "k"], ["𝝺", "l"], ["𝝻", "m"], ["𝝼", "n"], ["𝝽", "ks"], ["𝝾", "o"], ["𝝿", "p"], ["𝞀", "r"], ["𝞁", "s"], ["𝞂", "s"], ["𝞃", "t"], ["𝞄", "y"], ["𝞅", "f"], ["𝞆", "x"], ["𝞇", "ps"], ["𝞈", "o"], ["𝞉", "a"], ["𝞊", "e"], ["𝞋", "i"], ["𝞌", "k"], ["𝞍", "f"], ["𝞎", "r"], ["𝞏", "p"], ["𝞐", "A"], ["𝞑", "V"], ["𝞒", "G"], ["𝞓", "D"], ["𝞔", "E"], ["𝞕", "Z"], ["𝞖", "I"], ["𝞗", "TH"], ["𝞘", "I"], ["𝞙", "K"], ["𝞚", "L"], ["𝞛", "M"], ["𝞜", "N"], ["𝞝", "KS"], ["𝞞", "O"], ["𝞟", "P"], ["𝞠", "S"], ["𝞡", "TH"], ["𝞢", "S"], ["𝞣", "T"], ["𝞤", "Y"], ["𝞥", "F"], ["𝞦", "X"], ["𝞧", "PS"], ["𝞨", "O"], ["𝞩", "D"], ["𝞪", "av"], ["𝞫", "g"], ["𝞬", "d"], ["𝞭", "e"], ["𝞮", "z"], ["𝞯", "i"], ["𝞰", "i"], ["𝞱", "th"], ["𝞲", "i"], ["𝞳", "k"], ["𝞴", "l"], ["𝞵", "m"], ["𝞶", "n"], ["𝞷", "ks"], ["𝞸", "o"], ["𝞹", "p"], ["𝞺", "r"], ["𝞻", "s"], ["𝞼", "s"], ["𝞽", "t"], ["𝞾", "y"], ["𝞿", "f"], ["𝟀", "x"], ["𝟁", "ps"], ["𝟂", "o"], ["𝟃", "a"], ["𝟄", "e"], ["𝟅", "i"], ["𝟆", "k"], ["𝟇", "f"], ["𝟈", "r"], ["𝟉", "p"], ["𝟊", "F"], ["𝟋", "f"], ["⒜", "(a)"], ["⒝", "(b)"], ["⒞", "(c)"], ["⒟", "(d)"], ["⒠", "(e)"], ["⒡", "(f)"], ["⒢", "(g)"], ["⒣", "(h)"], ["⒤", "(i)"], ["⒥", "(j)"], ["⒦", "(k)"], ["⒧", "(l)"], ["⒨", "(m)"], ["⒩", "(n)"], ["⒪", "(o)"], ["⒫", "(p)"], ["⒬", "(q)"], ["⒭", "(r)"], ["⒮", "(s)"], ["⒯", "(t)"], ["⒰", "(u)"], ["⒱", "(v)"], ["⒲", "(w)"], ["⒳", "(x)"], ["⒴", "(y)"], ["⒵", "(z)"], ["Ⓐ", "(A)"], ["Ⓑ", "(B)"], ["Ⓒ", "(C)"], ["Ⓓ", "(D)"], ["Ⓔ", "(E)"], ["Ⓕ", "(F)"], ["Ⓖ", "(G)"], ["Ⓗ", "(H)"], ["Ⓘ", "(I)"], ["Ⓙ", "(J)"], ["Ⓚ", "(K)"], ["Ⓛ", "(L)"], ["Ⓝ", "(N)"], ["Ⓞ", "(O)"], ["Ⓟ", "(P)"], ["Ⓠ", "(Q)"], ["Ⓡ", "(R)"], ["Ⓢ", "(S)"], ["Ⓣ", "(T)"], ["Ⓤ", "(U)"], ["Ⓥ", "(V)"], ["Ⓦ", "(W)"], ["Ⓧ", "(X)"], ["Ⓨ", "(Y)"], ["Ⓩ", "(Z)"], ["ⓐ", "(a)"], ["ⓑ", "(b)"], ["ⓒ", "(b)"], ["ⓓ", "(c)"], ["ⓔ", "(e)"], ["ⓕ", "(f)"], ["ⓖ", "(g)"], ["ⓗ", "(h)"], ["ⓘ", "(i)"], ["ⓙ", "(j)"], ["ⓚ", "(k)"], ["ⓛ", "(l)"], ["ⓜ", "(m)"], ["ⓝ", "(n)"], ["ⓞ", "(o)"], ["ⓟ", "(p)"], ["ⓠ", "(q)"], ["ⓡ", "(r)"], ["ⓢ", "(s)"], ["ⓣ", "(t)"], ["ⓤ", "(u)"], ["ⓥ", "(v)"], ["ⓦ", "(w)"], ["ⓧ", "(x)"], ["ⓨ", "(y)"], ["ⓩ", "(z)"], ["Ċ", "C"], ["ċ", "c"], ["Ġ", "G"], ["ġ", "g"], ["Ħ", "H"], ["ħ", "h"], ["Ż", "Z"], ["ż", "z"], ["𝟎", "0"], ["𝟏", "1"], ["𝟐", "2"], ["𝟑", "3"], ["𝟒", "4"], ["𝟓", "5"], ["𝟔", "6"], ["𝟕", "7"], ["𝟖", "8"], ["𝟗", "9"], ["𝟘", "0"], ["𝟙", "1"], ["𝟚", "2"], ["𝟛", "3"], ["𝟜", "4"], ["𝟝", "5"], ["𝟞", "6"], ["𝟟", "7"], ["𝟠", "8"], ["𝟡", "9"], ["𝟢", "0"], ["𝟣", "1"], ["𝟤", "2"], ["𝟥", "3"], ["𝟦", "4"], ["𝟧", "5"], ["𝟨", "6"], ["𝟩", "7"], ["𝟪", "8"], ["𝟫", "9"], ["𝟬", "0"], ["𝟭", "1"], ["𝟮", "2"], ["𝟯", "3"], ["𝟰", "4"], ["𝟱", "5"], ["𝟲", "6"], ["𝟳", "7"], ["𝟴", "8"], ["𝟵", "9"], ["𝟶", "0"], ["𝟷", "1"], ["𝟸", "2"], ["𝟹", "3"], ["𝟺", "4"], ["𝟻", "5"], ["𝟼", "6"], ["𝟽", "7"], ["𝟾", "8"], ["𝟿", "9"], ["①", "1"], ["②", "2"], ["③", "3"], ["④", "4"], ["⑤", "5"], ["⑥", "6"], ["⑦", "7"], ["⑧", "8"], ["⑨", "9"], ["⑩", "10"], ["⑪", "11"], ["⑫", "12"], ["⑬", "13"], ["⑭", "14"], ["⑮", "15"], ["⑯", "16"], ["⑰", "17"], ["⑱", "18"], ["⑲", "19"], ["⑳", "20"], ["⑴", "1"], ["⑵", "2"], ["⑶", "3"], ["⑷", "4"], ["⑸", "5"], ["⑹", "6"], ["⑺", "7"], ["⑻", "8"], ["⑼", "9"], ["⑽", "10"], ["⑾", "11"], ["⑿", "12"], ["⒀", "13"], ["⒁", "14"], ["⒂", "15"], ["⒃", "16"], ["⒄", "17"], ["⒅", "18"], ["⒆", "19"], ["⒇", "20"], ["⒈", "1."], ["⒉", "2."], ["⒊", "3."], ["⒋", "4."], ["⒌", "5."], ["⒍", "6."], ["⒎", "7."], ["⒏", "8."], ["⒐", "9."], ["⒑", "10."], ["⒒", "11."], ["⒓", "12."], ["⒔", "13."], ["⒕", "14."], ["⒖", "15."], ["⒗", "16."], ["⒘", "17."], ["⒙", "18."], ["⒚", "19."], ["⒛", "20."], ["⓪", "0"], ["⓫", "11"], ["⓬", "12"], ["⓭", "13"], ["⓮", "14"], ["⓯", "15"], ["⓰", "16"], ["⓱", "17"], ["⓲", "18"], ["⓳", "19"], ["⓴", "20"], ["⓵", "1"], ["⓶", "2"], ["⓷", "3"], ["⓸", "4"], ["⓹", "5"], ["⓺", "6"], ["⓻", "7"], ["⓼", "8"], ["⓽", "9"], ["⓾", "10"], ["⓿", "0"], ["🙰", "&"], ["🙱", "&"], ["🙲", "&"], ["🙳", "&"], ["🙴", "&"], ["🙵", "&"], ["🙶", '"'], ["🙷", '"'], ["🙸", '"'], ["‽", "?!"], ["🙹", "?!"], ["🙺", "?!"], ["🙻", "?!"], ["🙼", "/"], ["🙽", "\\"], ["🜇", "AR"], ["🜈", "V"], ["🜉", "V"], ["🜆", "VR"], ["🜅", "VF"], ["🜩", "2"], ["🜪", "5"], ["🝡", "f"], ["🝢", "W"], ["🝣", "U"], ["🝧", "V"], ["🝨", "T"], ["🝪", "V"], ["🝫", "MB"], ["🝬", "VB"], ["🝲", "3B"], ["🝳", "3B"], ["💯", "100"], ["🔙", "BACK"], ["🔚", "END"], ["🔛", "ON!"], ["🔜", "SOON"], ["🔝", "TOP"], ["🔞", "18"], ["🔤", "abc"], ["🔠", "ABCD"], ["🔡", "abcd"], ["🔢", "1234"], ["🔣", "T&@%"], ["#️⃣", "#"], ["*️⃣", "*"], ["0️⃣", "0"], ["1️⃣", "1"], ["2️⃣", "2"], ["3️⃣", "3"], ["4️⃣", "4"], ["5️⃣", "5"], ["6️⃣", "6"], ["7️⃣", "7"], ["8️⃣", "8"], ["9️⃣", "9"], ["🔟", "10"], ["🅰️", "A"], ["🅱️", "B"], ["🆎", "AB"], ["🆑", "CL"], ["🅾️", "O"], ["🅿", "P"], ["🆘", "SOS"], ["🅲", "C"], ["🅳", "D"], ["🅴", "E"], ["🅵", "F"], ["🅶", "G"], ["🅷", "H"], ["🅸", "I"], ["🅹", "J"], ["🅺", "K"], ["🅻", "L"], ["🅼", "M"], ["🅽", "N"], ["🆀", "Q"], ["🆁", "R"], ["🆂", "S"], ["🆃", "T"], ["🆄", "U"], ["🆅", "V"], ["🆆", "W"], ["🆇", "X"], ["🆈", "Y"], ["🆉", "Z"]];
function h(o2, h2) {
  if ("string" != typeof o2)
    throw new TypeError(`Expected a string, got \`${typeof o2}\``);
  h2 = t({ customReplacements: [] }, h2);
  const r = new Map([...s, ...h2.customReplacements]);
  return o2 = ((e2, t2) => {
    for (const [o3, s2] of t2)
      e2 = e2.replace(new RegExp(a(o3), "g"), s2);
    return e2;
  })(o2 = o2.normalize(), r), (0, import_lodash.default)(o2);
}

// node_modules/angular-mentions/fesm2020/angular-mentions.mjs
var _c02 = ["list"];
var _c12 = ["defaultItemTemplate"];
function MentionListComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtext(0);
  }
  if (rf & 2) {
    const item_r4 = ctx.item;
    const ctx_r0 = ɵɵnextContext();
    ɵɵtextInterpolate1(" ", item_r4[ctx_r0.labelKey], " ");
  }
}
function MentionListComponent_li_4_ng_template_2_Template(rf, ctx) {
}
var _c2 = (a0) => ({
  "item": a0
});
function MentionListComponent_li_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "li")(1, "a", 4);
    ɵɵlistener("mousedown", function MentionListComponent_li_4_Template_a_mousedown_1_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r9);
      const i_r6 = restoredCtx.index;
      const ctx_r8 = ɵɵnextContext();
      ctx_r8.activeIndex = i_r6;
      ctx_r8.itemClick.emit();
      return ɵɵresetView($event.preventDefault());
    });
    ɵɵtemplate(2, MentionListComponent_li_4_ng_template_2_Template, 0, 0, "ng-template", 5);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const i_r6 = ctx.index;
    const ctx_r3 = ɵɵnextContext();
    ɵɵclassProp("active", ctx_r3.activeIndex == i_r6)("mention-active", !ctx_r3.styleOff && ctx_r3.activeIndex == i_r6);
    ɵɵadvance(1);
    ɵɵclassProp("mention-item", !ctx_r3.styleOff);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r3.itemTemplate)("ngTemplateOutletContext", ɵɵpureFunction1(8, _c2, item_r5));
  }
}
function setValue(el, value) {
  if (isInputOrTextAreaElement(el)) {
    el.value = value;
  } else {
    el.textContent = value;
  }
}
function getValue(el) {
  return isInputOrTextAreaElement(el) ? el.value : el.textContent;
}
function insertValue(el, start, end, text, iframe, noRecursion = false) {
  if (isTextElement(el)) {
    let val = getValue(el);
    setValue(el, val.substring(0, start) + text + val.substring(end, val.length));
    setCaretPosition(el, start + text.length, iframe);
  } else if (!noRecursion) {
    let selObj = getWindowSelection(iframe);
    if (selObj && selObj.rangeCount > 0) {
      var selRange = selObj.getRangeAt(0);
      var position = selRange.startOffset;
      var anchorNode = selObj.anchorNode;
      insertValue(anchorNode, position - (end - start), position, text, iframe, true);
    }
  }
}
function isInputOrTextAreaElement(el) {
  return el != null && (el.nodeName == "INPUT" || el.nodeName == "TEXTAREA");
}
function isTextElement(el) {
  return el != null && (el.nodeName == "INPUT" || el.nodeName == "TEXTAREA" || el.nodeName == "#text");
}
function setCaretPosition(el, pos, iframe = null) {
  if (isInputOrTextAreaElement(el) && el.selectionStart) {
    el.focus();
    el.setSelectionRange(pos, pos);
  } else {
    let range = getDocument(iframe).createRange();
    range.setStart(el, pos);
    range.collapse(true);
    let sel = getWindowSelection(iframe);
    sel.removeAllRanges();
    sel.addRange(range);
  }
}
function getCaretPosition(el, iframe = null) {
  if (isInputOrTextAreaElement(el)) {
    var val = el.value;
    return val.slice(0, el.selectionStart).length;
  } else {
    var selObj = getWindowSelection(iframe);
    if (selObj.rangeCount > 0) {
      var selRange = selObj.getRangeAt(0);
      var preCaretRange = selRange.cloneRange();
      preCaretRange.selectNodeContents(el);
      preCaretRange.setEnd(selRange.endContainer, selRange.endOffset);
      var position = preCaretRange.toString().length;
      return position;
    }
  }
}
function getDocument(iframe) {
  if (!iframe) {
    return document;
  } else {
    return iframe.contentWindow.document;
  }
}
function getWindowSelection(iframe) {
  if (!iframe) {
    return window.getSelection();
  } else {
    return iframe.contentWindow.getSelection();
  }
}
function getContentEditableCaretCoords(ctx) {
  let markerTextChar = "\uFEFF";
  let markerId = "sel_" + (/* @__PURE__ */ new Date()).getTime() + "_" + Math.random().toString().substr(2);
  let doc = getDocument(ctx ? ctx.iframe : null);
  let sel = getWindowSelection(ctx ? ctx.iframe : null);
  let prevRange = sel.getRangeAt(0);
  let range = doc.createRange();
  range.setStart(sel.anchorNode, prevRange.startOffset);
  range.setEnd(sel.anchorNode, prevRange.startOffset);
  range.collapse(false);
  let markerEl = doc.createElement("span");
  markerEl.id = markerId;
  markerEl.appendChild(doc.createTextNode(markerTextChar));
  range.insertNode(markerEl);
  sel.removeAllRanges();
  sel.addRange(prevRange);
  let coordinates = {
    left: 0,
    top: markerEl.offsetHeight
  };
  localToRelativeCoordinates(ctx, markerEl, coordinates);
  markerEl.parentNode.removeChild(markerEl);
  return coordinates;
}
function localToRelativeCoordinates(ctx, element, coordinates) {
  let obj = element;
  let iframe = ctx ? ctx.iframe : null;
  while (obj) {
    if (ctx.parent != null && ctx.parent == obj) {
      break;
    }
    coordinates.left += obj.offsetLeft + obj.clientLeft;
    coordinates.top += obj.offsetTop + obj.clientTop;
    obj = obj.offsetParent;
    if (!obj && iframe) {
      obj = iframe;
      iframe = null;
    }
  }
  obj = element;
  iframe = ctx ? ctx.iframe : null;
  while (obj !== getDocument(null).body && obj != null) {
    if (ctx.parent != null && ctx.parent == obj) {
      break;
    }
    if (obj.scrollTop && obj.scrollTop > 0) {
      coordinates.top -= obj.scrollTop;
    }
    if (obj.scrollLeft && obj.scrollLeft > 0) {
      coordinates.left -= obj.scrollLeft;
    }
    obj = obj.parentNode;
    if (!obj && iframe) {
      obj = iframe;
      iframe = null;
    }
  }
}
var properties = [
  "direction",
  "boxSizing",
  "width",
  "height",
  "overflowX",
  "overflowY",
  "borderTopWidth",
  "borderRightWidth",
  "borderBottomWidth",
  "borderLeftWidth",
  "borderStyle",
  "paddingTop",
  "paddingRight",
  "paddingBottom",
  "paddingLeft",
  // https://developer.mozilla.org/en-US/docs/Web/CSS/font
  "fontStyle",
  "fontVariant",
  "fontWeight",
  "fontStretch",
  "fontSize",
  "fontSizeAdjust",
  "lineHeight",
  "fontFamily",
  "textAlign",
  "textTransform",
  "textIndent",
  "textDecoration",
  "letterSpacing",
  "wordSpacing",
  "tabSize",
  "MozTabSize"
];
var isBrowser = typeof window !== "undefined";
var isFirefox = isBrowser && window["mozInnerScreenX"] != null;
function getCaretCoordinates(element, position, options) {
  if (!isBrowser) {
    throw new Error("textarea-caret-position#getCaretCoordinates should only be called in a browser");
  }
  var debug = options && options.debug || false;
  if (debug) {
    var el = document.querySelector("#input-textarea-caret-position-mirror-div");
    if (el)
      el.parentNode.removeChild(el);
  }
  var div = document.createElement("div");
  div.id = "input-textarea-caret-position-mirror-div";
  document.body.appendChild(div);
  var style = div.style;
  var computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle;
  var isInput = element.nodeName === "INPUT";
  style.whiteSpace = "pre-wrap";
  if (!isInput)
    style.wordWrap = "break-word";
  style.position = "absolute";
  if (!debug)
    style.visibility = "hidden";
  properties.forEach(function(prop) {
    if (isInput && prop === "lineHeight") {
      if (computed.boxSizing === "border-box") {
        var height = parseInt(computed.height);
        var outerHeight = parseInt(computed.paddingTop) + parseInt(computed.paddingBottom) + parseInt(computed.borderTopWidth) + parseInt(computed.borderBottomWidth);
        var targetHeight = outerHeight + parseInt(computed.lineHeight);
        if (height > targetHeight) {
          style.lineHeight = height - outerHeight + "px";
        } else if (height === targetHeight) {
          style.lineHeight = computed.lineHeight;
        } else {
          style.lineHeight = "0";
        }
      } else {
        style.lineHeight = computed.height;
      }
    } else {
      style[prop] = computed[prop];
    }
  });
  if (isFirefox) {
    if (element.scrollHeight > parseInt(computed.height))
      style.overflowY = "scroll";
  } else {
    style.overflow = "hidden";
  }
  div.textContent = element.value.substring(0, position);
  if (isInput)
    div.textContent = div.textContent.replace(/\s/g, " ");
  var span = document.createElement("span");
  span.textContent = element.value.substring(position) || ".";
  div.appendChild(span);
  var coordinates = {
    top: span.offsetTop + parseInt(computed["borderTopWidth"]),
    left: span.offsetLeft + parseInt(computed["borderLeftWidth"]),
    height: parseInt(computed["lineHeight"])
  };
  if (debug) {
    span.style.backgroundColor = "#aaa";
  } else {
    document.body.removeChild(div);
  }
  return coordinates;
}
var MentionListComponent = class {
  constructor(element) {
    this.element = element;
    this.labelKey = "label";
    this.itemClick = new EventEmitter();
    this.items = [];
    this.activeIndex = 0;
    this.hidden = false;
    this.dropUp = false;
    this.styleOff = false;
    this.coords = {
      top: 0,
      left: 0
    };
    this.offset = 0;
  }
  ngAfterContentChecked() {
    if (!this.itemTemplate) {
      this.itemTemplate = this.defaultItemTemplate;
    }
  }
  // lots of confusion here between relative coordinates and containers
  position(nativeParentElement, iframe = null) {
    if (isInputOrTextAreaElement(nativeParentElement)) {
      this.coords = getCaretCoordinates(nativeParentElement, nativeParentElement.selectionStart, null);
      this.coords.top = nativeParentElement.offsetTop + this.coords.top - nativeParentElement.scrollTop;
      this.coords.left = nativeParentElement.offsetLeft + this.coords.left - nativeParentElement.scrollLeft;
      this.offset = this.getBlockCursorDimensions(nativeParentElement).height;
    } else if (iframe) {
      let context = {
        iframe,
        parent: iframe.offsetParent
      };
      this.coords = getContentEditableCaretCoords(context);
    } else {
      let doc = document.documentElement;
      let scrollLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
      let scrollTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
      let caretRelativeToView = getContentEditableCaretCoords({
        iframe
      });
      let parentRelativeToContainer = nativeParentElement.getBoundingClientRect();
      this.coords.top = caretRelativeToView.top - parentRelativeToContainer.top + nativeParentElement.offsetTop - scrollTop;
      this.coords.left = caretRelativeToView.left - parentRelativeToContainer.left + nativeParentElement.offsetLeft - scrollLeft;
    }
    this.positionElement();
  }
  get activeItem() {
    return this.items[this.activeIndex];
  }
  activateNextItem() {
    let listEl = this.list.nativeElement;
    let activeEl = listEl.getElementsByClassName("active").item(0);
    if (activeEl) {
      let nextLiEl = activeEl.nextSibling;
      if (nextLiEl && nextLiEl.nodeName == "LI") {
        let nextLiRect = nextLiEl.getBoundingClientRect();
        if (nextLiRect.bottom > listEl.getBoundingClientRect().bottom) {
          listEl.scrollTop = nextLiEl.offsetTop + nextLiRect.height - listEl.clientHeight;
        }
      }
    }
    this.activeIndex = Math.max(Math.min(this.activeIndex + 1, this.items.length - 1), 0);
  }
  activatePreviousItem() {
    let listEl = this.list.nativeElement;
    let activeEl = listEl.getElementsByClassName("active").item(0);
    if (activeEl) {
      let prevLiEl = activeEl.previousSibling;
      if (prevLiEl && prevLiEl.nodeName == "LI") {
        let prevLiRect = prevLiEl.getBoundingClientRect();
        if (prevLiRect.top < listEl.getBoundingClientRect().top) {
          listEl.scrollTop = prevLiEl.offsetTop;
        }
      }
    }
    this.activeIndex = Math.max(Math.min(this.activeIndex - 1, this.items.length - 1), 0);
  }
  // reset for a new mention search
  reset() {
    this.list.nativeElement.scrollTop = 0;
    this.checkBounds();
  }
  // final positioning is done after the list is shown (and the height and width are known)
  // ensure it's in the page bounds
  checkBounds() {
    let left = this.coords.left, top = this.coords.top, dropUp = this.dropUp;
    const bounds = this.list.nativeElement.getBoundingClientRect();
    if (bounds.left + bounds.width > window.innerWidth) {
      left -= bounds.left + bounds.width - window.innerWidth + 10;
    }
    if (bounds.top < 0) {
      dropUp = false;
    }
    this.positionElement(left, top, dropUp);
  }
  positionElement(left = this.coords.left, top = this.coords.top, dropUp = this.dropUp) {
    const el = this.element.nativeElement;
    top += dropUp ? 0 : this.offset;
    el.className = dropUp ? "dropup" : null;
    el.style.position = "absolute";
    el.style.left = left + "px";
    el.style.top = top + "px";
  }
  getBlockCursorDimensions(nativeParentElement) {
    const parentStyles = window.getComputedStyle(nativeParentElement);
    return {
      height: parseFloat(parentStyles.lineHeight),
      width: parseFloat(parentStyles.fontSize)
    };
  }
};
MentionListComponent.ɵfac = function MentionListComponent_Factory(t2) {
  return new (t2 || MentionListComponent)(ɵɵdirectiveInject(ElementRef));
};
MentionListComponent.ɵcmp = ɵɵdefineComponent({
  type: MentionListComponent,
  selectors: [["mention-list"]],
  viewQuery: function MentionListComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c02, 7);
      ɵɵviewQuery(_c12, 7);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.list = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.defaultItemTemplate = _t.first);
    }
  },
  inputs: {
    labelKey: "labelKey",
    itemTemplate: "itemTemplate"
  },
  outputs: {
    itemClick: "itemClick"
  },
  decls: 5,
  vars: 6,
  consts: [["defaultItemTemplate", ""], [1, "dropdown-menu", "scrollable-menu", 3, "hidden"], ["list", ""], [3, "active", "mention-active", 4, "ngFor", "ngForOf"], [1, "dropdown-item", 3, "mousedown"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]],
  template: function MentionListComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, MentionListComponent_ng_template_0_Template, 1, 1, "ng-template", null, 0, ɵɵtemplateRefExtractor);
      ɵɵelementStart(2, "ul", 1, 2);
      ɵɵtemplate(4, MentionListComponent_li_4_Template, 3, 10, "li", 3);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance(2);
      ɵɵclassProp("mention-menu", !ctx.styleOff)("mention-dropdown", !ctx.styleOff && ctx.dropUp);
      ɵɵproperty("hidden", ctx.hidden);
      ɵɵadvance(2);
      ɵɵproperty("ngForOf", ctx.items);
    }
  },
  dependencies: [NgForOf, NgTemplateOutlet],
  styles: [".mention-menu[_ngcontent-%COMP%]{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:11em;padding:.5em 0;margin:.125em 0 0;font-size:1em;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25em}.mention-item[_ngcontent-%COMP%]{display:block;padding:.2em 1.5em;line-height:1.5em;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.mention-active[_ngcontent-%COMP%] > a[_ngcontent-%COMP%]{color:#fff;text-decoration:none;background-color:#337ab7;outline:0}.scrollable-menu[_ngcontent-%COMP%]{display:block;height:auto;max-height:292px;overflow:auto}[hidden][_ngcontent-%COMP%]{display:none}.mention-dropdown[_ngcontent-%COMP%]{bottom:100%;top:auto;margin-bottom:2px}"]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MentionListComponent, [{
    type: Component,
    args: [{
      selector: "mention-list",
      template: `
    <ng-template #defaultItemTemplate let-item="item">
      {{item[labelKey]}}
    </ng-template>
    <ul #list [hidden]="hidden" class="dropdown-menu scrollable-menu"
      [class.mention-menu]="!styleOff" [class.mention-dropdown]="!styleOff && dropUp">
      <li *ngFor="let item of items; let i = index"
        [class.active]="activeIndex==i" [class.mention-active]="!styleOff && activeIndex==i">
        <a class="dropdown-item" [class.mention-item]="!styleOff"
          (mousedown)="activeIndex=i;itemClick.emit();$event.preventDefault()">
          <ng-template [ngTemplateOutlet]="itemTemplate" [ngTemplateOutletContext]="{'item':item}"></ng-template>
        </a>
      </li>
    </ul>
    `,
      styles: [".mention-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:11em;padding:.5em 0;margin:.125em 0 0;font-size:1em;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25em}.mention-item{display:block;padding:.2em 1.5em;line-height:1.5em;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.mention-active>a{color:#fff;text-decoration:none;background-color:#337ab7;outline:0}.scrollable-menu{display:block;height:auto;max-height:292px;overflow:auto}[hidden]{display:none}.mention-dropdown{bottom:100%;top:auto;margin-bottom:2px}\n"]
    }]
  }], function() {
    return [{
      type: ElementRef
    }];
  }, {
    labelKey: [{
      type: Input
    }],
    itemTemplate: [{
      type: Input
    }],
    itemClick: [{
      type: Output
    }],
    list: [{
      type: ViewChild,
      args: ["list", {
        static: true
      }]
    }],
    defaultItemTemplate: [{
      type: ViewChild,
      args: ["defaultItemTemplate", {
        static: true
      }]
    }]
  });
})();
var KEY_BACKSPACE = 8;
var KEY_TAB = 9;
var KEY_ENTER = 13;
var KEY_SHIFT = 16;
var KEY_ESCAPE = 27;
var KEY_SPACE = 32;
var KEY_UP = 38;
var KEY_DOWN = 40;
var KEY_BUFFERED = 229;
var MentionDirective = class {
  constructor(_element, _componentResolver, _viewContainerRef) {
    this._element = _element;
    this._componentResolver = _componentResolver;
    this._viewContainerRef = _viewContainerRef;
    this.mentionConfig = {
      items: []
    };
    this.DEFAULT_CONFIG = {
      items: [],
      triggerChar: "@",
      labelKey: "label",
      maxItems: -1,
      allowSpace: false,
      returnTrigger: false,
      mentionSelect: (item, triggerChar) => {
        return this.activeConfig.triggerChar + item[this.activeConfig.labelKey];
      },
      mentionFilter: (searchString, items) => {
        const searchStringLowerCase = searchString.toLowerCase();
        return items.filter((e2) => e2[this.activeConfig.labelKey].toLowerCase().startsWith(searchStringLowerCase));
      }
    };
    this.searchTerm = new EventEmitter();
    this.itemSelected = new EventEmitter();
    this.opened = new EventEmitter();
    this.closed = new EventEmitter();
    this.triggerChars = {};
  }
  set mention(items) {
    this.mentionItems = items;
  }
  ngOnChanges(changes) {
    if (changes["mention"] || changes["mentionConfig"]) {
      this.updateConfig();
    }
  }
  updateConfig() {
    let config = this.mentionConfig;
    this.triggerChars = {};
    if (this.mentionItems) {
      config.items = this.mentionItems;
    }
    this.addConfig(config);
    if (config.mentions) {
      config.mentions.forEach((config2) => this.addConfig(config2));
    }
  }
  // add configuration for a trigger char
  addConfig(config) {
    let defaults2 = Object.assign({}, this.DEFAULT_CONFIG);
    config = Object.assign(defaults2, config);
    let items = config.items;
    if (items && items.length > 0) {
      if (typeof items[0] == "string") {
        items = items.map((label) => {
          let object = {};
          object[config.labelKey] = label;
          return object;
        });
      }
      if (config.labelKey) {
        items = items.filter((e2) => e2[config.labelKey]);
        if (!config.disableSort) {
          items.sort((a2, b) => a2[config.labelKey].localeCompare(b[config.labelKey]));
        }
      }
    }
    config.items = items;
    this.triggerChars[config.triggerChar] = config;
    if (this.activeConfig && this.activeConfig.triggerChar == config.triggerChar) {
      this.activeConfig = config;
      this.updateSearchList();
    }
  }
  setIframe(iframe) {
    this.iframe = iframe;
  }
  stopEvent(event) {
    if (!event.wasClick) {
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
    }
  }
  blurHandler(event) {
    this.stopEvent(event);
    this.stopSearch();
  }
  inputHandler(event, nativeElement = this._element.nativeElement) {
    if (this.lastKeyCode === KEY_BUFFERED && event.data) {
      let keyCode = event.data.charCodeAt(0);
      this.keyHandler({
        keyCode,
        inputEvent: true
      }, nativeElement);
    }
  }
  // @param nativeElement is the alternative text element in an iframe scenario
  keyHandler(event, nativeElement = this._element.nativeElement) {
    this.lastKeyCode = event.keyCode;
    if (event.isComposing || event.keyCode === KEY_BUFFERED) {
      return;
    }
    let val = getValue(nativeElement);
    let pos = getCaretPosition(nativeElement, this.iframe);
    let charPressed = event.key;
    if (!charPressed) {
      let charCode = event.which || event.keyCode;
      if (!event.shiftKey && charCode >= 65 && charCode <= 90) {
        charPressed = String.fromCharCode(charCode + 32);
      } else {
        charPressed = String.fromCharCode(event.which || event.keyCode);
      }
    }
    if (event.keyCode == KEY_ENTER && event.wasClick && pos < this.startPos) {
      pos = this.startNode.length;
      setCaretPosition(this.startNode, pos, this.iframe);
    }
    let config = this.triggerChars[charPressed];
    if (config) {
      this.activeConfig = config;
      this.startPos = event.inputEvent ? pos - 1 : pos;
      this.startNode = (this.iframe ? this.iframe.contentWindow.getSelection() : window.getSelection()).anchorNode;
      this.searching = true;
      this.searchString = null;
      this.showSearchList(nativeElement);
      this.updateSearchList();
      if (config.returnTrigger) {
        this.searchTerm.emit(config.triggerChar);
      }
    } else if (this.startPos >= 0 && this.searching) {
      if (pos <= this.startPos) {
        this.searchList.hidden = true;
      } else if (event.keyCode !== KEY_SHIFT && !event.metaKey && !event.altKey && !event.ctrlKey && pos > this.startPos) {
        if (!this.activeConfig.allowSpace && event.keyCode === KEY_SPACE) {
          this.startPos = -1;
        } else if (event.keyCode === KEY_BACKSPACE && pos > 0) {
          pos--;
          if (pos == this.startPos) {
            this.stopSearch();
          }
        } else if (this.searchList.hidden) {
          if (event.keyCode === KEY_TAB || event.keyCode === KEY_ENTER) {
            this.stopSearch();
            return;
          }
        } else if (!this.searchList.hidden) {
          if (event.keyCode === KEY_TAB || event.keyCode === KEY_ENTER) {
            this.stopEvent(event);
            this.itemSelected.emit(this.searchList.activeItem);
            const text = this.activeConfig.mentionSelect(this.searchList.activeItem, this.activeConfig.triggerChar);
            insertValue(nativeElement, this.startPos, pos, text, this.iframe);
            if ("createEvent" in document) {
              let evt = document.createEvent("HTMLEvents");
              if (this.iframe) {
                evt.initEvent("change", true, false);
              } else {
                evt.initEvent("input", true, false);
              }
              this._element.nativeElement.dispatchEvent(evt);
            }
            this.startPos = -1;
            this.stopSearch();
            return false;
          } else if (event.keyCode === KEY_ESCAPE) {
            this.stopEvent(event);
            this.stopSearch();
            return false;
          } else if (event.keyCode === KEY_DOWN) {
            this.stopEvent(event);
            this.searchList.activateNextItem();
            return false;
          } else if (event.keyCode === KEY_UP) {
            this.stopEvent(event);
            this.searchList.activatePreviousItem();
            return false;
          }
        }
        if (charPressed.length != 1 && event.keyCode != KEY_BACKSPACE) {
          this.stopEvent(event);
          return false;
        } else if (this.searching) {
          let mention = val.substring(this.startPos + 1, pos);
          if (event.keyCode !== KEY_BACKSPACE && !event.inputEvent) {
            mention += charPressed;
          }
          this.searchString = mention;
          if (this.activeConfig.returnTrigger) {
            const triggerChar = this.searchString || event.keyCode === KEY_BACKSPACE ? val.substring(this.startPos, this.startPos + 1) : "";
            this.searchTerm.emit(triggerChar + this.searchString);
          } else {
            this.searchTerm.emit(this.searchString);
          }
          this.updateSearchList();
        }
      }
    }
  }
  // exposed for external calls to open the mention list, e.g. by clicking a button
  startSearch(triggerChar, nativeElement = this._element.nativeElement) {
    triggerChar = triggerChar || this.mentionConfig.triggerChar || this.DEFAULT_CONFIG.triggerChar;
    const pos = getCaretPosition(nativeElement, this.iframe);
    insertValue(nativeElement, pos, pos, triggerChar, this.iframe);
    this.keyHandler({
      key: triggerChar,
      inputEvent: true
    }, nativeElement);
  }
  stopSearch() {
    if (this.searchList && !this.searchList.hidden) {
      this.searchList.hidden = true;
      this.closed.emit();
    }
    this.activeConfig = null;
    this.searching = false;
  }
  updateSearchList() {
    let matches = [];
    if (this.activeConfig && this.activeConfig.items) {
      let objects = this.activeConfig.items;
      if (!this.activeConfig.disableSearch && this.searchString && this.activeConfig.labelKey) {
        if (this.activeConfig.mentionFilter) {
          objects = this.activeConfig.mentionFilter(this.searchString, objects);
        }
      }
      matches = objects;
      if (this.activeConfig.maxItems > 0) {
        matches = matches.slice(0, this.activeConfig.maxItems);
      }
    }
    if (this.searchList) {
      this.searchList.items = matches;
      this.searchList.hidden = matches.length == 0;
    }
  }
  showSearchList(nativeElement) {
    this.opened.emit();
    if (this.searchList == null) {
      let componentFactory = this._componentResolver.resolveComponentFactory(MentionListComponent);
      let componentRef = this._viewContainerRef.createComponent(componentFactory);
      this.searchList = componentRef.instance;
      this.searchList.itemTemplate = this.mentionListTemplate;
      componentRef.instance["itemClick"].subscribe(() => {
        nativeElement.focus();
        let fakeKeydown = {
          key: "Enter",
          keyCode: KEY_ENTER,
          wasClick: true
        };
        this.keyHandler(fakeKeydown, nativeElement);
      });
    }
    this.searchList.labelKey = this.activeConfig.labelKey;
    this.searchList.dropUp = this.activeConfig.dropUp;
    this.searchList.styleOff = this.mentionConfig.disableStyle;
    this.searchList.activeIndex = 0;
    this.searchList.position(nativeElement, this.iframe);
    window.requestAnimationFrame(() => this.searchList.reset());
  }
};
MentionDirective.ɵfac = function MentionDirective_Factory(t2) {
  return new (t2 || MentionDirective)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentFactoryResolver$1), ɵɵdirectiveInject(ViewContainerRef));
};
MentionDirective.ɵdir = ɵɵdefineDirective({
  type: MentionDirective,
  selectors: [["", "mention", ""], ["", "mentionConfig", ""]],
  hostAttrs: ["autocomplete", "off"],
  hostBindings: function MentionDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keydown", function MentionDirective_keydown_HostBindingHandler($event) {
        return ctx.keyHandler($event);
      })("input", function MentionDirective_input_HostBindingHandler($event) {
        return ctx.inputHandler($event);
      })("blur", function MentionDirective_blur_HostBindingHandler($event) {
        return ctx.blurHandler($event);
      });
    }
  },
  inputs: {
    mention: "mention",
    mentionConfig: "mentionConfig",
    mentionListTemplate: "mentionListTemplate"
  },
  outputs: {
    searchTerm: "searchTerm",
    itemSelected: "itemSelected",
    opened: "opened",
    closed: "closed"
  },
  features: [ɵɵNgOnChangesFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MentionDirective, [{
    type: Directive,
    args: [{
      selector: "[mention], [mentionConfig]",
      host: {
        "(keydown)": "keyHandler($event)",
        "(input)": "inputHandler($event)",
        "(blur)": "blurHandler($event)",
        "autocomplete": "off"
      }
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: ComponentFactoryResolver$1
    }, {
      type: ViewContainerRef
    }];
  }, {
    mention: [{
      type: Input,
      args: ["mention"]
    }],
    mentionConfig: [{
      type: Input
    }],
    mentionListTemplate: [{
      type: Input
    }],
    searchTerm: [{
      type: Output
    }],
    itemSelected: [{
      type: Output
    }],
    opened: [{
      type: Output
    }],
    closed: [{
      type: Output
    }]
  });
})();
var MentionModule = class {
};
MentionModule.ɵfac = function MentionModule_Factory(t2) {
  return new (t2 || MentionModule)();
};
MentionModule.ɵmod = ɵɵdefineNgModule({
  type: MentionModule,
  declarations: [MentionDirective, MentionListComponent],
  imports: [CommonModule],
  exports: [MentionDirective]
});
MentionModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MentionModule, [{
    type: NgModule,
    args: [{
      declarations: [MentionDirective, MentionListComponent],
      imports: [CommonModule],
      exports: [MentionDirective]
    }]
  }], null, null);
})();

// node_modules/stream-chat-angular/fesm2015/stream-chat-angular.js
var _c03 = (a0, a1, a3) => ({
  flexBasis: a0,
  height: a1,
  objectFit: "cover",
  width: a3
});
function AvatarComponent_img_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "img", 4);
    ɵɵlistener("load", function AvatarComponent_img_1_Template_img_load_0_listener() {
      ɵɵrestoreView(_r5);
      const ctx_r4 = ɵɵnextContext();
      return ɵɵresetView(ctx_r4.isLoaded = true);
    })("error", function AvatarComponent_img_1_Template_img_error_0_listener() {
      ɵɵrestoreView(_r5);
      const ctx_r6 = ɵɵnextContext();
      return ɵɵresetView(ctx_r6.isError = true);
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵstyleMap(ɵɵpureFunction3(7, _c03, "calc(var(--str-chat__spacing-px, 1px) * " + ctx_r0.size + ")", "calc(var(--str-chat__spacing-px, 1px) * " + ctx_r0.size + ")", "calc(var(--str-chat__spacing-px, 1px) * " + ctx_r0.size + ")"));
    ɵɵclassMapInterpolate1("str-chat__avatar-image str-chat__avatar-image", ctx_r0.isLoaded ? " str-chat__avatar-image--loaded" : "", "");
    ɵɵpropertyInterpolate("src", ctx_r0.imageUrl || ctx_r0.fallbackChannelImage, ɵɵsanitizeUrl);
    ɵɵpropertyInterpolate("alt", ctx_r0.initials);
  }
}
function AvatarComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 5);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r1.initials, " ");
  }
}
function AvatarComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "div", 6);
  }
}
var _c13 = (a0, a1, a2, a3, a4) => ({
  flexBasis: a0,
  fontSize: a1,
  height: a2,
  lineHeight: a3,
  width: a4
});
function AvatarPlaceholderComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-avatar", 2);
  }
  if (rf & 2) {
    const name_r3 = ctx.name;
    const imageUrl_r4 = ctx.imageUrl;
    const size_r5 = ctx.size;
    const type_r6 = ctx.type;
    const channel_r7 = ctx.channel;
    const user_r8 = ctx.user;
    const location_r9 = ctx.location;
    const initialsType_r10 = ctx.initialsType;
    const showOnlineIndicator_r11 = ctx.showOnlineIndicator;
    ɵɵproperty("name", name_r3)("imageUrl", imageUrl_r4)("size", size_r5)("type", type_r6)("channel", channel_r7)("user", user_r8)("location", location_r9)("initialsType", initialsType_r10)("showOnlineIndicator", showOnlineIndicator_r11);
  }
}
function AvatarPlaceholderComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function IconComponent__svg_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 22);
    ɵɵelement(1, "path", 23);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 24);
    ɵɵelement(1, "path", 25);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 26)(1, "g", 27);
    ɵɵelement(2, "path", 28)(3, "path", 29);
    ɵɵelementEnd()();
  }
}
function IconComponent__svg_svg_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 30)(1, "title");
    ɵɵtext(2, "Combined Shape");
    ɵɵelementEnd();
    ɵɵelementStart(3, "desc");
    ɵɵtext(4, "Created with Sketch.");
    ɵɵelementEnd();
    ɵɵelementStart(5, "g", 31)(6, "g", 32)(7, "g", 33);
    ɵɵelement(8, "path", 34);
    ɵɵelementEnd()()()();
  }
}
function IconComponent__svg_svg_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 35)(1, "title", 36);
    ɵɵtext(2, "streamChat.Send");
    ɵɵelementEnd();
    ɵɵelement(3, "path", 37);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 38)(1, "title", 36);
    ɵɵtext(2, "streamChat.Attach files");
    ɵɵelementEnd();
    ɵɵelement(3, "path", 39);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 40);
    ɵɵelement(1, "path", 41);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 42);
    ɵɵelement(1, "rect", 43)(2, "circle", 44)(3, "path", 45);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 46);
    ɵɵelement(1, "path", 47);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r8 = ɵɵnextContext();
    ɵɵattribute("height", ctx_r8.size || 20)("width", ctx_r8.size || 20);
  }
}
function IconComponent__svg_svg_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 48);
    ɵɵelement(1, "path", 49)(2, "path", 50)(3, "path", 51)(4, "path", 52)(5, "path", 53);
    ɵɵelementStart(6, "defs")(7, "linearGradient", 54);
    ɵɵelement(8, "stop", 55)(9, "stop", 56);
    ɵɵelementEnd()()();
  }
}
function IconComponent__svg_svg_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 57);
    ɵɵelement(1, "path", 58);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 59);
    ɵɵelement(1, "path", 60);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_12_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 61);
    ɵɵelement(1, "path", 62);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_13_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 63);
    ɵɵelement(1, "path", 64);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_14_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 65);
    ɵɵelement(1, "path", 66);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_15_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 67);
    ɵɵelement(1, "path", 68);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_16_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 69);
    ɵɵelement(1, "path", 70);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_17_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 71);
    ɵɵelement(1, "path", 72);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_18_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 73);
    ɵɵelement(1, "path", 74);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_19_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 75)(1, "g", 76);
    ɵɵelement(2, "path", 77);
    ɵɵelementEnd();
    ɵɵelementStart(3, "defs")(4, "clipPath", 78);
    ɵɵelement(5, "rect", 79);
    ɵɵelementEnd()()();
  }
}
function IconComponent__svg_svg_20_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 80);
    ɵɵelement(1, "path", 81);
    ɵɵelementEnd();
  }
}
function IconComponent__svg_svg_21_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 82);
    ɵɵelement(1, "path", 83)(2, "path", 84);
    ɵɵelementEnd();
  }
}
function IconPlaceholderComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-icon", 2);
  }
  if (rf & 2) {
    const icon_r3 = ctx.icon;
    const size_r4 = ctx.size;
    ɵɵproperty("icon", icon_r3)("size", size_r4);
  }
}
function IconPlaceholderComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c22 = (a0) => ({
  stopColor: a0
});
function LoadingIndicatorPlaceholderComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-loading-indicator", 2);
  }
  if (rf & 2) {
    const size_r3 = ctx.size;
    const color_r4 = ctx.color;
    ɵɵproperty("size", size_r3)("color", color_r4);
  }
}
function LoadingIndicatorPlaceholderComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c3 = ["modalInner"];
function ModalComponent_ng_container_5_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function ModalComponent_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, ModalComponent_ng_container_5_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r1.content);
  }
}
function ModalComponent_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0);
  }
}
var _c4 = ["*"];
var _c5 = ["modalContent"];
function AttachmentListComponent_div_0_ng_container_1_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c6 = (a0, a1) => ({
  height: a0,
  width: a1
});
function AttachmentListComponent_div_0_ng_container_1_ng_container_2_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r20 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "img", 9, 10);
    ɵɵlistener("click", function AttachmentListComponent_div_0_ng_container_1_ng_container_2_ng_template_3_Template_img_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r20);
      const attachmentContext_r17 = restoredCtx.attachment;
      const ctx_r19 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r19.openImageModal([attachmentContext_r17]));
    })("keyup.enter", function AttachmentListComponent_div_0_ng_container_1_ng_container_2_ng_template_3_Template_img_keyup_enter_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r20);
      const attachmentContext_r17 = restoredCtx.attachment;
      const ctx_r21 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r21.openImageModal([attachmentContext_r17]));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentContext_r17 = ctx.attachment;
    const _r18 = ɵɵreference(1);
    const ctx_r15 = ɵɵnextContext(4);
    ɵɵstyleProp("--original-height", ctx_r15.getImageAttachmentConfiguration(attachmentContext_r17, "single", _r18).originalHeight)("--original-width", ctx_r15.getImageAttachmentConfiguration(attachmentContext_r17, "single", _r18).originalWidth);
    ɵɵproperty("src", ctx_r15.getImageAttachmentConfiguration(attachmentContext_r17, "single", _r18).url, ɵɵsanitizeUrl)("alt", attachmentContext_r17 == null ? null : attachmentContext_r17.fallback)("ngStyle", ɵɵpureFunction2(7, _c6, ctx_r15.getImageAttachmentConfiguration(attachmentContext_r17, "single", _r18).height, ctx_r15.getImageAttachmentConfiguration(attachmentContext_r17, "single", _r18).width));
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, AttachmentListComponent_div_0_ng_container_1_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵɵpipe(2, "async");
    ɵɵtemplate(3, AttachmentListComponent_div_0_ng_container_1_ng_container_2_ng_template_3_Template, 2, 10, "ng-template", null, 8, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const _r16 = ɵɵreference(4);
    const attachment_r7 = ɵɵnextContext().$implicit;
    const ctx_r8 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(2, 2, ctx_r8.customTemplatesService.imageAttachmentTemplate$) || _r16)("ngTemplateOutletContext", ctx_r8.getAttachmentContext(attachment_r7));
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_template_3_ng_container_1_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r36 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 15);
    ɵɵlistener("click", function AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_template_3_ng_container_1_button_1_Template_button_click_0_listener() {
      ɵɵrestoreView(_r36);
      const index_r29 = ɵɵnextContext().index;
      const attachmentContext_r26 = ɵɵnextContext().attachment;
      const ctx_r34 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r34.openImageModal(attachmentContext_r26.images, index_r29));
    })("keyup.enter", function AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_template_3_ng_container_1_button_1_Template_button_keyup_enter_0_listener() {
      ɵɵrestoreView(_r36);
      const index_r29 = ɵɵnextContext().index;
      const attachmentContext_r26 = ɵɵnextContext().attachment;
      const ctx_r38 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r38.openImageModal(attachmentContext_r26.images, index_r29));
    });
    ɵɵelement(1, "img", 16, 10);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const _r33 = ɵɵreference(2);
    const galleryImage_r28 = ɵɵnextContext().$implicit;
    const ctx_r31 = ɵɵnextContext(5);
    ɵɵclassProp("str-chat__message-attachment--svg-image", ctx_r31.isSvg(galleryImage_r28));
    ɵɵadvance(1);
    ɵɵstyleProp("--original-height", ctx_r31.getImageAttachmentConfiguration(galleryImage_r28, "gallery", _r33).originalHeight)("--original-width", ctx_r31.getImageAttachmentConfiguration(galleryImage_r28, "gallery", _r33).originalWidth);
    ɵɵproperty("src", ctx_r31.getImageAttachmentConfiguration(galleryImage_r28, "gallery", _r33).url, ɵɵsanitizeUrl)("alt", galleryImage_r28.fallback)("ngStyle", ɵɵpureFunction2(9, _c6, ctx_r31.getImageAttachmentConfiguration(galleryImage_r28, "gallery", _r33).height, ctx_r31.getImageAttachmentConfiguration(galleryImage_r28, "gallery", _r33).width));
  }
}
var _c7 = (a0, a1, a2) => ({
  "background-image": a0,
  height: a1,
  width: a2
});
var _c8 = (a0) => ({
  imageCount: a0
});
function AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_template_3_ng_container_1_button_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r45 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 17, 18);
    ɵɵlistener("click", function AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_template_3_ng_container_1_button_2_Template_button_click_0_listener() {
      ɵɵrestoreView(_r45);
      const index_r29 = ɵɵnextContext().index;
      const attachmentContext_r26 = ɵɵnextContext().attachment;
      const ctx_r43 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r43.openImageModal(attachmentContext_r26.images, index_r29));
    })("keyup.enter", function AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_template_3_ng_container_1_button_2_Template_button_keyup_enter_0_listener() {
      ɵɵrestoreView(_r45);
      const index_r29 = ɵɵnextContext().index;
      const attachmentContext_r26 = ɵɵnextContext().attachment;
      const ctx_r47 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r47.openImageModal(attachmentContext_r26.images, index_r29));
    });
    ɵɵelement(2, "p", 19);
    ɵɵpipe(3, "translate");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const _r42 = ɵɵreference(1);
    const galleryImage_r28 = ɵɵnextContext().$implicit;
    const attachmentContext_r26 = ɵɵnextContext().attachment;
    const ctx_r32 = ɵɵnextContext(4);
    ɵɵstyleProp("--original-height", ctx_r32.getImageAttachmentConfiguration(galleryImage_r28, "gallery", _r42).originalHeight)("--original-width", ctx_r32.getImageAttachmentConfiguration(galleryImage_r28, "gallery", _r42).originalWidth);
    ɵɵclassProp("str-chat__message-attachment--svg-image", ctx_r32.isSvg(galleryImage_r28));
    ɵɵproperty("ngStyle", ɵɵpureFunction3(11, _c7, "url(" + ctx_r32.getImageAttachmentConfiguration(galleryImage_r28, "gallery", _r42).url + ")", ctx_r32.getImageAttachmentConfiguration(galleryImage_r28, "gallery", _r42).height, ctx_r32.getImageAttachmentConfiguration(galleryImage_r28, "gallery", _r42).width));
    ɵɵadvance(2);
    ɵɵproperty("innerHTML", ɵɵpipeBind2(3, 8, "streamChat.{{ imageCount }} more", ɵɵpureFunction1(15, _c8, attachmentContext_r26.images.length - 4)), ɵɵsanitizeHtml);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_template_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_template_3_ng_container_1_button_1_Template, 3, 12, "button", 13)(2, AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_template_3_ng_container_1_button_2_Template, 4, 17, "button", 14);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const index_r29 = ctx.index;
    const isLast_r30 = ctx.last;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", index_r29 < 3 || index_r29 === 3 && isLast_r30);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", index_r29 === 3 && !isLast_r30);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 12);
    ɵɵtemplate(1, AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_template_3_ng_container_1_Template, 3, 2, "ng-container", 4);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentContext_r26 = ctx.attachment;
    const ctx_r24 = ɵɵnextContext(4);
    ɵɵclassProp("str-chat__gallery--square", (attachmentContext_r26 == null ? null : attachmentContext_r26.images.length) > 3)("str-chat__gallery-two-rows", (attachmentContext_r26 == null ? null : attachmentContext_r26.images.length) > 2);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", attachmentContext_r26.images)("ngForTrackBy", ctx_r24.trackByImageUrl);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵɵpipe(2, "async");
    ɵɵtemplate(3, AttachmentListComponent_div_0_ng_container_1_ng_container_3_ng_template_3_Template, 2, 6, "ng-template", null, 11, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const _r25 = ɵɵreference(4);
    const attachment_r7 = ɵɵnextContext().$implicit;
    const ctx_r9 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(2, 2, ctx_r9.customTemplatesService.galleryAttachmentTemplate$) || _r25)("ngTemplateOutletContext", ctx_r9.getAttachmentContext(attachment_r7));
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_4_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 21);
    ɵɵelement(1, "video", 22, 23);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentContext_r56 = ctx.attachment;
    const _r57 = ɵɵreference(2);
    const ctx_r54 = ɵɵnextContext(4);
    ɵɵstyleProp("--original-height", ctx_r54.getVideoAttachmentConfiguration(attachmentContext_r56, _r57).originalHeight)("--original-width", ctx_r54.getVideoAttachmentConfiguration(attachmentContext_r56, _r57).originalWidth);
    ɵɵproperty("ngStyle", ɵɵpureFunction2(7, _c6, ctx_r54.getVideoAttachmentConfiguration(attachmentContext_r56, _r57).height, ctx_r54.getVideoAttachmentConfiguration(attachmentContext_r56, _r57).width));
    ɵɵadvance(1);
    ɵɵproperty("src", ctx_r54.getVideoAttachmentConfiguration(attachmentContext_r56, _r57).url, ɵɵsanitizeUrl)("poster", ctx_r54.getVideoAttachmentConfiguration(attachmentContext_r56, _r57).thumbUrl, ɵɵsanitizeUrl);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, AttachmentListComponent_div_0_ng_container_1_ng_container_4_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵɵpipe(2, "async");
    ɵɵtemplate(3, AttachmentListComponent_div_0_ng_container_1_ng_container_4_ng_template_3_Template, 3, 10, "ng-template", null, 20, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const _r55 = ɵɵreference(4);
    const attachment_r7 = ɵɵnextContext().$implicit;
    const ctx_r10 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(2, 2, ctx_r10.customTemplatesService.videoAttachmentTemplate$) || _r55)("ngTemplateOutletContext", ctx_r10.getAttachmentContext(attachment_r7));
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_5_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_5_ng_template_3_stream_icon_placeholder_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-icon-placeholder", 32);
  }
  if (rf & 2) {
    ɵɵproperty("size", 30);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_5_ng_template_3_stream_icon_placeholder_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-icon-placeholder", 33);
  }
  if (rf & 2) {
    ɵɵproperty("size", 30);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_5_ng_template_3_span_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 34);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentContext_r62 = ɵɵnextContext().attachment;
    const ctx_r65 = ɵɵnextContext(4);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r65.getFileSize(attachmentContext_r62));
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_5_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "a", 25);
    ɵɵtemplate(1, AttachmentListComponent_div_0_ng_container_1_ng_container_5_ng_template_3_stream_icon_placeholder_1_Template, 1, 1, "stream-icon-placeholder", 26)(2, AttachmentListComponent_div_0_ng_container_1_ng_container_5_ng_template_3_stream_icon_placeholder_2_Template, 1, 1, "stream-icon-placeholder", 27);
    ɵɵelementStart(3, "div", 28)(4, "div", 29)(5, "div", 30);
    ɵɵtext(6);
    ɵɵelementEnd()();
    ɵɵtemplate(7, AttachmentListComponent_div_0_ng_container_1_ng_container_5_ng_template_3_span_7_Template, 2, 1, "span", 31);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const attachmentContext_r62 = ctx.attachment;
    const ctx_r60 = ɵɵnextContext(4);
    ɵɵpropertyInterpolate("href", attachmentContext_r62.asset_url, ɵɵsanitizeUrl);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r60.themeVersion === "1");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r60.themeVersion === "2");
    ɵɵadvance(4);
    ɵɵtextInterpolate1(" ", attachmentContext_r62.title, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r60.hasFileSize(attachmentContext_r62));
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, AttachmentListComponent_div_0_ng_container_1_ng_container_5_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵɵpipe(2, "async");
    ɵɵtemplate(3, AttachmentListComponent_div_0_ng_container_1_ng_container_5_ng_template_3_Template, 8, 5, "ng-template", null, 24, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const _r61 = ɵɵreference(4);
    const attachment_r7 = ɵɵnextContext().$implicit;
    const ctx_r11 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(2, 2, ctx_r11.customTemplatesService.fileAttachmentTemplate$) || _r61)("ngTemplateOutletContext", ctx_r11.getAttachmentContext(attachment_r7));
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_6_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_6_ng_template_3_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 42);
    ɵɵelement(1, "img", 43);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentConfiguration_r68 = ɵɵnextContext(2).ngIf;
    ɵɵadvance(1);
    ɵɵpropertyInterpolate("alt", attachmentConfiguration_r68.url);
    ɵɵpropertyInterpolate("src", attachmentConfiguration_r68.url, ɵɵsanitizeUrl);
    ɵɵproperty("ngStyle", ɵɵpureFunction2(3, _c6, attachmentConfiguration_r68.height, attachmentConfiguration_r68.width));
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_6_ng_template_3_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 44);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentContext_r72 = ɵɵnextContext().attachment;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", attachmentContext_r72.title, " ");
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_6_ng_template_3_div_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 45);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentContext_r72 = ɵɵnextContext().attachment;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", attachmentContext_r72.text, " ");
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_6_ng_template_3_a_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "a", 46);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentContext_r72 = ɵɵnextContext().attachment;
    const ctx_r76 = ɵɵnextContext(4);
    ɵɵpropertyInterpolate("href", attachmentContext_r72.title_link || attachmentContext_r72.og_scrape_url, ɵɵsanitizeUrl);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r76.trimUrl(attachmentContext_r72.title_link || attachmentContext_r72.og_scrape_url), " ");
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_6_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtemplate(1, AttachmentListComponent_div_0_ng_container_1_ng_container_6_ng_template_3_div_1_Template, 2, 6, "div", 36);
    ɵɵelementStart(2, "div", 37)(3, "div", 38);
    ɵɵtemplate(4, AttachmentListComponent_div_0_ng_container_1_ng_container_6_ng_template_3_div_4_Template, 2, 1, "div", 39)(5, AttachmentListComponent_div_0_ng_container_1_ng_container_6_ng_template_3_div_5_Template, 2, 1, "div", 40)(6, AttachmentListComponent_div_0_ng_container_1_ng_container_6_ng_template_3_a_6_Template, 2, 2, "a", 41);
    ɵɵelementEnd()()();
  }
  if (rf & 2) {
    const attachmentContext_r72 = ctx.attachment;
    const attachmentConfiguration_r68 = ɵɵnextContext().ngIf;
    ɵɵclassMapInterpolate1("str-chat__message-attachment-card str-chat__message-attachment-card--", attachmentContext_r72.type, "");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentConfiguration_r68.url);
    ɵɵadvance(3);
    ɵɵproperty("ngIf", attachmentContext_r72.title);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentContext_r72.text);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentContext_r72.title_link || attachmentContext_r72.og_scrape_url);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, AttachmentListComponent_div_0_ng_container_1_ng_container_6_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵɵpipe(2, "async");
    ɵɵtemplate(3, AttachmentListComponent_div_0_ng_container_1_ng_container_6_ng_template_3_Template, 7, 7, "ng-template", null, 35, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const _r71 = ɵɵreference(4);
    const attachment_r7 = ɵɵnextContext().$implicit;
    const ctx_r12 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(2, 2, ctx_r12.customTemplatesService.cardAttachmentTemplate$) || _r71)("ngTemplateOutletContext", ctx_r12.getAttachmentContext(attachment_r7));
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_7_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_7_ng_template_3_button_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r90 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 51);
    ɵɵlistener("click", function AttachmentListComponent_div_0_ng_container_1_ng_container_7_ng_template_3_button_2_Template_button_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r90);
      const action_r88 = restoredCtx.$implicit;
      const ctx_r89 = ɵɵnextContext(5);
      return ɵɵresetView(ctx_r89.sendAction(action_r88));
    })("keyup.enter", function AttachmentListComponent_div_0_ng_container_1_ng_container_7_ng_template_3_button_2_Template_button_keyup_enter_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r90);
      const action_r88 = restoredCtx.$implicit;
      const ctx_r91 = ɵɵnextContext(5);
      return ɵɵresetView(ctx_r91.sendAction(action_r88));
    });
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const action_r88 = ctx.$implicit;
    ɵɵclassMapInterpolate1("str-chat__message-attachment-actions-button str-chat__message-attachment-actions-button--", action_r88.style, "");
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", action_r88.text, " ");
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_7_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 48)(1, "div", 49);
    ɵɵtemplate(2, AttachmentListComponent_div_0_ng_container_1_ng_container_7_ng_template_3_button_2_Template, 2, 4, "button", 50);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const attachmentContext_r86 = ctx.attachment;
    const ctx_r84 = ɵɵnextContext(4);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", attachmentContext_r86.actions)("ngForTrackBy", ctx_r84.trackByActionValue);
  }
}
function AttachmentListComponent_div_0_ng_container_1_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, AttachmentListComponent_div_0_ng_container_1_ng_container_7_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵɵpipe(2, "async");
    ɵɵtemplate(3, AttachmentListComponent_div_0_ng_container_1_ng_container_7_ng_template_3_Template, 3, 2, "ng-template", null, 47, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const _r85 = ɵɵreference(4);
    const attachment_r7 = ɵɵnextContext().$implicit;
    const ctx_r13 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(2, 2, ctx_r13.customTemplatesService.attachmentActionsTemplate$) || _r85)("ngTemplateOutletContext", ctx_r13.getAttachmentContext(attachment_r7));
  }
}
function AttachmentListComponent_div_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "div", 6);
    ɵɵtemplate(2, AttachmentListComponent_div_0_ng_container_1_ng_container_2_Template, 5, 4, "ng-container", 5)(3, AttachmentListComponent_div_0_ng_container_1_ng_container_3_Template, 5, 4, "ng-container", 5)(4, AttachmentListComponent_div_0_ng_container_1_ng_container_4_Template, 5, 4, "ng-container", 5)(5, AttachmentListComponent_div_0_ng_container_1_ng_container_5_Template, 5, 4, "ng-container", 5)(6, AttachmentListComponent_div_0_ng_container_1_ng_container_6_Template, 5, 4, "ng-container", 5)(7, AttachmentListComponent_div_0_ng_container_1_ng_container_7_Template, 5, 4, "ng-container", 5);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const attachment_r7 = ctx.$implicit;
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵclassMapInterpolate1("str-chat__message-attachment str-chat__message-attachment--", attachment_r7.type, " str-chat__message-attachment-dynamic-size");
    ɵɵclassProp("str-chat__message-attachment--card", ctx_r5.isCard(attachment_r7))("str-chat-angular__message-attachment-file-single", ctx_r5.isFile(attachment_r7))("str-chat__message-attachment-with-actions", attachment_r7.actions && attachment_r7.actions.length > 0)("str-chat__message-attachment--svg-image", ctx_r5.isSvg(attachment_r7));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isImage(attachment_r7));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isGallery(attachment_r7));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isVideo(attachment_r7));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isFile(attachment_r7));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isCard(attachment_r7) && ctx_r5.getCardAttachmentConfiguration(attachment_r7));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachment_r7.actions && attachment_r7.actions.length > 0);
  }
}
function AttachmentListComponent_div_0_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function AttachmentListComponent_div_0_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, AttachmentListComponent_div_0_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵɵpipe(2, "async");
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    const _r2 = ɵɵreference(2);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(2, 2, ctx_r6.customTemplatesService.modalTemplate$) || _r2)("ngTemplateOutletContext", ctx_r6.getModalContext());
  }
}
function AttachmentListComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 3);
    ɵɵtemplate(1, AttachmentListComponent_div_0_ng_container_1_Template, 8, 17, "ng-container", 4)(2, AttachmentListComponent_div_0_ng_container_2_Template, 3, 4, "ng-container", 5);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.orderedAttachments)("ngForTrackBy", ctx_r0.trackByUrl);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.imagesToView && ctx_r0.imagesToView.length > 0);
  }
}
function AttachmentListComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r98 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "stream-modal", 52);
    ɵɵlistener("isOpenChange", function AttachmentListComponent_ng_template_1_Template_stream_modal_isOpenChange_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r98);
      const isOpenChangeHandler_r95 = restoredCtx.isOpenChangeHandler;
      return ɵɵresetView(isOpenChangeHandler_r95($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const isOpen_r94 = ctx.isOpen;
    const content_r96 = ctx.content;
    ɵɵproperty("isOpen", isOpen_r94)("content", content_r96);
  }
}
var _c9 = (a0) => ({
  visibility: a0
});
var _c10 = (a0, a1) => ({
  width: a0,
  height: a1
});
function AttachmentListComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r101 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 53)(1, "button", 54);
    ɵɵlistener("click", function AttachmentListComponent_ng_template_3_Template_button_click_1_listener() {
      ɵɵrestoreView(_r101);
      const ctx_r100 = ɵɵnextContext();
      return ɵɵresetView(ctx_r100.stepImages(-1));
    })("keyup.enter", function AttachmentListComponent_ng_template_3_Template_button_keyup_enter_1_listener() {
      ɵɵrestoreView(_r101);
      const ctx_r102 = ɵɵnextContext();
      return ɵɵresetView(ctx_r102.stepImages(-1));
    });
    ɵɵelement(2, "stream-icon-placeholder", 55);
    ɵɵelementEnd();
    ɵɵelement(3, "img", 56, 10);
    ɵɵelementStart(5, "button", 57);
    ɵɵlistener("click", function AttachmentListComponent_ng_template_3_Template_button_click_5_listener() {
      ɵɵrestoreView(_r101);
      const ctx_r103 = ɵɵnextContext();
      return ɵɵresetView(ctx_r103.stepImages(1));
    })("keyup.enter", function AttachmentListComponent_ng_template_3_Template_button_keyup_enter_5_listener() {
      ɵɵrestoreView(_r101);
      const ctx_r104 = ɵɵnextContext();
      return ɵɵresetView(ctx_r104.stepImages(1));
    });
    ɵɵelement(6, "stream-icon-placeholder", 58);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const _r99 = ɵɵreference(4);
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngStyle", ɵɵpureFunction1(9, _c9, ctx_r3.isImageModalPrevButtonVisible ? "visible" : "hidden"));
    ɵɵadvance(2);
    ɵɵstyleProp("--original-height", ctx_r3.getCarouselImageAttachmentConfiguration(ctx_r3.imagesToView[ctx_r3.imagesToViewCurrentIndex], _r99).originalHeight)("--original-width", ctx_r3.getCarouselImageAttachmentConfiguration(ctx_r3.imagesToView[ctx_r3.imagesToViewCurrentIndex], _r99).originalWidth);
    ɵɵproperty("src", ctx_r3.getCarouselImageAttachmentConfiguration(ctx_r3.imagesToView[ctx_r3.imagesToViewCurrentIndex], _r99).url, ɵɵsanitizeUrl)("alt", ctx_r3.imagesToView[ctx_r3.imagesToViewCurrentIndex].fallback)("ngStyle", ɵɵpureFunction2(11, _c10, ctx_r3.getCarouselImageAttachmentConfiguration(ctx_r3.imagesToView[ctx_r3.imagesToViewCurrentIndex], _r99).width, ctx_r3.getCarouselImageAttachmentConfiguration(ctx_r3.imagesToView[ctx_r3.imagesToViewCurrentIndex], _r99).height));
    ɵɵadvance(2);
    ɵɵproperty("ngStyle", ɵɵpureFunction1(14, _c9, ctx_r3.isImageModalNextButtonVisible ? "visible" : "hidden"));
  }
}
function AttachmentPreviewListComponent_div_0_ng_container_1_div_1_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 16);
    ɵɵlistener("click", function AttachmentPreviewListComponent_div_0_ng_container_1_div_1_div_1_Template_div_click_0_listener() {
      ɵɵrestoreView(_r15);
      const attachmentUpload_r7 = ɵɵnextContext(2).$implicit;
      const ctx_r13 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r13.attachmentUploadRetried(attachmentUpload_r7.file));
    })("keyup.enter", function AttachmentPreviewListComponent_div_0_ng_container_1_div_1_div_1_Template_div_keyup_enter_0_listener() {
      ɵɵrestoreView(_r15);
      const attachmentUpload_r7 = ɵɵnextContext(2).$implicit;
      const ctx_r16 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r16.attachmentUploadRetried(attachmentUpload_r7.file));
    });
    ɵɵelement(1, "stream-icon-placeholder", 17);
    ɵɵelementEnd();
  }
}
function AttachmentPreviewListComponent_div_0_ng_container_1_div_1_img_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "img", 18);
  }
  if (rf & 2) {
    const attachmentUpload_r7 = ɵɵnextContext(2).$implicit;
    ɵɵpropertyInterpolate("src", attachmentUpload_r7.url ? attachmentUpload_r7.url : attachmentUpload_r7.previewUri, ɵɵsanitizeUrl);
    ɵɵpropertyInterpolate("alt", attachmentUpload_r7.file.name);
  }
}
function AttachmentPreviewListComponent_div_0_ng_container_1_div_1_stream_loading_indicator_placeholder_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-loading-indicator-placeholder", 19);
  }
}
function AttachmentPreviewListComponent_div_0_ng_container_1_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r21 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 8);
    ɵɵtemplate(1, AttachmentPreviewListComponent_div_0_ng_container_1_div_1_div_1_Template, 2, 0, "div", 9);
    ɵɵelementStart(2, "div", 10)(3, "div", 11)(4, "div", 12);
    ɵɵlistener("click", function AttachmentPreviewListComponent_div_0_ng_container_1_div_1_Template_div_click_4_listener() {
      ɵɵrestoreView(_r21);
      const attachmentUpload_r7 = ɵɵnextContext().$implicit;
      const ctx_r19 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r19.attachmentDeleted(attachmentUpload_r7));
    })("keyup.enter", function AttachmentPreviewListComponent_div_0_ng_container_1_div_1_Template_div_keyup_enter_4_listener() {
      ɵɵrestoreView(_r21);
      const attachmentUpload_r7 = ɵɵnextContext().$implicit;
      const ctx_r22 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r22.attachmentDeleted(attachmentUpload_r7));
    });
    ɵɵelement(5, "stream-icon-placeholder", 13);
    ɵɵelementEnd()();
    ɵɵtemplate(6, AttachmentPreviewListComponent_div_0_ng_container_1_div_1_img_6_Template, 1, 2, "img", 14);
    ɵɵelementEnd();
    ɵɵtemplate(7, AttachmentPreviewListComponent_div_0_ng_container_1_div_1_stream_loading_indicator_placeholder_7_Template, 1, 0, "stream-loading-indicator-placeholder", 15);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentUpload_r7 = ɵɵnextContext().$implicit;
    ɵɵclassProp("rfu-image-previewer__image--loaded", attachmentUpload_r7.state === "success");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentUpload_r7.state === "error");
    ɵɵadvance(5);
    ɵɵproperty("ngIf", attachmentUpload_r7.url || attachmentUpload_r7.previewUri);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentUpload_r7.state === "uploading");
  }
}
function AttachmentPreviewListComponent_div_0_ng_container_1_div_2_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r29 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "div", 27);
    ɵɵlistener("click", function AttachmentPreviewListComponent_div_0_ng_container_1_div_2_ng_container_6_Template_div_click_1_listener() {
      ɵɵrestoreView(_r29);
      const attachmentUpload_r7 = ɵɵnextContext(2).$implicit;
      const ctx_r27 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r27.attachmentUploadRetried(attachmentUpload_r7.file));
    })("keyup.enter", function AttachmentPreviewListComponent_div_0_ng_container_1_div_2_ng_container_6_Template_div_keyup_enter_1_listener() {
      ɵɵrestoreView(_r29);
      const attachmentUpload_r7 = ɵɵnextContext(2).$implicit;
      const ctx_r30 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r30.attachmentUploadRetried(attachmentUpload_r7.file));
    });
    ɵɵtext(2, " streamChat.failed ");
    ɵɵelementEnd();
    ɵɵelementStart(3, "div", 28);
    ɵɵlistener("click", function AttachmentPreviewListComponent_div_0_ng_container_1_div_2_ng_container_6_Template_div_click_3_listener() {
      ɵɵrestoreView(_r29);
      const attachmentUpload_r7 = ɵɵnextContext(2).$implicit;
      const ctx_r32 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r32.attachmentUploadRetried(attachmentUpload_r7.file));
    })("keyup.enter", function AttachmentPreviewListComponent_div_0_ng_container_1_div_2_ng_container_6_Template_div_keyup_enter_3_listener() {
      ɵɵrestoreView(_r29);
      const attachmentUpload_r7 = ɵɵnextContext(2).$implicit;
      const ctx_r34 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r34.attachmentUploadRetried(attachmentUpload_r7.file));
    });
    ɵɵtext(4, " streamChat.retry ");
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
  }
}
function AttachmentPreviewListComponent_div_0_ng_container_1_div_2_div_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 29);
    ɵɵelement(1, "stream-loading-indicator-placeholder");
    ɵɵelementEnd();
  }
}
function AttachmentPreviewListComponent_div_0_ng_container_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r38 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 20)(1, "ol")(2, "li", 21);
    ɵɵelement(3, "stream-icon-placeholder", 22);
    ɵɵelementStart(4, "a", 23);
    ɵɵlistener("click", function AttachmentPreviewListComponent_div_0_ng_container_1_div_2_Template_a_click_4_listener($event) {
      ɵɵrestoreView(_r38);
      const attachmentUpload_r7 = ɵɵnextContext().$implicit;
      return ɵɵresetView(attachmentUpload_r7.url ? null : $event.preventDefault());
    })("keyup.enter", function AttachmentPreviewListComponent_div_0_ng_container_1_div_2_Template_a_keyup_enter_4_listener($event) {
      ɵɵrestoreView(_r38);
      const attachmentUpload_r7 = ɵɵnextContext().$implicit;
      return ɵɵresetView(attachmentUpload_r7.url ? null : $event.preventDefault());
    });
    ɵɵtext(5);
    ɵɵtemplate(6, AttachmentPreviewListComponent_div_0_ng_container_1_div_2_ng_container_6_Template, 5, 0, "ng-container", 24);
    ɵɵelementEnd();
    ɵɵelementStart(7, "span", 25);
    ɵɵlistener("click", function AttachmentPreviewListComponent_div_0_ng_container_1_div_2_Template_span_click_7_listener() {
      ɵɵrestoreView(_r38);
      const attachmentUpload_r7 = ɵɵnextContext().$implicit;
      const ctx_r41 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r41.attachmentDeleted(attachmentUpload_r7));
    })("keyup.enter", function AttachmentPreviewListComponent_div_0_ng_container_1_div_2_Template_span_keyup_enter_7_listener() {
      ɵɵrestoreView(_r38);
      const attachmentUpload_r7 = ɵɵnextContext().$implicit;
      const ctx_r43 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r43.attachmentDeleted(attachmentUpload_r7));
    });
    ɵɵelement(8, "stream-icon-placeholder", 13);
    ɵɵelementEnd();
    ɵɵtemplate(9, AttachmentPreviewListComponent_div_0_ng_container_1_div_2_div_9_Template, 2, 0, "div", 26);
    ɵɵelementEnd()()();
  }
  if (rf & 2) {
    const attachmentUpload_r7 = ɵɵnextContext().$implicit;
    ɵɵadvance(2);
    ɵɵclassProp("rfu-file-previewer__file--uploading", attachmentUpload_r7.state === "uploading")("rfu-file-previewer__file--failed", attachmentUpload_r7.state === "error");
    ɵɵadvance(2);
    ɵɵpropertyInterpolate("href", attachmentUpload_r7.url, ɵɵsanitizeUrl);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", attachmentUpload_r7.file.name, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentUpload_r7.state === "error");
    ɵɵadvance(3);
    ɵɵproperty("ngIf", attachmentUpload_r7.state === "uploading");
  }
}
function AttachmentPreviewListComponent_div_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, AttachmentPreviewListComponent_div_0_ng_container_1_div_1_Template, 8, 5, "div", 6)(2, AttachmentPreviewListComponent_div_0_ng_container_1_div_2_Template, 10, 8, "div", 7);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const attachmentUpload_r7 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentUpload_r7.type === "image");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentUpload_r7.type === "file" || attachmentUpload_r7.type === "video");
  }
}
function AttachmentPreviewListComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 4);
    ɵɵtemplate(1, AttachmentPreviewListComponent_div_0_ng_container_1_Template, 3, 2, "ng-container", 5);
    ɵɵpipe(2, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ɵɵpipeBind1(2, 2, ctx_r0.attachmentUploads$))("ngForTrackBy", ctx_r0.trackByFile);
  }
}
function AttachmentPreviewListComponent_div_2_ng_container_2_div_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function AttachmentPreviewListComponent_div_2_ng_container_2_div_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 38);
    ɵɵelement(1, "stream-loading-indicator-placeholder", 39);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    ɵɵadvance(1);
    ɵɵproperty("size", 18);
  }
}
function AttachmentPreviewListComponent_div_2_ng_container_2_div_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function AttachmentPreviewListComponent_div_2_ng_container_2_div_1_img_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "img", 40);
  }
  if (rf & 2) {
    const attachmentUpload_r47 = ɵɵnextContext(2).$implicit;
    ɵɵpropertyInterpolate("src", attachmentUpload_r47.url ? attachmentUpload_r47.url : attachmentUpload_r47.previewUri, ɵɵsanitizeUrl);
    ɵɵpropertyInterpolate("alt", attachmentUpload_r47.file.name);
  }
}
var _c11 = (a0) => ({
  attachmentUpload: a0
});
function AttachmentPreviewListComponent_div_2_ng_container_2_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 34);
    ɵɵtemplate(1, AttachmentPreviewListComponent_div_2_ng_container_2_div_1_ng_container_1_Template, 1, 0, "ng-container", 35)(2, AttachmentPreviewListComponent_div_2_ng_container_2_div_1_div_2_Template, 2, 1, "div", 36)(3, AttachmentPreviewListComponent_div_2_ng_container_2_div_1_ng_container_3_Template, 1, 0, "ng-container", 35)(4, AttachmentPreviewListComponent_div_2_ng_container_2_div_1_img_4_Template, 1, 2, "img", 37);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentUpload_r47 = ɵɵnextContext().$implicit;
    ɵɵnextContext(2);
    const _r3 = ɵɵreference(5);
    const _r5 = ɵɵreference(7);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", ɵɵpureFunction1(6, _c11, attachmentUpload_r47));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentUpload_r47.state === "uploading");
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r5)("ngTemplateOutletContext", ɵɵpureFunction1(8, _c11, attachmentUpload_r47));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentUpload_r47.url || attachmentUpload_r47.previewUri);
  }
}
function AttachmentPreviewListComponent_div_2_ng_container_2_div_2_a_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r62 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 47);
    ɵɵlistener("click", function AttachmentPreviewListComponent_div_2_ng_container_2_div_2_a_5_Template_a_click_0_listener($event) {
      ɵɵrestoreView(_r62);
      const attachmentUpload_r47 = ɵɵnextContext(2).$implicit;
      return ɵɵresetView(attachmentUpload_r47.url ? null : $event.preventDefault());
    })("keyup.enter", function AttachmentPreviewListComponent_div_2_ng_container_2_div_2_a_5_Template_a_keyup_enter_0_listener($event) {
      ɵɵrestoreView(_r62);
      const attachmentUpload_r47 = ɵɵnextContext(2).$implicit;
      return ɵɵresetView(attachmentUpload_r47.url ? null : $event.preventDefault());
    });
    ɵɵelement(1, "stream-icon-placeholder", 48);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentUpload_r47 = ɵɵnextContext(2).$implicit;
    ɵɵpropertyInterpolate("href", attachmentUpload_r47.url, ɵɵsanitizeUrl);
  }
}
function AttachmentPreviewListComponent_div_2_ng_container_2_div_2_stream_loading_indicator_placeholder_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-loading-indicator-placeholder", 39);
  }
  if (rf & 2) {
    ɵɵproperty("size", 18);
  }
}
function AttachmentPreviewListComponent_div_2_ng_container_2_div_2_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function AttachmentPreviewListComponent_div_2_ng_container_2_div_2_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function AttachmentPreviewListComponent_div_2_ng_container_2_div_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 41);
    ɵɵelement(1, "stream-icon-placeholder", 42);
    ɵɵelementStart(2, "div", 43)(3, "div", 44);
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵtemplate(5, AttachmentPreviewListComponent_div_2_ng_container_2_div_2_a_5_Template, 2, 1, "a", 45)(6, AttachmentPreviewListComponent_div_2_ng_container_2_div_2_stream_loading_indicator_placeholder_6_Template, 1, 1, "stream-loading-indicator-placeholder", 46);
    ɵɵelementEnd();
    ɵɵtemplate(7, AttachmentPreviewListComponent_div_2_ng_container_2_div_2_ng_container_7_Template, 1, 0, "ng-container", 35)(8, AttachmentPreviewListComponent_div_2_ng_container_2_div_2_ng_container_8_Template, 1, 0, "ng-container", 35);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentUpload_r47 = ɵɵnextContext().$implicit;
    ɵɵnextContext(2);
    const _r3 = ɵɵreference(5);
    const _r5 = ɵɵreference(7);
    ɵɵadvance(4);
    ɵɵtextInterpolate1(" ", attachmentUpload_r47.file.name, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentUpload_r47.state === "success");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentUpload_r47.state === "uploading");
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", ɵɵpureFunction1(7, _c11, attachmentUpload_r47));
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r5)("ngTemplateOutletContext", ɵɵpureFunction1(9, _c11, attachmentUpload_r47));
  }
}
function AttachmentPreviewListComponent_div_2_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, AttachmentPreviewListComponent_div_2_ng_container_2_div_1_Template, 5, 10, "div", 32)(2, AttachmentPreviewListComponent_div_2_ng_container_2_div_2_Template, 9, 11, "div", 33);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const attachmentUpload_r47 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentUpload_r47.type === "image");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", attachmentUpload_r47.type === "file" || attachmentUpload_r47.type === "video");
  }
}
function AttachmentPreviewListComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 30)(1, "div", 31);
    ɵɵtemplate(2, AttachmentPreviewListComponent_div_2_ng_container_2_Template, 3, 2, "ng-container", 5);
    ɵɵpipe(3, "async");
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ɵɵpipeBind1(3, 2, ctx_r1.attachmentUploads$))("ngForTrackBy", ctx_r1.trackByFile);
  }
}
function AttachmentPreviewListComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r69 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 49);
    ɵɵlistener("click", function AttachmentPreviewListComponent_ng_template_4_Template_div_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r69);
      const attachmentUpload_r67 = restoredCtx.attachmentUpload;
      const ctx_r68 = ɵɵnextContext();
      return ɵɵresetView(ctx_r68.attachmentDeleted(attachmentUpload_r67));
    })("keyup.enter", function AttachmentPreviewListComponent_ng_template_4_Template_div_keyup_enter_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r69);
      const attachmentUpload_r67 = restoredCtx.attachmentUpload;
      const ctx_r70 = ɵɵnextContext();
      return ɵɵresetView(ctx_r70.attachmentDeleted(attachmentUpload_r67));
    });
    ɵɵelement(1, "stream-icon-placeholder", 13);
    ɵɵelementEnd();
  }
}
function AttachmentPreviewListComponent_ng_template_6_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r75 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 51);
    ɵɵlistener("click", function AttachmentPreviewListComponent_ng_template_6_div_0_Template_div_click_0_listener() {
      ɵɵrestoreView(_r75);
      const attachmentUpload_r71 = ɵɵnextContext().attachmentUpload;
      const ctx_r73 = ɵɵnextContext();
      return ɵɵresetView(ctx_r73.attachmentUploadRetried(attachmentUpload_r71.file));
    })("keyup.enter", function AttachmentPreviewListComponent_ng_template_6_div_0_Template_div_keyup_enter_0_listener() {
      ɵɵrestoreView(_r75);
      const attachmentUpload_r71 = ɵɵnextContext().attachmentUpload;
      const ctx_r76 = ɵɵnextContext();
      return ɵɵresetView(ctx_r76.attachmentUploadRetried(attachmentUpload_r71.file));
    });
    ɵɵelement(1, "stream-icon-placeholder", 17);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentUpload_r71 = ɵɵnextContext().attachmentUpload;
    ɵɵclassMapInterpolate1("str-chat__attachment-preview-error str-chat__attachment-preview-error-", attachmentUpload_r71.type === "image" ? "image" : "file", "");
  }
}
function AttachmentPreviewListComponent_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, AttachmentPreviewListComponent_ng_template_6_div_0_Template, 2, 3, "div", 50);
  }
  if (rf & 2) {
    const attachmentUpload_r71 = ctx.attachmentUpload;
    ɵɵproperty("ngIf", attachmentUpload_r71.state === "error");
  }
}
var _c122 = ["fileInput"];
function MessageInputComponent_div_0_div_2_stream_attachment_list_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-attachment-list", 22);
  }
  if (rf & 2) {
    const ctx_r13 = ɵɵnextContext(3);
    ɵɵproperty("attachments", ctx_r13.quotedMessageAttachments)("messageId", ctx_r13.quotedMessage == null ? null : ctx_r13.quotedMessage.id);
  }
}
function MessageInputComponent_div_0_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 13)(1, "div", 14)(2, "div");
    ɵɵtext(3);
    ɵɵpipe(4, "translate");
    ɵɵelementEnd();
    ɵɵelementStart(5, "button", 15);
    ɵɵlistener("click", function MessageInputComponent_div_0_div_2_Template_button_click_5_listener() {
      ɵɵrestoreView(_r15);
      const ctx_r14 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r14.deselectMessageToQuote());
    })("keyup.enter", function MessageInputComponent_div_0_div_2_Template_button_keyup_enter_5_listener() {
      ɵɵrestoreView(_r15);
      const ctx_r16 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r16.deselectMessageToQuote());
    });
    ɵɵelement(6, "stream-icon-placeholder", 16);
    ɵɵelementEnd()();
    ɵɵelementStart(7, "div", 17);
    ɵɵelement(8, "stream-avatar-placeholder", 18);
    ɵɵelementStart(9, "div", 19);
    ɵɵtemplate(10, MessageInputComponent_div_0_div_2_stream_attachment_list_10_Template, 1, 2, "stream-attachment-list", 20);
    ɵɵelement(11, "div", 21);
    ɵɵelementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ɵɵpipeBind1(4, 7, "streamChat.Reply to Message"));
    ɵɵadvance(5);
    ɵɵproperty("imageUrl", ctx_r2.quotedMessage == null ? null : ctx_r2.quotedMessage.user == null ? null : ctx_r2.quotedMessage.user.image)("name", (ctx_r2.quotedMessage == null ? null : ctx_r2.quotedMessage.user == null ? null : ctx_r2.quotedMessage.user.name) || (ctx_r2.quotedMessage == null ? null : ctx_r2.quotedMessage.user == null ? null : ctx_r2.quotedMessage.user.id))("size", 20)("user", (ctx_r2.quotedMessage == null ? null : ctx_r2.quotedMessage.user) || void 0);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", (ctx_r2.quotedMessage == null ? null : ctx_r2.quotedMessage.attachments) && (ctx_r2.quotedMessage == null ? null : ctx_r2.quotedMessage.attachments == null ? null : ctx_r2.quotedMessage.attachments.length));
    ɵɵadvance(1);
    ɵɵproperty("innerHTML", (ctx_r2.message == null ? null : ctx_r2.message.quoted_message == null ? null : ctx_r2.message.quoted_message.translation) || (ctx_r2.quotedMessage == null ? null : ctx_r2.quotedMessage.html) || (ctx_r2.quotedMessage == null ? null : ctx_r2.quotedMessage.text), ɵɵsanitizeHtml);
  }
}
function MessageInputComponent_div_0_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r21 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "stream-attachment-preview-list", 23);
    ɵɵlistener("retryAttachmentUpload", function MessageInputComponent_div_0_ng_template_5_Template_stream_attachment_preview_list_retryAttachmentUpload_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r21);
      const retryUploadHandler_r18 = restoredCtx.retryUploadHandler;
      return ɵɵresetView(retryUploadHandler_r18($event));
    })("deleteAttachment", function MessageInputComponent_div_0_ng_template_5_Template_stream_attachment_preview_list_deleteAttachment_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r21);
      const deleteUploadHandler_r19 = restoredCtx.deleteUploadHandler;
      return ɵɵresetView(deleteUploadHandler_r19($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentUploads$_r17 = ctx.attachmentUploads$;
    ɵɵproperty("attachmentUploads$", attachmentUploads$_r17);
  }
}
function MessageInputComponent_div_0_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageInputComponent_div_0_ng_container_9_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageInputComponent_div_0_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0, 24);
    ɵɵelementStart(1, "div", 25);
    ɵɵtemplate(2, MessageInputComponent_div_0_ng_container_9_ng_container_2_Template, 1, 0, "ng-container", 5);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", ctx_r6.emojiPickerTemplate)("ngTemplateOutletContext", ctx_r6.getEmojiPickerContext());
  }
}
function MessageInputComponent_div_0_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r25 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0)(1, 26);
    ɵɵlistener("valueChange", function MessageInputComponent_div_0_ng_container_10_Template_ng_container_valueChange_1_listener($event) {
      ɵɵrestoreView(_r25);
      const ctx_r24 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r24.textareaValue = $event);
    })("valueChange", function MessageInputComponent_div_0_ng_container_10_Template_ng_container_valueChange_1_listener() {
      ɵɵrestoreView(_r25);
      const ctx_r26 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r26.typingStart$.next());
    })("send", function MessageInputComponent_div_0_ng_container_10_Template_ng_container_send_1_listener() {
      ɵɵrestoreView(_r25);
      const ctx_r27 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r27.messageSent());
    })("userMentions", function MessageInputComponent_div_0_ng_container_10_Template_ng_container_userMentions_1_listener($event) {
      ɵɵrestoreView(_r25);
      const ctx_r28 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r28.mentionedUsers = $event);
    });
    ɵɵelementContainerEnd()();
  }
  if (rf & 2) {
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("value", ctx_r7.textareaValue)("componentRef", ctx_r7.textareaRef)("areMentionsEnabled", ctx_r7.areMentionsEnabled)("mentionScope", ctx_r7.mentionScope)("placeholder", ctx_r7.textareaPlaceholder)("inputMode", ctx_r7.inputMode)("autoFocus", ctx_r7.autoFocus);
  }
}
function MessageInputComponent_div_0_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "textarea", 27);
    ɵɵpipe(1, "translate");
  }
  if (rf & 2) {
    const ctx_r8 = ɵɵnextContext(2);
    ɵɵproperty("value", ɵɵpipeBind1(1, 1, ctx_r8.disabledTextareaText));
  }
}
function MessageInputComponent_div_0_ng_container_13_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageInputComponent_div_0_ng_container_13_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r34 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 29)(1, "div", 30);
    ɵɵtext(2);
    ɵɵpipe(3, "translate");
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 31)(5, "label")(6, "input", 32, 33);
    ɵɵlistener("change", function MessageInputComponent_div_0_ng_container_13_ng_template_2_Template_input_change_6_listener() {
      ɵɵrestoreView(_r34);
      const _r32 = ɵɵreference(7);
      const ctx_r33 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r33.filesSelected(_r32.files));
    });
    ɵɵelementEnd();
    ɵɵelementStart(8, "span", 34);
    ɵɵelement(9, "stream-icon-placeholder", 35);
    ɵɵelementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r30 = ɵɵnextContext(3);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(3, 2, "streamChat.Attach files"), " ");
    ɵɵadvance(4);
    ɵɵproperty("multiple", ctx_r30.isMultipleFileUploadEnabled);
  }
}
function MessageInputComponent_div_0_ng_container_13_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageInputComponent_div_0_ng_container_13_ng_container_1_Template, 1, 0, "ng-container", 5)(2, MessageInputComponent_div_0_ng_container_13_ng_template_2_Template, 10, 4, "ng-template", null, 28, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const _r31 = ɵɵreference(3);
    const ctx_r10 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r10.customAttachmentUploadTemplate || _r31)("ngTemplateOutletContext", ctx_r10.getAttachmentUploadContext());
  }
}
function MessageInputComponent_div_0_button_14_Template(rf, ctx) {
  if (rf & 1) {
    const _r36 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 36);
    ɵɵlistener("click", function MessageInputComponent_div_0_button_14_Template_button_click_0_listener() {
      ɵɵrestoreView(_r36);
      const ctx_r35 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r35.messageSent());
    })("keyup.enter", function MessageInputComponent_div_0_button_14_Template_button_keyup_enter_0_listener() {
      ɵɵrestoreView(_r36);
      const ctx_r37 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r37.messageSent());
    });
    ɵɵelement(1, "stream-icon-placeholder", 37);
    ɵɵelementEnd();
  }
}
function MessageInputComponent_div_0_div_15_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 38)(1, "div", 39);
    ɵɵtext(2);
    ɵɵpipe(3, "async");
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r12 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(3, 1, ctx_r12.cooldown$), " ");
  }
}
function MessageInputComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵpipe(1, "async");
    ɵɵtemplate(2, MessageInputComponent_div_0_div_2_Template, 12, 9, "div", 2);
    ɵɵelementStart(3, "div", 3)(4, "div");
    ɵɵtemplate(5, MessageInputComponent_div_0_ng_template_5_Template, 1, 1, "ng-template", null, 4, ɵɵtemplateRefExtractor)(7, MessageInputComponent_div_0_ng_container_7_Template, 1, 0, "ng-container", 5);
    ɵɵelementStart(8, "div", 6);
    ɵɵtemplate(9, MessageInputComponent_div_0_ng_container_9_Template, 3, 2, "ng-container", 7)(10, MessageInputComponent_div_0_ng_container_10_Template, 2, 7, "ng-container", 8)(11, MessageInputComponent_div_0_ng_template_11_Template, 2, 3, "ng-template", null, 9, ɵɵtemplateRefExtractor);
    ɵɵelementEnd();
    ɵɵtemplate(13, MessageInputComponent_div_0_ng_container_13_Template, 4, 2, "ng-container", 10);
    ɵɵelementEnd();
    ɵɵtemplate(14, MessageInputComponent_div_0_button_14_Template, 2, 0, "button", 11)(15, MessageInputComponent_div_0_div_15_Template, 4, 3, "div", 12);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const _r4 = ɵɵreference(6);
    const _r9 = ɵɵreference(12);
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassMap(ctx_r0.mode === "main" ? "str-chat__input-flat" : "str-chat__small-message-input");
    ɵɵclassProp("str-chat__input-flat-has-attachments", ɵɵpipeBind1(1, 19, ctx_r0.attachmentUploads$).length > 0)("str-chat__input-flat-quoted", !!ctx_r0.quotedMessage);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r0.quotedMessage);
    ɵɵadvance(2);
    ɵɵclassMap(ctx_r0.mode === "main" ? "str-chat__input-flat--textarea-wrapper" : "str-chat__small-message-input--textarea-wrapper");
    ɵɵadvance(3);
    ɵɵproperty("ngTemplateOutlet", ctx_r0.attachmentPreviewListTemplate || _r4)("ngTemplateOutletContext", ctx_r0.getAttachmentPreviewListContext());
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r0.emojiPickerTemplate);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.canSendMessages)("ngIfElse", _r9);
    ɵɵadvance(3);
    ɵɵproperty("ngIf", ctx_r0.isFileUploadEnabled && ctx_r0.isFileUploadAuthorized && ctx_r0.canSendMessages);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.canSendMessages && !ctx_r0.isCooldownInProgress);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.isCooldownInProgress);
  }
}
function MessageInputComponent_div_1_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r43 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 43)(1, "div", 44);
    ɵɵtext(2);
    ɵɵpipe(3, "translate");
    ɵɵelementEnd();
    ɵɵelementStart(4, "button", 45);
    ɵɵlistener("click", function MessageInputComponent_div_1_div_1_Template_button_click_4_listener() {
      ɵɵrestoreView(_r43);
      const ctx_r42 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r42.deselectMessageToQuote());
    })("keyup.enter", function MessageInputComponent_div_1_div_1_Template_button_keyup_enter_4_listener() {
      ɵɵrestoreView(_r43);
      const ctx_r44 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r44.deselectMessageToQuote());
    });
    ɵɵelement(5, "stream-icon-placeholder", 46);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(3, 1, "streamChat.Reply to Message"), " ");
  }
}
function MessageInputComponent_div_1_ng_container_2_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageInputComponent_div_1_ng_container_2_ng_container_2_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r58 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 55)(1, "input", 56, 33);
    ɵɵlistener("change", function MessageInputComponent_div_1_ng_container_2_ng_container_2_ng_template_2_Template_input_change_1_listener() {
      ɵɵrestoreView(_r58);
      const _r56 = ɵɵreference(2);
      const ctx_r57 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r57.filesSelected(_r56.files));
    });
    ɵɵelementEnd();
    ɵɵelementStart(3, "label", 57);
    ɵɵelement(4, "stream-icon-placeholder", 58);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r54 = ɵɵnextContext(4);
    ɵɵadvance(1);
    ɵɵpropertyInterpolate("id", ctx_r54.fileInputId);
    ɵɵproperty("multiple", ctx_r54.isMultipleFileUploadEnabled);
    ɵɵadvance(2);
    ɵɵpropertyInterpolate("for", ctx_r54.fileInputId);
  }
}
function MessageInputComponent_div_1_ng_container_2_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageInputComponent_div_1_ng_container_2_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 5)(2, MessageInputComponent_div_1_ng_container_2_ng_container_2_ng_template_2_Template, 5, 3, "ng-template", null, 28, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const _r55 = ɵɵreference(3);
    const ctx_r45 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r45.customAttachmentUploadTemplate || _r55)("ngTemplateOutletContext", ctx_r45.getAttachmentUploadContext());
  }
}
function MessageInputComponent_div_1_ng_container_2_div_4_stream_attachment_list_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-attachment-list", 22);
  }
  if (rf & 2) {
    const ctx_r59 = ɵɵnextContext(4);
    ɵɵproperty("attachments", ctx_r59.quotedMessageAttachments)("messageId", ctx_r59.quotedMessage == null ? null : ctx_r59.quotedMessage.id);
  }
}
function MessageInputComponent_div_1_ng_container_2_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 59);
    ɵɵelement(1, "stream-avatar-placeholder", 60);
    ɵɵelementStart(2, "div", 61);
    ɵɵtemplate(3, MessageInputComponent_div_1_ng_container_2_div_4_stream_attachment_list_3_Template, 1, 2, "stream-attachment-list", 20);
    ɵɵelement(4, "div", 62);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r46 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("imageUrl", ctx_r46.quotedMessage == null ? null : ctx_r46.quotedMessage.user == null ? null : ctx_r46.quotedMessage.user.image)("name", (ctx_r46.quotedMessage == null ? null : ctx_r46.quotedMessage.user == null ? null : ctx_r46.quotedMessage.user.name) || (ctx_r46.quotedMessage == null ? null : ctx_r46.quotedMessage.user == null ? null : ctx_r46.quotedMessage.user.id))("size", 20)("user", (ctx_r46.quotedMessage == null ? null : ctx_r46.quotedMessage.user) || void 0);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", (ctx_r46.quotedMessage == null ? null : ctx_r46.quotedMessage.attachments) && (ctx_r46.quotedMessage == null ? null : ctx_r46.quotedMessage.attachments == null ? null : ctx_r46.quotedMessage.attachments.length));
    ɵɵadvance(1);
    ɵɵproperty("innerHTML", (ctx_r46.quotedMessage == null ? null : ctx_r46.quotedMessage.translation) || (ctx_r46.quotedMessage == null ? null : ctx_r46.quotedMessage.html) || (ctx_r46.quotedMessage == null ? null : ctx_r46.quotedMessage.text), ɵɵsanitizeHtml);
  }
}
function MessageInputComponent_div_1_ng_container_2_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r64 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "stream-attachment-preview-list", 63);
    ɵɵlistener("retryAttachmentUpload", function MessageInputComponent_div_1_ng_container_2_ng_template_5_Template_stream_attachment_preview_list_retryAttachmentUpload_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r64);
      const retryUploadHandler_r61 = restoredCtx.retryUploadHandler;
      return ɵɵresetView(retryUploadHandler_r61($event));
    })("deleteAttachment", function MessageInputComponent_div_1_ng_container_2_ng_template_5_Template_stream_attachment_preview_list_deleteAttachment_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r64);
      const deleteUploadHandler_r62 = restoredCtx.deleteUploadHandler;
      return ɵɵresetView(deleteUploadHandler_r62($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const attachmentUploads$_r60 = ctx.attachmentUploads$;
    ɵɵproperty("attachmentUploads$", attachmentUploads$_r60);
  }
}
function MessageInputComponent_div_1_ng_container_2_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageInputComponent_div_1_ng_container_2_ng_container_11_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageInputComponent_div_1_ng_container_2_ng_container_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0, 24);
    ɵɵtemplate(1, MessageInputComponent_div_1_ng_container_2_ng_container_11_ng_container_1_Template, 1, 0, "ng-container", 5);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r50 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r50.emojiPickerTemplate)("ngTemplateOutletContext", ctx_r50.getEmojiPickerContext());
  }
}
function MessageInputComponent_div_1_ng_container_2_button_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r68 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 64);
    ɵɵlistener("click", function MessageInputComponent_div_1_ng_container_2_button_12_Template_button_click_0_listener() {
      ɵɵrestoreView(_r68);
      const ctx_r67 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r67.messageSent());
    })("keyup.enter", function MessageInputComponent_div_1_ng_container_2_button_12_Template_button_keyup_enter_0_listener() {
      ɵɵrestoreView(_r68);
      const ctx_r69 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r69.messageSent());
    });
    ɵɵpipe(1, "async");
    ɵɵpipe(2, "async");
    ɵɵelement(3, "stream-icon-placeholder", 65);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r51 = ɵɵnextContext(3);
    ɵɵproperty("disabled", ɵɵpipeBind1(1, 1, ctx_r51.attachmentUploadInProgressCounter$) > 0 || !ctx_r51.textareaValue && ɵɵpipeBind1(2, 3, ctx_r51.attachmentUploads$).length === 0);
  }
}
function MessageInputComponent_div_1_ng_container_2_div_13_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 66);
    ɵɵtext(1);
    ɵɵpipe(2, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r52 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(2, 1, ctx_r52.cooldown$), " ");
  }
}
function MessageInputComponent_div_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r71 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "div", 47);
    ɵɵtemplate(2, MessageInputComponent_div_1_ng_container_2_ng_container_2_Template, 4, 2, "ng-container", 10);
    ɵɵelementStart(3, "div", 48);
    ɵɵtemplate(4, MessageInputComponent_div_1_ng_container_2_div_4_Template, 5, 6, "div", 49)(5, MessageInputComponent_div_1_ng_container_2_ng_template_5_Template, 1, 1, "ng-template", null, 4, ɵɵtemplateRefExtractor)(7, MessageInputComponent_div_1_ng_container_2_ng_container_7_Template, 1, 0, "ng-container", 5);
    ɵɵelementStart(8, "div", 50);
    ɵɵelementContainerStart(9, 51);
    ɵɵlistener("valueChange", function MessageInputComponent_div_1_ng_container_2_Template_ng_container_valueChange_9_listener($event) {
      ɵɵrestoreView(_r71);
      const ctx_r70 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r70.textareaValue = $event);
    })("valueChange", function MessageInputComponent_div_1_ng_container_2_Template_ng_container_valueChange_9_listener() {
      ɵɵrestoreView(_r71);
      const ctx_r72 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r72.typingStart$.next());
    })("send", function MessageInputComponent_div_1_ng_container_2_Template_ng_container_send_9_listener() {
      ɵɵrestoreView(_r71);
      const ctx_r73 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r73.messageSent());
    })("userMentions", function MessageInputComponent_div_1_ng_container_2_Template_ng_container_userMentions_9_listener($event) {
      ɵɵrestoreView(_r71);
      const ctx_r74 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r74.mentionedUsers = $event);
    });
    ɵɵelementContainerEnd();
    ɵɵelementStart(10, "div", 52);
    ɵɵtemplate(11, MessageInputComponent_div_1_ng_container_2_ng_container_11_Template, 2, 2, "ng-container", 7);
    ɵɵelementEnd()()();
    ɵɵtemplate(12, MessageInputComponent_div_1_ng_container_2_button_12_Template, 4, 5, "button", 53)(13, MessageInputComponent_div_1_ng_container_2_div_13_Template, 3, 3, "div", 54);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const _r48 = ɵɵreference(6);
    const ctx_r39 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r39.isFileUploadEnabled && ctx_r39.isFileUploadAuthorized && ctx_r39.canSendMessages);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r39.quotedMessage);
    ɵɵadvance(3);
    ɵɵproperty("ngTemplateOutlet", ctx_r39.attachmentPreviewListTemplate || _r48)("ngTemplateOutletContext", ctx_r39.getAttachmentPreviewListContext());
    ɵɵadvance(2);
    ɵɵproperty("value", ctx_r39.textareaValue)("componentRef", ctx_r39.textareaRef)("areMentionsEnabled", ctx_r39.areMentionsEnabled)("mentionScope", ctx_r39.mentionScope)("inputMode", ctx_r39.inputMode)("autoFocus", ctx_r39.autoFocus)("placeholder", ctx_r39.textareaPlaceholder);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r39.emojiPickerTemplate);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r39.canSendMessages && !ctx_r39.isCooldownInProgress && !ctx_r39.message);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r39.isCooldownInProgress);
  }
}
function MessageInputComponent_div_1_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 67);
    ɵɵtext(1);
    ɵɵpipe(2, "translate");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r40 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(2, 1, ctx_r40.disabledTextareaText), " ");
  }
}
function MessageInputComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 40);
    ɵɵtemplate(1, MessageInputComponent_div_1_div_1_Template, 6, 3, "div", 41)(2, MessageInputComponent_div_1_ng_container_2_Template, 14, 14, "ng-container", 8)(3, MessageInputComponent_div_1_ng_template_3_Template, 3, 3, "ng-template", null, 42, ɵɵtemplateRefExtractor);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const _r41 = ɵɵreference(4);
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.quotedMessage);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.canSendMessages)("ngIfElse", _r41);
  }
}
function NotificationComponent_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function NotificationComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NotificationComponent_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 3);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r0.content);
  }
}
function NotificationComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0);
  }
}
function NotificationListComponent_ng_container_2_ng_template_1_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 7);
    ɵɵtext(1);
    ɵɵpipe(2, "translate");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const notification_r3 = ɵɵnextContext(2).$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind2(2, 1, notification_r3.text, notification_r3.translateParams), " ");
  }
}
function NotificationListComponent_ng_container_2_ng_template_1_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function NotificationListComponent_ng_container_2_ng_template_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NotificationListComponent_ng_container_2_ng_template_1_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 4);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const notification_r3 = ɵɵnextContext(2).$implicit;
    const ctx_r8 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", notification_r3.template)("ngTemplateOutletContext", ctx_r8.getNotificationContentContext(notification_r3));
  }
}
function NotificationListComponent_ng_container_2_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, NotificationListComponent_ng_container_2_ng_template_1_div_0_Template, 3, 4, "div", 5)(1, NotificationListComponent_ng_container_2_ng_template_1_ng_container_1_Template, 2, 2, "ng-container", 6);
  }
  if (rf & 2) {
    const notification_r3 = ɵɵnextContext().$implicit;
    ɵɵproperty("ngIf", notification_r3.text !== void 0);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", notification_r3.template !== void 0);
  }
}
function NotificationListComponent_ng_container_2_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c132 = (a0, a1) => ({
  type: a0,
  content: a1
});
function NotificationListComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NotificationListComponent_ng_container_2_ng_template_1_Template, 2, 2, "ng-template", null, 3, ɵɵtemplateRefExtractor)(3, NotificationListComponent_ng_container_2_ng_container_3_Template, 1, 0, "ng-container", 4);
    ɵɵpipe(4, "async");
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const notification_r3 = ctx.$implicit;
    const _r5 = ɵɵreference(2);
    const ctx_r0 = ɵɵnextContext();
    const _r2 = ɵɵreference(5);
    ɵɵadvance(3);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(4, 2, ctx_r0.customTemplatesService.notificationTemplate$) || _r2)("ngTemplateOutletContext", ɵɵpureFunction2(4, _c132, notification_r3.type, _r5));
  }
}
function NotificationListComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-notification", 8);
  }
  if (rf & 2) {
    const type_r13 = ctx.type;
    const content_r14 = ctx.content;
    ɵɵproperty("type", type_r13)("content", content_r14);
  }
}
function MessageActionsBoxComponent_ng_container_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageActionsBoxComponent_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageActionsBoxComponent_ng_container_3_ng_container_1_Template, 1, 0, "ng-container", 5);
    ɵɵpipe(2, "async");
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const item_r9 = ctx.$implicit;
    const ctx_r1 = ɵɵnextContext();
    const _r3 = ɵɵreference(5);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(2, 2, ctx_r1.customTemplatesService.messageActionsBoxItemTemplate$) || _r3)("ngTemplateOutletContext", ctx_r1.getMessageActionTemplateContext(item_r9));
  }
}
function MessageActionsBoxComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 8);
    ɵɵlistener("click", function MessageActionsBoxComponent_ng_template_4_Template_button_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r15);
      const actionHandler_r12 = restoredCtx.actionHandler;
      const ctx_r14 = ɵɵnextContext();
      return ɵɵresetView(actionHandler_r12(ctx_r14.message, ctx_r14.isMine));
    });
    ɵɵelementStart(1, "li", 9);
    ɵɵtext(2);
    ɵɵpipe(3, "translate");
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const actionName_r11 = ctx.actionName;
    const actionLabelOrTranslationKey_r13 = ctx.actionLabelOrTranslationKey;
    const ctx_r2 = ɵɵnextContext();
    ɵɵattribute("data-testid", actionName_r11 + "-action");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(3, 2, ctx_r2.getActionLabel(actionLabelOrTranslationKey_r13)), " ");
  }
}
function MessageActionsBoxComponent_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageActionsBoxComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r20 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "stream-modal", 10);
    ɵɵlistener("isOpenChange", function MessageActionsBoxComponent_ng_template_8_Template_stream_modal_isOpenChange_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r20);
      const isOpenChangeHandler_r17 = restoredCtx.isOpenChangeHandler;
      return ɵɵresetView(isOpenChangeHandler_r17($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const isOpen_r16 = ctx.isOpen;
    const content_r18 = ctx.content;
    ɵɵproperty("isOpen", isOpen_r16)("content", content_r18);
  }
}
function MessageActionsBoxComponent_ng_template_10_div_0_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r29 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "stream-message-input", 18);
    ɵɵlistener("messageUpdate", function MessageActionsBoxComponent_ng_template_10_div_0_ng_template_1_Template_stream_message_input_messageUpdate_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r29);
      const messageUpdateHandler_r26 = restoredCtx.messageUpdateHandler;
      return ɵɵresetView(messageUpdateHandler_r26());
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const messageInput_r25 = ctx.message;
    const sendMessage$Input_r27 = ctx.sendMessage$;
    ɵɵproperty("message", messageInput_r25)("sendMessage$", sendMessage$Input_r27);
  }
}
function MessageActionsBoxComponent_ng_template_10_div_0_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageActionsBoxComponent_ng_template_10_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r31 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 12);
    ɵɵtemplate(1, MessageActionsBoxComponent_ng_template_10_div_0_ng_template_1_Template, 1, 2, "ng-template", null, 13, ɵɵtemplateRefExtractor)(3, MessageActionsBoxComponent_ng_template_10_div_0_ng_container_3_Template, 1, 0, "ng-container", 5);
    ɵɵpipe(4, "async");
    ɵɵelement(5, "stream-notification-list");
    ɵɵelementStart(6, "div", 14)(7, "div", 15)(8, "button", 16);
    ɵɵlistener("click", function MessageActionsBoxComponent_ng_template_10_div_0_Template_button_click_8_listener() {
      ɵɵrestoreView(_r31);
      const ctx_r30 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r30.modalClosed());
    });
    ɵɵtext(9, " streamChat.Cancel ");
    ɵɵelementEnd();
    ɵɵelementStart(10, "button", 17);
    ɵɵlistener("click", function MessageActionsBoxComponent_ng_template_10_div_0_Template_button_click_10_listener() {
      ɵɵrestoreView(_r31);
      const ctx_r32 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r32.sendClicked());
    })("keyup.enter", function MessageActionsBoxComponent_ng_template_10_div_0_Template_button_keyup_enter_10_listener() {
      ɵɵrestoreView(_r31);
      const ctx_r33 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r33.sendClicked());
    });
    ɵɵtext(11, " streamChat.Send ");
    ɵɵelementEnd()()()();
  }
  if (rf & 2) {
    const _r23 = ɵɵreference(2);
    const ctx_r21 = ɵɵnextContext(2);
    ɵɵadvance(3);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(4, 2, ctx_r21.customTemplatesService.messageInputTemplate$) || _r23)("ngTemplateOutletContext", ctx_r21.getMessageInputContext());
  }
}
function MessageActionsBoxComponent_ng_template_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageActionsBoxComponent_ng_template_10_div_0_Template, 12, 4, "div", 11);
  }
  if (rf & 2) {
    const ctx_r7 = ɵɵnextContext();
    ɵɵproperty("ngIf", ctx_r7.isEditModalOpen);
  }
}
function ChannelComponent_div_2_ng_content_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 1, ["*ngIf", "isActiveThread$ | async"]);
  }
}
function ChannelComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 2)(1, "div", 3);
    ɵɵprojection(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, ChannelComponent_div_2_ng_content_3_Template, 1, 0, "ng-content", 4);
    ɵɵpipe(4, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(3);
    ɵɵproperty("ngIf", ɵɵpipeBind1(4, 1, ctx_r0.isActiveThread$));
  }
}
function ChannelComponent_ng_template_6_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 7);
    ɵɵelement(1, "stream-icon", 8);
    ɵɵelementStart(2, "p", 9);
    ɵɵtext(3);
    ɵɵpipe(4, "translate");
    ɵɵelementEnd();
    ɵɵelementStart(5, "div", 10);
    ɵɵelement(6, "stream-notification-list");
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(4, 1, "streamChat.No chats here yet…"), " ");
  }
}
function ChannelComponent_ng_template_6_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 11)(1, "div", 12);
    ɵɵelement(2, "div", 13);
    ɵɵelementStart(3, "div", 14);
    ɵɵelement(4, "div", 15)(5, "div", 16);
    ɵɵelementEnd()();
    ɵɵelementStart(6, "div", 17)(7, "div", 18);
    ɵɵelement(8, "div", 19);
    ɵɵelementStart(9, "div", 20);
    ɵɵelement(10, "div", 21);
    ɵɵelementStart(11, "div", 22);
    ɵɵelement(12, "div", 23)(13, "div", 24);
    ɵɵelementEnd()()();
    ɵɵelementStart(14, "div", 18);
    ɵɵelement(15, "div", 19);
    ɵɵelementStart(16, "div", 20);
    ɵɵelement(17, "div", 21);
    ɵɵelementStart(18, "div", 22);
    ɵɵelement(19, "div", 23)(20, "div", 24);
    ɵɵelementEnd()()();
    ɵɵelementStart(21, "div", 18);
    ɵɵelement(22, "div", 19);
    ɵɵelementStart(23, "div", 20);
    ɵɵelement(24, "div", 21);
    ɵɵelementStart(25, "div", 22);
    ɵɵelement(26, "div", 23)(27, "div", 24);
    ɵɵelementEnd()()()();
    ɵɵelementStart(28, "div", 25);
    ɵɵelement(29, "div", 26)(30, "div", 27);
    ɵɵelementEnd()();
  }
}
function ChannelComponent_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, ChannelComponent_ng_template_6_div_0_Template, 7, 3, "div", 5);
    ɵɵpipe(1, "async");
    ɵɵpipe(2, "async");
    ɵɵpipe(3, "async");
    ɵɵtemplate(4, ChannelComponent_ng_template_6_div_4_Template, 31, 0, "div", 6);
    ɵɵpipe(5, "async");
    ɵɵpipe(6, "async");
    ɵɵpipe(7, "async");
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("ngIf", ɵɵpipeBind1(1, 2, ctx_r1.isInitializing$) === false && (ɵɵpipeBind1(2, 4, ctx_r1.isError$) === true || ɵɵpipeBind1(3, 6, ctx_r1.isActiveChannel$) === false));
    ɵɵadvance(4);
    ɵɵproperty("ngIf", ɵɵpipeBind1(5, 8, ctx_r1.isInitializing$) === true && ɵɵpipeBind1(6, 10, ctx_r1.isError$) === false && ɵɵpipeBind1(7, 12, ctx_r1.isActiveChannel$) === false);
  }
}
var _c14 = ["*", [["", "name", "thread"]]];
var _c15 = ["*", '[name="thread"]'];
function ChannelHeaderComponent_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function ChannelHeaderComponent_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "p", 9);
    ɵɵtext(1);
    ɵɵpipe(2, "translate");
    ɵɵpipe(3, "translate");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate2(" ", ɵɵpipeBind2(2, 2, "streamChat.{{ memberCount }} members", ctx_r1.memberCountParam), " ", ctx_r1.canReceiveConnectEvents ? ɵɵpipeBind2(3, 5, "streamChat.{{ watcherCount }} online", ctx_r1.watcherCountParam) : "", " ");
  }
}
function ChannelHeaderComponent_ng_container_11_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function ChannelHeaderComponent_ng_container_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, ChannelHeaderComponent_ng_container_11_ng_container_1_Template, 1, 0, "ng-container", 6);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r3.channelActionsTemplate)("ngTemplateOutletContext", ctx_r3.getChannelActionsContext());
  }
}
function ChannelPreviewComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 11);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r0.unreadCount, " ");
  }
}
function ChannelPreviewComponent_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵpipe(2, "translate");
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(2, 1, ctx_r1.latestMessage), " ");
  }
}
function ChannelPreviewComponent_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "span", 12);
    ɵɵpipe(1, "translate");
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("innerHTML", ɵɵpipeBind1(1, 1, ctx_r2.latestMessage), ɵɵsanitizeHtml);
  }
}
var _c16 = ["container"];
function ChannelListComponent_div_4_div_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 13);
    ɵɵelement(1, "stream-icon", 14);
    ɵɵelementStart(2, "p", 15);
    ɵɵtext(3);
    ɵɵpipe(4, "translate");
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(4, 1, "streamChat.You have no channels currently"), " ");
  }
}
function ChannelListComponent_div_4_p_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "p", 16);
    ɵɵtext(1);
    ɵɵpipe(2, "translate");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(2, 1, "streamChat.You have no channels currently"), " ");
  }
}
function ChannelListComponent_div_4_ng_container_7_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-channel-preview", 20);
  }
  if (rf & 2) {
    const channelInput_r18 = ctx.channel;
    ɵɵproperty("channel", channelInput_r18);
  }
}
function ChannelListComponent_div_4_ng_container_7_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c17 = (a0) => ({
  channel: a0
});
function ChannelListComponent_div_4_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r20 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, ChannelListComponent_div_4_ng_container_7_ng_template_1_Template, 1, 1, "ng-template", null, 17, ɵɵtemplateRefExtractor);
    ɵɵelementStart(3, "div", 18);
    ɵɵlistener("click", function ChannelListComponent_div_4_ng_container_7_Template_div_click_3_listener() {
      ɵɵrestoreView(_r20);
      const ctx_r19 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r19.channelSelected());
    })("keyup.enter", function ChannelListComponent_div_4_ng_container_7_Template_div_keyup_enter_3_listener() {
      ɵɵrestoreView(_r20);
      const ctx_r21 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r21.channelSelected());
    });
    ɵɵtemplate(4, ChannelListComponent_div_4_ng_container_7_ng_container_4_Template, 1, 0, "ng-container", 19);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const channel_r14 = ctx.$implicit;
    const _r16 = ɵɵreference(2);
    const ctx_r12 = ɵɵnextContext(2);
    ɵɵadvance(4);
    ɵɵproperty("ngTemplateOutlet", ctx_r12.customChannelPreviewTemplate || _r16)("ngTemplateOutletContext", ɵɵpureFunction1(2, _c17, channel_r14));
  }
}
function ChannelListComponent_div_4_div_9_span_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "translate");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind1(2, 1, "Load more"));
  }
}
function ChannelListComponent_div_4_div_9_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-loading-indicator-placeholder");
  }
}
function ChannelListComponent_div_4_div_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r26 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 21);
    ɵɵlistener("click", function ChannelListComponent_div_4_div_9_Template_div_click_0_listener() {
      ɵɵrestoreView(_r26);
      const ctx_r25 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r25.loadMoreChannels());
    })("keyup.enter", function ChannelListComponent_div_4_div_9_Template_div_keyup_enter_0_listener() {
      ɵɵrestoreView(_r26);
      const ctx_r27 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r27.loadMoreChannels());
    });
    ɵɵelementStart(1, "button", 22);
    ɵɵtemplate(2, ChannelListComponent_div_4_div_9_span_2_Template, 3, 3, "span", 23)(3, ChannelListComponent_div_4_div_9_ng_template_3_Template, 1, 0, "ng-template", null, 24, ɵɵtemplateRefExtractor);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const _r24 = ɵɵreference(4);
    const ctx_r13 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("disabled", ctx_r13.isLoadingMoreChannels);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r13.isLoadingMoreChannels)("ngIfElse", _r24);
  }
}
function ChannelListComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 7)(1, "div", 8);
    ɵɵprojection(2);
    ɵɵtemplate(3, ChannelListComponent_div_4_div_3_Template, 5, 3, "div", 9);
    ɵɵpipe(4, "async");
    ɵɵtemplate(5, ChannelListComponent_div_4_p_5_Template, 3, 3, "p", 10);
    ɵɵpipe(6, "async");
    ɵɵtemplate(7, ChannelListComponent_div_4_ng_container_7_Template, 5, 4, "ng-container", 11);
    ɵɵpipe(8, "async");
    ɵɵtemplate(9, ChannelListComponent_div_4_div_9_Template, 5, 3, "div", 12);
    ɵɵpipe(10, "async");
    ɵɵprojection(11, 1);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    let tmp_0_0;
    let tmp_1_0;
    ɵɵadvance(3);
    ɵɵproperty("ngIf", !((tmp_0_0 = ɵɵpipeBind1(4, 5, ctx_r1.channels$)) == null ? null : tmp_0_0.length));
    ɵɵadvance(2);
    ɵɵproperty("ngIf", !((tmp_1_0 = ɵɵpipeBind1(6, 7, ctx_r1.channels$)) == null ? null : tmp_1_0.length));
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ɵɵpipeBind1(8, 9, ctx_r1.channels$))("ngForTrackBy", ctx_r1.trackByChannelId);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ɵɵpipeBind1(10, 11, ctx_r1.hasMoreChannels$));
  }
}
function ChannelListComponent_ng_template_7_ng_container_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function ChannelListComponent_ng_template_7_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, ChannelListComponent_ng_template_7_ng_container_0_ng_container_1_Template, 1, 0, "ng-container", 26);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    ɵɵnextContext(2);
    const _r5 = ɵɵreference(10);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r5);
  }
}
function ChannelListComponent_ng_template_7_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function ChannelListComponent_ng_template_7_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, ChannelListComponent_ng_template_7_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 26);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    ɵɵnextContext(2);
    const _r7 = ɵɵreference(12);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r7);
  }
}
function ChannelListComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, ChannelListComponent_ng_template_7_ng_container_0_Template, 2, 1, "ng-container", 25);
    ɵɵpipe(1, "async");
    ɵɵtemplate(2, ChannelListComponent_ng_template_7_ng_container_2_Template, 2, 1, "ng-container", 25);
    ɵɵpipe(3, "async");
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("ngIf", ɵɵpipeBind1(1, 2, ctx_r2.isError$));
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ɵɵpipeBind1(3, 4, ctx_r2.isInitializing$));
  }
}
function ChannelListComponent_ng_template_9_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function ChannelListComponent_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 27);
    ɵɵtemplate(1, ChannelListComponent_ng_template_9_ng_container_1_Template, 1, 0, "ng-container", 26);
    ɵɵelementStart(2, "div", 28);
    ɵɵelement(3, "stream-icon-placeholder", 29);
    ɵɵelementStart(4, "h1");
    ɵɵtext(5);
    ɵɵpipe(6, "translate");
    ɵɵelementEnd();
    ɵɵelementStart(7, "h3");
    ɵɵtext(8);
    ɵɵpipe(9, "translate");
    ɵɵelementEnd()()();
  }
  if (rf & 2) {
    ɵɵnextContext();
    const _r7 = ɵɵreference(12);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r7);
    ɵɵadvance(4);
    ɵɵtextInterpolate(ɵɵpipeBind1(6, 3, "streamChat.Connection error"));
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(9, 5, "streamChat.Error connecting to chat, refresh the page to try again."), " ");
  }
}
function ChannelListComponent_ng_template_11_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function ChannelListComponent_ng_template_11_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function ChannelListComponent_ng_template_11_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function ChannelListComponent_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 30);
    ɵɵtemplate(1, ChannelListComponent_ng_template_11_ng_container_1_Template, 1, 0, "ng-container", 26)(2, ChannelListComponent_ng_template_11_ng_container_2_Template, 1, 0, "ng-container", 26)(3, ChannelListComponent_ng_template_11_ng_container_3_Template, 1, 0, "ng-container", 26);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    ɵɵnextContext();
    const _r9 = ɵɵreference(14);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r9);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r9);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r9);
  }
}
function ChannelListComponent_ng_template_13_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 31);
    ɵɵelement(1, "div", 32);
    ɵɵelementStart(2, "div", 33);
    ɵɵelement(3, "div", 34)(4, "div", 35);
    ɵɵelementEnd()();
  }
}
var _c18 = [[["", "channel-list-top", ""]], [["", "channel-list-bottom", ""]]];
var _c19 = ["[channel-list-top]", "[channel-list-bottom]"];
var _c20 = ["selectorContainer"];
var _c21 = ["selectorTooltip"];
var _c222 = (a0) => ({
  cursor: a0
});
function MessageReactionsComponent_div_0_li_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "li", 8);
    ɵɵlistener("click", function MessageReactionsComponent_div_0_li_2_Template_li_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r8);
      const reactionType_r6 = restoredCtx.$implicit;
      const ctx_r7 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r7.reactionSelected(reactionType_r6));
    })("keyup.enter", function MessageReactionsComponent_div_0_li_2_Template_li_keyup_enter_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r8);
      const reactionType_r6 = restoredCtx.$implicit;
      const ctx_r9 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r9.reactionSelected(reactionType_r6));
    });
    ɵɵelementStart(1, "span", 9);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "span", 10);
    ɵɵtext(4);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const reactionType_r6 = ctx.$implicit;
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵclassProp("str-chat__message-reaction-own", ctx_r5.isOwnReaction(reactionType_r6));
    ɵɵproperty("ngStyle", ɵɵpureFunction1(5, _c222, ctx_r5.shouldHandleReactionClick ? "pointer" : "default"));
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r5.getEmojiByReaction(reactionType_r6), "  ");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r5.messageReactionCounts[reactionType_r6], " ");
  }
}
function MessageReactionsComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 4)(1, "ul", 5);
    ɵɵtemplate(2, MessageReactionsComponent_div_0_li_2_Template, 5, 7, "li", 6);
    ɵɵelementStart(3, "li")(4, "span", 7);
    ɵɵtext(5);
    ɵɵelementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("str-chat__reaction-list--reverse", true)("str-chat__reaction-list-hidden", ctx_r0.isSelectorOpen);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r0.existingReactions)("ngForTrackBy", ctx_r0.trackByMessageReaction);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r0.reactionsCount);
  }
}
var _c23 = (a0, a1) => ({
  left: a0,
  visibility: a1
});
var _c24 = (a0) => ({
  left: a0
});
function MessageReactionsComponent_div_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 16, 17);
    ɵɵelement(2, "div", 18);
    ɵɵelementStart(3, "span", 19);
    ɵɵtext(4);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r11 = ɵɵnextContext(2);
    ɵɵproperty("ngStyle", ɵɵpureFunction2(3, _c23, (ctx_r11.tooltipPositions == null ? null : ctx_r11.tooltipPositions.tooltip) + "px", ctx_r11.tooltipPositions ? "visible" : "hidden"));
    ɵɵadvance(2);
    ɵɵproperty("ngStyle", ɵɵpureFunction1(6, _c24, (ctx_r11.tooltipPositions == null ? null : ctx_r11.tooltipPositions.arrow) + "px"));
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r11.tooltipText, " ");
  }
}
function MessageReactionsComponent_div_1_li_4_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r19 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 24);
    ɵɵlistener("click", function MessageReactionsComponent_div_1_li_4_div_1_Template_div_click_0_listener() {
      ɵɵrestoreView(_r19);
      const ctx_r18 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r18.hideTooltip());
    })("keyup.enter", function MessageReactionsComponent_div_1_li_4_div_1_Template_div_keyup_enter_0_listener() {
      ɵɵrestoreView(_r19);
      const ctx_r20 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r20.hideTooltip());
    })("mouseenter", function MessageReactionsComponent_div_1_li_4_div_1_Template_div_mouseenter_0_listener($event) {
      ɵɵrestoreView(_r19);
      const reactionType_r14 = ɵɵnextContext().$implicit;
      const ctx_r21 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r21.showTooltip($event, reactionType_r14));
    })("mouseleave", function MessageReactionsComponent_div_1_li_4_div_1_Template_div_mouseleave_0_listener() {
      ɵɵrestoreView(_r19);
      const ctx_r23 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r23.hideTooltip());
    });
    ɵɵelement(1, "stream-avatar-placeholder", 25);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const user_r17 = ctx.ngIf;
    const reactionType_r14 = ɵɵnextContext().$implicit;
    ɵɵattributeInterpolate1("data-testid", "", reactionType_r14, "-last-user");
    ɵɵadvance(1);
    ɵɵattributeInterpolate1("data-testid", "", reactionType_r14, "-avatar");
    ɵɵproperty("imageUrl", user_r17.image)("name", user_r17.name || user_r17.id)("size", 20);
  }
}
function MessageReactionsComponent_div_1_li_4_span_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 26);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const reactionType_r14 = ɵɵnextContext().$implicit;
    const ctx_r16 = ɵɵnextContext(2);
    ɵɵattributeInterpolate1("data-testid", "", reactionType_r14, "-reaction-count");
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r16.messageReactionCounts[reactionType_r14], " ");
  }
}
function MessageReactionsComponent_div_1_li_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r27 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "li", 20);
    ɵɵlistener("click", function MessageReactionsComponent_div_1_li_4_Template_li_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r27);
      const reactionType_r14 = restoredCtx.$implicit;
      const ctx_r26 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r26.react(reactionType_r14));
    })("keyup.enter", function MessageReactionsComponent_div_1_li_4_Template_li_keyup_enter_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r27);
      const reactionType_r14 = restoredCtx.$implicit;
      const ctx_r28 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r28.react(reactionType_r14));
    });
    ɵɵtemplate(1, MessageReactionsComponent_div_1_li_4_div_1_Template, 2, 5, "div", 21);
    ɵɵelementStart(2, "span", 22);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵtemplate(4, MessageReactionsComponent_div_1_li_4_span_4_Template, 2, 2, "span", 23);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const reactionType_r14 = ctx.$implicit;
    const ctx_r12 = ɵɵnextContext(2);
    ɵɵclassProp("str-chat__message-reactions-option-selected", ctx_r12.isOwnReaction(reactionType_r14));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r12.getLatestUserByReaction(reactionType_r14));
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r12.getEmojiByReaction(reactionType_r14), " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r12.messageReactionCounts[reactionType_r14] && ctx_r12.messageReactionCounts[reactionType_r14] > 0);
  }
}
function MessageReactionsComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 11, 12);
    ɵɵtemplate(2, MessageReactionsComponent_div_1_div_2_Template, 5, 8, "div", 13);
    ɵɵelementStart(3, "ul", 14);
    ɵɵtemplate(4, MessageReactionsComponent_div_1_li_4_Template, 5, 5, "li", 15);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r1.tooltipText);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r1.reactionOptions)("ngForTrackBy", ctx_r1.trackByMessageReaction);
  }
}
function MessageReactionsComponent_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c25 = (a0, a1, a2, a3) => ({
  isOpen: a0,
  messageId: a1,
  reactionType: a2,
  isOpenChangeHandler: a3
});
function MessageReactionsComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageReactionsComponent_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 27);
    ɵɵpipe(2, "async");
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    const _r4 = ɵɵreference(4);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(2, 2, ctx_r2.customTemplatesService.modalTemplate$) || _r4)("ngTemplateOutletContext", ɵɵpureFunction4(4, _c25, !!ctx_r2.selectedReactionType, ctx_r2.messageId, ctx_r2.selectedReactionType, ctx_r2.isOpenChange));
  }
}
function MessageReactionsComponent_ng_template_3_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r41 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 37);
    ɵɵlistener("click", function MessageReactionsComponent_ng_template_3_div_3_Template_div_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r41);
      const reactionType_r39 = restoredCtx.$implicit;
      ɵɵnextContext();
      const _r35 = ɵɵreference(7);
      const ctx_r40 = ɵɵnextContext();
      ctx_r40.selectedReactionType = reactionType_r39;
      return ɵɵresetView(_r35.scrollTop = 0);
    })("keyup.enter", function MessageReactionsComponent_ng_template_3_div_3_Template_div_keyup_enter_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r41);
      const reactionType_r39 = restoredCtx.$implicit;
      ɵɵnextContext();
      const _r35 = ɵɵreference(7);
      const ctx_r42 = ɵɵnextContext();
      ctx_r42.selectedReactionType = reactionType_r39;
      return ɵɵresetView(_r35.scrollTop = 0);
    });
    ɵɵelementStart(1, "span", 9);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "span", 38);
    ɵɵtext(4);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const reactionType_r39 = ctx.$implicit;
    const ctx_r34 = ɵɵnextContext(2);
    ɵɵclassProp("str-chat__message-reactions-details-reaction-type--selected", reactionType_r39 === ctx_r34.selectedReactionType);
    ɵɵattributeInterpolate1("data-testid", "reaction-details-selector-", reactionType_r39, "");
    ɵɵproperty("ngStyle", ɵɵpureFunction1(6, _c222, ctx_r34.shouldHandleReactionClick ? "pointer" : "default"));
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r34.getEmojiByReaction(reactionType_r39), "  ");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r34.messageReactionCounts[reactionType_r39], " ");
  }
}
function MessageReactionsComponent_ng_template_3_stream_loading_indicator_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-loading-indicator");
  }
}
function MessageReactionsComponent_ng_template_3_ng_template_9_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 40);
    ɵɵelement(1, "stream-avatar-placeholder", 41);
    ɵɵelementStart(2, "span", 42);
    ɵɵtext(3);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const user_r44 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("size", 30)("imageUrl", user_r44.image)("name", user_r44.name)("user", user_r44);
    ɵɵadvance(2);
    ɵɵtextInterpolate(user_r44.name);
  }
}
function MessageReactionsComponent_ng_template_3_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageReactionsComponent_ng_template_3_ng_template_9_div_0_Template, 4, 5, "div", 39);
  }
  if (rf & 2) {
    const ctx_r37 = ɵɵnextContext(2);
    ɵɵproperty("ngForOf", ctx_r37.getAllUsersByReaction(ctx_r37.selectedReactionType))("ngForTrackBy", ctx_r37.trackByUserId);
  }
}
function MessageReactionsComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r46 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "stream-modal", 28);
    ɵɵlistener("isOpenChange", function MessageReactionsComponent_ng_template_3_Template_stream_modal_isOpenChange_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r46);
      const isOpenChangeHandler_r33 = restoredCtx.isOpenChangeHandler;
      return ɵɵresetView(isOpenChangeHandler_r33($event));
    });
    ɵɵelementStart(1, "div", 29)(2, "div", 30);
    ɵɵtemplate(3, MessageReactionsComponent_ng_template_3_div_3_Template, 5, 8, "div", 31);
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 32);
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementStart(6, "div", 33, 34);
    ɵɵtemplate(8, MessageReactionsComponent_ng_template_3_stream_loading_indicator_8_Template, 1, 0, "stream-loading-indicator", 35)(9, MessageReactionsComponent_ng_template_3_ng_template_9_Template, 1, 2, "ng-template", null, 36, ɵɵtemplateRefExtractor);
    ɵɵelementEnd()()();
  }
  if (rf & 2) {
    const isOpen_r30 = ctx.isOpen;
    const _r38 = ɵɵreference(10);
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("isOpen", isOpen_r30);
    ɵɵadvance(3);
    ɵɵproperty("ngForOf", ctx_r3.existingReactions)("ngForTrackBy", ctx_r3.trackByMessageReaction);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r3.getEmojiByReaction(ctx_r3.selectedReactionType), " ");
    ɵɵadvance(3);
    ɵɵproperty("ngIf", ctx_r3.isLoading)("ngIfElse", _r38);
  }
}
function MessageComponent_ng_container_2_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_container_2_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_container_2_ng_container_1_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 20);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    ɵɵnextContext(3);
    const _r11 = ɵɵreference(12);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r11);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_4_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r46 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "stream-message-actions-box", 29);
    ɵɵlistener("displayedActionsCount", function MessageComponent_ng_container_2_ng_container_1_div_4_ng_template_5_Template_stream_message_actions_box_displayedActionsCount_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r46);
      const displayedActionsCountChangeHandler_r42 = restoredCtx.displayedActionsCountChangeHandler;
      return ɵɵresetView(displayedActionsCountChangeHandler_r42($event));
    })("isEditing", function MessageComponent_ng_container_2_ng_container_1_div_4_ng_template_5_Template_stream_message_actions_box_isEditing_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r46);
      const isEditingChangeHandler_r43 = restoredCtx.isEditingChangeHandler;
      return ɵɵresetView(isEditingChangeHandler_r43($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const isOpen_r38 = ctx.isOpen;
    const isMine_r39 = ctx.isMine;
    const enabledActions_r40 = ctx.enabledActions;
    const messageInput_r41 = ctx.message;
    const customActions_r44 = ctx.customActions;
    ɵɵproperty("isOpen", isOpen_r38)("isMine", isMine_r39)("enabledActions", enabledActions_r40)("message", messageInput_r41)("customActions", customActions_r44);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_4_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_4_div_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r49 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 30);
    ɵɵlistener("click", function MessageComponent_ng_container_2_ng_container_1_div_4_div_9_Template_div_click_0_listener() {
      ɵɵrestoreView(_r49);
      const ctx_r48 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r48.isActionBoxOpen = !ctx_r48.isActionBoxOpen);
    })("keyup.enter", function MessageComponent_ng_container_2_ng_container_1_div_4_div_9_Template_div_keyup_enter_0_listener() {
      ɵɵrestoreView(_r49);
      const ctx_r50 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r50.isActionBoxOpen = !ctx_r50.isActionBoxOpen);
    });
    ɵɵelement(1, "stream-icon-placeholder", 31);
    ɵɵelementEnd();
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_4_div_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r52 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 32);
    ɵɵlistener("click", function MessageComponent_ng_container_2_ng_container_1_div_4_div_10_Template_div_click_0_listener() {
      ɵɵrestoreView(_r52);
      const ctx_r51 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r51.setAsActiveParentMessage());
    })("keyup.enter", function MessageComponent_ng_container_2_ng_container_1_div_4_div_10_Template_div_keyup_enter_0_listener() {
      ɵɵrestoreView(_r52);
      const ctx_r53 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r53.setAsActiveParentMessage());
    });
    ɵɵelement(1, "stream-icon-placeholder", 33);
    ɵɵelementEnd();
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_4_div_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r55 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 34);
    ɵɵlistener("click", function MessageComponent_ng_container_2_ng_container_1_div_4_div_11_Template_div_click_0_listener() {
      ɵɵrestoreView(_r55);
      const ctx_r54 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r54.isReactionSelectorOpen = !ctx_r54.isReactionSelectorOpen);
    })("keyup.enter", function MessageComponent_ng_container_2_ng_container_1_div_4_div_11_Template_div_keyup_enter_0_listener() {
      ɵɵrestoreView(_r55);
      const ctx_r56 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r56.isReactionSelectorOpen = !ctx_r56.isReactionSelectorOpen);
    });
    ɵɵelement(1, "stream-icon-placeholder", 35);
    ɵɵelementEnd();
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 21)(1, "div", 22, 23)(3, "popper-content", null, 24);
    ɵɵtemplate(5, MessageComponent_ng_container_2_ng_container_1_div_4_ng_template_5_Template, 1, 5, "ng-template", null, 25, ɵɵtemplateRefExtractor)(7, MessageComponent_ng_container_2_ng_container_1_div_4_ng_container_7_Template, 1, 0, "ng-container", 16);
    ɵɵpipe(8, "async");
    ɵɵelementEnd();
    ɵɵtemplate(9, MessageComponent_ng_container_2_ng_container_1_div_4_div_9_Template, 2, 0, "div", 26);
    ɵɵelementEnd();
    ɵɵtemplate(10, MessageComponent_ng_container_2_ng_container_1_div_4_div_10_Template, 2, 0, "div", 27)(11, MessageComponent_ng_container_2_ng_container_1_div_4_div_11_Template, 2, 0, "div", 28);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const _r31 = ɵɵreference(4);
    const _r33 = ɵɵreference(6);
    const ctx_r18 = ɵɵnextContext(3);
    ɵɵclassProp("str-chat__message-edit-in-progress", ctx_r18.isEditing);
    ɵɵadvance(1);
    ɵɵclassProp("str-chat-angular__message-simple__actions__action--options--editing", ctx_r18.isEditing);
    ɵɵproperty("popper", _r31)("popperTrigger", ctx_r18.popperTriggerClick)("popperPlacement", ctx_r18.popperPlacementAuto)("popperHideOnScroll", false)("popperHideOnClickOutside", true)("popperHideOnMouseLeave", false)("popperDisableAnimation", true);
    ɵɵadvance(6);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(8, 16, ctx_r18.customTemplatesService.messageActionsBoxTemplate$) || _r33)("ngTemplateOutletContext", ctx_r18.getMessageActionsBoxContext());
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r18.visibleMessageActionsCount > 0);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r18.enabledMessageActions.indexOf("send-reply") !== -1 && ctx_r18.mode === "main");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r18.canReactToMessage);
  }
}
function MessageComponent_ng_container_2_ng_container_1_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r64 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "stream-message-reactions", 36);
    ɵɵlistener("isSelectorOpenChange", function MessageComponent_ng_container_2_ng_container_1_ng_template_6_Template_stream_message_reactions_isSelectorOpenChange_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r64);
      const isSelectorOpenChangeHandler_r60 = restoredCtx.isSelectorOpenChangeHandler;
      return ɵɵresetView(isSelectorOpenChangeHandler_r60($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const messageReactionCounts_r57 = ctx.messageReactionCounts;
    const latestReactions_r58 = ctx.latestReactions;
    const isSelectorOpen_r59 = ctx.isSelectorOpen;
    const messageId_r61 = ctx.messageId;
    const ownReactions_r62 = ctx.ownReactions;
    ɵɵproperty("messageReactionCounts", messageReactionCounts_r57)("latestReactions", latestReactions_r58)("isSelectorOpen", isSelectorOpen_r59)("messageId", messageId_r61)("ownReactions", ownReactions_r62);
  }
}
function MessageComponent_ng_container_2_ng_container_1_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_container_2_ng_container_1_ng_container_11_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_container_2_ng_container_1_ng_container_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_container_2_ng_container_1_ng_container_11_ng_container_1_Template, 1, 0, "ng-container", 20);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    ɵɵnextContext(3);
    const _r15 = ɵɵreference(16);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r15);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_3_ng_container_1_Template, 1, 0, "ng-container", 20);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    ɵɵnextContext(4);
    const _r15 = ɵɵreference(16);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r15);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 43);
    ɵɵtext(1);
    ɵɵpipe(2, "translate");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(2, 1, "streamChat.Error · Unsent"), " ");
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_div_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 44);
    ɵɵtext(1);
    ɵɵpipe(2, "translate");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r69 = ɵɵnextContext(4);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(2, 1, (ctx_r69.message == null ? null : ctx_r69.message.errorStatusCode) === 403 ? "streamChat.Message Failed · Unauthorized" : "streamChat.Message Failed · Click to try again"), " ");
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_8_ng_container_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "span", 48);
  }
  if (rf & 2) {
    const part_r75 = ɵɵnextContext().$implicit;
    ɵɵproperty("innerHTML", part_r75.content, ɵɵsanitizeHtml);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_8_ng_container_1_ng_template_2_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 50);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const content_r83 = ctx.content;
    ɵɵadvance(1);
    ɵɵtextInterpolate(content_r83);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_8_ng_container_1_ng_template_2_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_8_ng_container_1_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_8_ng_container_1_ng_template_2_ng_template_0_Template, 2, 1, "ng-template", null, 49, ɵɵtemplateRefExtractor)(2, MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_8_ng_container_1_ng_template_2_ng_container_2_Template, 1, 0, "ng-container", 16);
    ɵɵpipe(3, "async");
  }
  if (rf & 2) {
    const _r81 = ɵɵreference(1);
    const part_r75 = ɵɵnextContext().$implicit;
    const ctx_r77 = ɵɵnextContext(5);
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(3, 2, ctx_r77.customTemplatesService.mentionTemplate$) || _r81)("ngTemplateOutletContext", ctx_r77.getMentionContext(part_r75));
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_8_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_8_ng_container_1_span_1_Template, 1, 1, "span", 46)(2, MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_8_ng_container_1_ng_template_2_Template, 4, 4, "ng-template", null, 47, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const part_r75 = ctx.$implicit;
    const _r78 = ɵɵreference(3);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", part_r75.type === "text")("ngIfElse", _r78);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_8_ng_container_1_Template, 4, 2, "ng-container", 45);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r70 = ɵɵnextContext(4);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r70.messageTextParts);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_ng_template_9_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r85 = ɵɵnextContext(5);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r85.messageText || "", " ");
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_ng_template_9_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "span", 52);
  }
  if (rf & 2) {
    const ctx_r86 = ɵɵnextContext(5);
    ɵɵproperty("innerHTML", ctx_r86.messageText, ɵɵsanitizeHtml);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_container_2_ng_container_1_div_12_ng_template_9_ng_container_0_Template, 2, 1, "ng-container", 2)(1, MessageComponent_ng_container_2_ng_container_1_div_12_ng_template_9_ng_template_1_Template, 1, 1, "ng-template", null, 51, ɵɵtemplateRefExtractor);
  }
  if (rf & 2) {
    const _r87 = ɵɵreference(2);
    const ctx_r71 = ɵɵnextContext(4);
    ɵɵproperty("ngIf", ctx_r71.displayAs === "text")("ngIfElse", _r87);
  }
}
function MessageComponent_ng_container_2_ng_container_1_div_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r89 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 37)(1, "div", 38);
    ɵɵlistener("click", function MessageComponent_ng_container_2_ng_container_1_div_12_Template_div_click_1_listener() {
      ɵɵrestoreView(_r89);
      const ctx_r88 = ɵɵnextContext(3);
      return ɵɵresetView((ctx_r88.message == null ? null : ctx_r88.message.status) === "failed" && (ctx_r88.message == null ? null : ctx_r88.message.errorStatusCode) !== 403 ? ctx_r88.resendMessage() : void 0);
    })("keyup.enter", function MessageComponent_ng_container_2_ng_container_1_div_12_Template_div_keyup_enter_1_listener() {
      ɵɵrestoreView(_r89);
      const ctx_r90 = ɵɵnextContext(3);
      return ɵɵresetView((ctx_r90.message == null ? null : ctx_r90.message.status) === "failed" && (ctx_r90.message == null ? null : ctx_r90.message.errorStatusCode) !== 403 ? ctx_r90.resendMessage() : void 0);
    });
    ɵɵtemplate(2, MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_2_Template, 1, 0, "ng-container", 20)(3, MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_3_Template, 2, 1, "ng-container", 10)(4, MessageComponent_ng_container_2_ng_container_1_div_12_div_4_Template, 3, 3, "div", 39)(5, MessageComponent_ng_container_2_ng_container_1_div_12_div_5_Template, 3, 3, "div", 40);
    ɵɵelementStart(6, "div", 41)(7, "p");
    ɵɵtemplate(8, MessageComponent_ng_container_2_ng_container_1_div_12_ng_container_8_Template, 2, 1, "ng-container", 2)(9, MessageComponent_ng_container_2_ng_container_1_div_12_ng_template_9_Template, 3, 2, "ng-template", null, 42, ɵɵtemplateRefExtractor);
    ɵɵelementEnd()()()();
  }
  if (rf & 2) {
    const _r72 = ɵɵreference(10);
    const ctx_r23 = ɵɵnextContext(3);
    const _r7 = ɵɵreference(8);
    ɵɵadvance(1);
    ɵɵclassProp("str-chat__message-light-text-inner--has-attachment", ctx_r23.hasAttachment);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r7);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r23.hasAttachment && (ctx_r23.message == null ? null : ctx_r23.message.quoted_message));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (ctx_r23.message == null ? null : ctx_r23.message.type) === "error");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (ctx_r23.message == null ? null : ctx_r23.message.status) === "failed");
    ɵɵadvance(3);
    ɵɵproperty("ngIf", ctx_r23.messageTextParts)("ngIfElse", _r72);
  }
}
function MessageComponent_ng_container_2_ng_container_1_stream_icon_placeholder_13_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-icon-placeholder", 53);
  }
}
function MessageComponent_ng_container_2_ng_container_1_ng_container_14_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_container_2_ng_container_1_ng_container_15_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_container_2_ng_container_1_ng_container_16_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_container_2_ng_container_1_ng_container_17_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c26 = () => ({
  position: "inside-message-bubble"
});
var _c27 = (a1) => ({
  position: "outside-message-bubble",
  message: a1
});
var _c28 = () => ({
  position: "outside-message-bubble"
});
function MessageComponent_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_container_2_ng_container_1_ng_container_1_Template, 2, 1, "ng-container", 10);
    ɵɵelement(2, "stream-avatar-placeholder", 11);
    ɵɵelementStart(3, "div", 12);
    ɵɵtemplate(4, MessageComponent_ng_container_2_ng_container_1_div_4_Template, 12, 18, "div", 13);
    ɵɵelementStart(5, "div", 14);
    ɵɵtemplate(6, MessageComponent_ng_container_2_ng_container_1_ng_template_6_Template, 1, 5, "ng-template", null, 15, ɵɵtemplateRefExtractor)(8, MessageComponent_ng_container_2_ng_container_1_ng_container_8_Template, 1, 0, "ng-container", 16);
    ɵɵpipe(9, "async");
    ɵɵelementEnd();
    ɵɵelementStart(10, "div", 17);
    ɵɵtemplate(11, MessageComponent_ng_container_2_ng_container_1_ng_container_11_Template, 2, 1, "ng-container", 10)(12, MessageComponent_ng_container_2_ng_container_1_div_12_Template, 11, 8, "div", 18)(13, MessageComponent_ng_container_2_ng_container_1_stream_icon_placeholder_13_Template, 1, 0, "stream-icon-placeholder", 19);
    ɵɵelementEnd();
    ɵɵtemplate(14, MessageComponent_ng_container_2_ng_container_1_ng_container_14_Template, 1, 0, "ng-container", 16)(15, MessageComponent_ng_container_2_ng_container_1_ng_container_15_Template, 1, 0, "ng-container", 16);
    ɵɵelementEnd();
    ɵɵtemplate(16, MessageComponent_ng_container_2_ng_container_1_ng_container_16_Template, 1, 0, "ng-container", 16)(17, MessageComponent_ng_container_2_ng_container_1_ng_container_17_Template, 1, 0, "ng-container", 16);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const _r20 = ɵɵreference(7);
    const ctx_r16 = ɵɵnextContext(2);
    const _r13 = ɵɵreference(14);
    const _r9 = ɵɵreference(10);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r16.themeVersion === "1");
    ɵɵadvance(1);
    ɵɵproperty("imageUrl", ctx_r16.message == null ? null : ctx_r16.message.user == null ? null : ctx_r16.message.user.image)("name", (ctx_r16.message == null ? null : ctx_r16.message.user == null ? null : ctx_r16.message.user.name) || (ctx_r16.message == null ? null : ctx_r16.message.user == null ? null : ctx_r16.message.user.id))("user", (ctx_r16.message == null ? null : ctx_r16.message.user) || void 0);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r16.areOptionsVisible && ctx_r16.optionsRenderTimeoutEnded);
    ɵɵadvance(4);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(9, 21, ctx_r16.customTemplatesService.messageReactionsTemplate$) || _r20)("ngTemplateOutletContext", ctx_r16.getMessageReactionsContext());
    ɵɵadvance(2);
    ɵɵstyleMapInterpolate1("transform: ", ctx_r16.imageAttachmentModalState === "opened" ? "none" : "translate3d(0, 0, 0)", "");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r16.hasAttachment && !(ctx_r16.message == null ? null : ctx_r16.message.quoted_message));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (ctx_r16.message == null ? null : ctx_r16.message.text) || (ctx_r16.message == null ? null : ctx_r16.message.quoted_message) && ctx_r16.hasAttachment);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r16.themeVersion === "2");
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r13)("ngTemplateOutletContext", ɵɵpureFunction0(23, _c26));
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r9)("ngTemplateOutletContext", ɵɵpureFunction0(24, _c26));
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r13)("ngTemplateOutletContext", ɵɵpureFunction1(25, _c27, ctx_r16.message));
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r9)("ngTemplateOutletContext", ɵɵpureFunction0(27, _c28));
  }
}
function MessageComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_container_2_ng_container_1_Template, 18, 28, "ng-container", 2);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    const _r5 = ɵɵreference(6);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (ctx_r1.message == null ? null : ctx_r1.message.type) !== "system")("ngIfElse", _r5);
  }
}
function MessageComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 54)(1, "div", 55);
    ɵɵtext(2, " streamChat.This message was deleted... ");
    ɵɵelementEnd()();
  }
}
function MessageComponent_ng_template_5_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_template_5_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 57)(1, "div", 58);
    ɵɵelement(2, "div", 59);
    ɵɵelementStart(3, "p");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelement(5, "div", 59);
    ɵɵelementEnd();
    ɵɵelementStart(6, "div", 60);
    ɵɵtext(7);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const messageInput_r94 = ctx.message;
    const ctx_r92 = ɵɵnextContext(2);
    ɵɵadvance(4);
    ɵɵtextInterpolate(messageInput_r94 == null ? null : messageInput_r94.text);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ctx_r92.parsedDate, " ");
  }
}
function MessageComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_template_5_ng_container_0_Template, 1, 0, "ng-container", 16);
    ɵɵpipe(1, "async");
    ɵɵtemplate(2, MessageComponent_ng_template_5_ng_template_2_Template, 8, 2, "ng-template", null, 56, ɵɵtemplateRefExtractor);
  }
  if (rf & 2) {
    const _r93 = ɵɵreference(3);
    const ctx_r4 = ɵɵnextContext();
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(1, 2, ctx_r4.customTemplatesService.systemMessageTemplate$) || _r93)("ngTemplateOutletContext", ctx_r4.getMessageContext());
  }
}
function MessageComponent_ng_template_7_div_0_ng_container_3_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r105 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "stream-attachment-list", 67);
    ɵɵlistener("imageModalStateChange", function MessageComponent_ng_template_7_div_0_ng_container_3_ng_template_1_Template_stream_attachment_list_imageModalStateChange_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r105);
      const imageModalStateChangeHandler_r103 = restoredCtx.imageModalStateChangeHandler;
      return ɵɵresetView(imageModalStateChangeHandler_r103($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const messageId_r100 = ctx.messageId;
    const attachments_r101 = ctx.attachments;
    const parentMessageId_r102 = ctx.parentMessageId;
    ɵɵproperty("messageId", messageId_r100)("attachments", attachments_r101)("parentMessageId", parentMessageId_r102);
  }
}
function MessageComponent_ng_template_7_div_0_ng_container_3_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_template_7_div_0_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_template_7_div_0_ng_container_3_ng_template_1_Template, 1, 3, "ng-template", null, 66, ɵɵtemplateRefExtractor)(3, MessageComponent_ng_template_7_div_0_ng_container_3_ng_container_3_Template, 1, 0, "ng-container", 16);
    ɵɵpipe(4, "async");
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const _r98 = ɵɵreference(2);
    const ctx_r96 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(4, 2, ctx_r96.customTemplatesService.attachmentListTemplate$) || _r98)("ngTemplateOutletContext", ctx_r96.getQuotedMessageAttachmentListContext());
  }
}
function MessageComponent_ng_template_7_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r107 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 62);
    ɵɵlistener("click", function MessageComponent_ng_template_7_div_0_Template_div_click_0_listener() {
      ɵɵrestoreView(_r107);
      const ctx_r106 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r106.jumpToMessage(ctx_r106.message == null ? null : ctx_r106.message.quoted_message.id, ctx_r106.message == null ? null : ctx_r106.message.quoted_message == null ? null : ctx_r106.message.quoted_message.parent_id));
    })("keyup.enter", function MessageComponent_ng_template_7_div_0_Template_div_keyup_enter_0_listener() {
      ɵɵrestoreView(_r107);
      const ctx_r108 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r108.jumpToMessage(ctx_r108.message == null ? null : ctx_r108.message.quoted_message.id, ctx_r108.message == null ? null : ctx_r108.message.quoted_message == null ? null : ctx_r108.message.quoted_message.parent_id));
    });
    ɵɵelement(1, "stream-avatar-placeholder", 63);
    ɵɵelementStart(2, "div", 64);
    ɵɵtemplate(3, MessageComponent_ng_template_7_div_0_ng_container_3_Template, 5, 4, "ng-container", 10);
    ɵɵelement(4, "div", 65);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r95 = ɵɵnextContext(2);
    ɵɵclassProp("mine", ctx_r95.isSentByCurrentUser);
    ɵɵadvance(1);
    ɵɵproperty("imageUrl", ctx_r95.message == null ? null : ctx_r95.message.quoted_message == null ? null : ctx_r95.message.quoted_message.user == null ? null : ctx_r95.message.quoted_message.user.image)("name", (ctx_r95.message == null ? null : ctx_r95.message.quoted_message == null ? null : ctx_r95.message.quoted_message.user == null ? null : ctx_r95.message.quoted_message.user.name) || (ctx_r95.message == null ? null : ctx_r95.message.quoted_message == null ? null : ctx_r95.message.quoted_message.user == null ? null : ctx_r95.message.quoted_message.user.id))("size", 20)("user", (ctx_r95.message == null ? null : ctx_r95.message.quoted_message == null ? null : ctx_r95.message.quoted_message.user) || void 0);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", (ctx_r95.message == null ? null : ctx_r95.message.quoted_message == null ? null : ctx_r95.message.quoted_message.attachments) && (ctx_r95.message == null ? null : ctx_r95.message.quoted_message == null ? null : ctx_r95.message.quoted_message.attachments == null ? null : ctx_r95.message.quoted_message.attachments.length));
    ɵɵadvance(1);
    ɵɵproperty("innerHTML", (ctx_r95.message == null ? null : ctx_r95.message.quoted_message == null ? null : ctx_r95.message.quoted_message.translation) || (ctx_r95.message == null ? null : ctx_r95.message.quoted_message == null ? null : ctx_r95.message.quoted_message.html) || (ctx_r95.message == null ? null : ctx_r95.message.quoted_message == null ? null : ctx_r95.message.quoted_message.text), ɵɵsanitizeHtml);
  }
}
function MessageComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_template_7_div_0_Template, 5, 8, "div", 61);
  }
  if (rf & 2) {
    const ctx_r6 = ɵɵnextContext();
    ɵɵproperty("ngIf", ctx_r6.message == null ? null : ctx_r6.message.quoted_message);
  }
}
function MessageComponent_ng_template_9_ng_container_0_div_1_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r117 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 75);
    ɵɵlistener("click", function MessageComponent_ng_template_9_ng_container_0_div_1_button_1_Template_button_click_0_listener() {
      ɵɵrestoreView(_r117);
      const ctx_r116 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r116.displayOriginalMessage());
    })("keyup.enter", function MessageComponent_ng_template_9_ng_container_0_div_1_button_1_Template_button_keyup_enter_0_listener() {
      ɵɵrestoreView(_r117);
      const ctx_r118 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r118.displayOriginalMessage());
    });
    ɵɵtext(1, " streamChat.See original (automatically translated) ");
    ɵɵelementEnd();
  }
}
function MessageComponent_ng_template_9_ng_container_0_div_1_button_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r120 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 76);
    ɵɵlistener("click", function MessageComponent_ng_template_9_ng_container_0_div_1_button_2_Template_button_click_0_listener() {
      ɵɵrestoreView(_r120);
      const ctx_r119 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r119.displayTranslatedMessage());
    })("keyup.enter", function MessageComponent_ng_template_9_ng_container_0_div_1_button_2_Template_button_keyup_enter_0_listener() {
      ɵɵrestoreView(_r120);
      const ctx_r121 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r121.displayTranslatedMessage());
    });
    ɵɵtext(1, " streamChat.See translation ");
    ɵɵelementEnd();
  }
}
function MessageComponent_ng_template_9_ng_container_0_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 72);
    ɵɵtemplate(1, MessageComponent_ng_template_9_ng_container_0_div_1_button_1_Template, 2, 0, "button", 73)(2, MessageComponent_ng_template_9_ng_container_0_div_1_button_2_Template, 2, 0, "button", 74);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r111 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r111.displayedMessageTextContent === "translation");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r111.displayedMessageTextContent === "original");
  }
}
function MessageComponent_ng_template_9_ng_container_0_ng_container_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_template_9_ng_container_0_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_template_9_ng_container_0_ng_container_3_ng_container_1_Template, 1, 0, "ng-container", 20);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    ɵɵnextContext(3);
    const _r11 = ɵɵreference(12);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r11);
  }
}
function MessageComponent_ng_template_9_ng_container_0_span_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 77);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r113 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", (ctx_r113.message == null ? null : ctx_r113.message.user == null ? null : ctx_r113.message.user.name) ? ctx_r113.message == null ? null : ctx_r113.message.user == null ? null : ctx_r113.message.user.name : ctx_r113.message == null ? null : ctx_r113.message.user == null ? null : ctx_r113.message.user.id, " ");
  }
}
function MessageComponent_ng_template_9_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_template_9_ng_container_0_div_1_Template, 3, 2, "div", 68);
    ɵɵelementStart(2, "div", 69);
    ɵɵtemplate(3, MessageComponent_ng_template_9_ng_container_0_ng_container_3_Template, 2, 1, "ng-container", 10)(4, MessageComponent_ng_template_9_ng_container_0_span_4_Template, 2, 1, "span", 70);
    ɵɵelementStart(5, "span", 71);
    ɵɵtext(6);
    ɵɵelementEnd()();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r110 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r110.shouldDisplayTranslationNotice);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r110.themeVersion === "2");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r110.isSentByCurrentUser);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r110.parsedDate, " ");
  }
}
function MessageComponent_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_template_9_ng_container_0_Template, 7, 4, "ng-container", 10);
  }
  if (rf & 2) {
    const position_r109 = ctx.position;
    const ctx_r8 = ɵɵnextContext();
    ɵɵproperty("ngIf", position_r109 === "inside-message-bubble" && ctx_r8.themeVersion === "1" || position_r109 === "outside-message-bubble" && ctx_r8.themeVersion === "2");
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_template_11_ng_container_0_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 20);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    ɵɵnextContext();
    const _r132 = ɵɵreference(9);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r132);
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_2_ng_container_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_2_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_template_11_ng_container_0_ng_template_2_ng_container_0_ng_container_1_Template, 1, 0, "ng-container", 20);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    ɵɵnextContext(2);
    const _r136 = ɵɵreference(13);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r136);
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_template_11_ng_container_0_ng_template_2_ng_container_0_Template, 2, 1, "ng-container", 2);
  }
  if (rf & 2) {
    ɵɵnextContext();
    const _r128 = ɵɵreference(5);
    const ctx_r125 = ɵɵnextContext(2);
    ɵɵproperty("ngIf", ctx_r125.mode === "main" && ctx_r125.isMessageDeliveredAndRead && ctx_r125.canDisplayReadStatus)("ngIfElse", _r128);
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_4_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_template_11_ng_container_0_ng_template_4_ng_container_0_Template, 1, 0, "ng-container", 16);
    ɵɵpipe(1, "async");
  }
  if (rf & 2) {
    ɵɵnextContext();
    const _r130 = ɵɵreference(7);
    const ctx_r127 = ɵɵnextContext(2);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(1, 2, ctx_r127.customTemplatesService.deliveredStatusTemplate$) || _r130)("ngTemplateOutletContext", ctx_r127.getDeliveredStatusContext());
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_6_span_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 86);
    ɵɵlistener("hover", function MessageComponent_ng_template_11_ng_container_0_ng_template_6_span_0_Template_span_hover_0_listener($event) {
      return $event.stopPropagation();
    });
    ɵɵelementStart(1, "popper-content", null, 24)(3, "div", 87);
    ɵɵtext(4);
    ɵɵpipe(5, "translate");
    ɵɵelementEnd()();
    ɵɵelement(6, "stream-icon-placeholder", 88);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const _r144 = ɵɵreference(2);
    const ctx_r143 = ɵɵnextContext(4);
    ɵɵproperty("popper", _r144)("popperTrigger", ctx_r143.popperTriggerHover)("popperPlacement", ctx_r143.popperPlacementAuto)("popperHideOnScroll", false)("popperHideOnClickOutside", false);
    ɵɵadvance(4);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(5, 6, "streamChat.Delivered"), " ");
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_template_11_ng_container_0_ng_template_6_span_0_Template, 7, 8, "span", 85);
  }
  if (rf & 2) {
    const ctx_r129 = ɵɵnextContext(3);
    ɵɵproperty("ngIf", ctx_r129.mode === "main");
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_8_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_template_11_ng_container_0_ng_template_8_ng_container_0_Template, 1, 0, "ng-container", 16);
    ɵɵpipe(1, "async");
  }
  if (rf & 2) {
    ɵɵnextContext();
    const _r134 = ɵɵreference(11);
    const ctx_r131 = ɵɵnextContext(2);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(1, 2, ctx_r131.customTemplatesService.sendingStatusTemplate$) || _r134)("ngTemplateOutletContext", ctx_r131.getSendingStatusContext());
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 89);
    ɵɵlistener("hover", function MessageComponent_ng_template_11_ng_container_0_ng_template_10_Template_span_hover_0_listener($event) {
      return $event.stopPropagation();
    });
    ɵɵelementStart(1, "popper-content", null, 24)(3, "div", 87);
    ɵɵtext(4);
    ɵɵpipe(5, "translate");
    ɵɵelementEnd()();
    ɵɵelement(6, "stream-loading-indicator-placeholder", 90);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const _r147 = ɵɵreference(2);
    const ctx_r133 = ɵɵnextContext(3);
    ɵɵproperty("popper", _r147)("popperTrigger", ctx_r133.popperTriggerHover)("popperPlacement", ctx_r133.popperPlacementAuto)("popperHideOnScroll", false)("popperHideOnClickOutside", false);
    ɵɵadvance(4);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(5, 6, "streamChat.Sending..."), " ");
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_12_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_template_11_ng_container_0_ng_template_12_ng_container_0_Template, 1, 0, "ng-container", 16);
    ɵɵpipe(1, "async");
  }
  if (rf & 2) {
    ɵɵnextContext();
    const _r138 = ɵɵreference(15);
    const ctx_r135 = ɵɵnextContext(2);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(1, 2, ctx_r135.customTemplatesService.readStatusTemplate$) || _r138)("ngTemplateOutletContext", ctx_r135.getReadStatusContext());
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_14_span_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 95);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r151 = ɵɵnextContext(4);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r151.message == null ? null : ctx_r151.message.readBy.length, " ");
  }
}
function MessageComponent_ng_template_11_ng_container_0_ng_template_14_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 91);
    ɵɵlistener("hover", function MessageComponent_ng_template_11_ng_container_0_ng_template_14_Template_span_hover_0_listener($event) {
      return $event.stopPropagation();
    });
    ɵɵelementStart(1, "popper-content", null, 24)(3, "div", 92);
    ɵɵtext(4);
    ɵɵelementEnd()();
    ɵɵelement(5, "stream-avatar-placeholder", 93);
    ɵɵtemplate(6, MessageComponent_ng_template_11_ng_container_0_ng_template_14_span_6_Template, 2, 1, "span", 94);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const _r150 = ɵɵreference(2);
    const ctx_r137 = ɵɵnextContext(3);
    ɵɵproperty("popper", _r150)("popperTrigger", ctx_r137.popperTriggerHover)("popperPlacement", ctx_r137.popperPlacementAuto)("popperHideOnScroll", false)("popperHideOnClickOutside", false);
    ɵɵadvance(4);
    ɵɵtextInterpolate1(" ", ctx_r137.readByText, " ");
    ɵɵadvance(1);
    ɵɵproperty("size", 15)("imageUrl", ctx_r137.lastReadUser == null ? null : ctx_r137.lastReadUser.image)("name", (ctx_r137.lastReadUser == null ? null : ctx_r137.lastReadUser.name) || (ctx_r137.lastReadUser == null ? null : ctx_r137.lastReadUser.id))("user", ctx_r137.lastReadUser);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r137.isReadByMultipleUsers);
  }
}
function MessageComponent_ng_template_11_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageComponent_ng_template_11_ng_container_0_ng_container_1_Template, 2, 1, "ng-container", 2)(2, MessageComponent_ng_template_11_ng_container_0_ng_template_2_Template, 1, 2, "ng-template", null, 78, ɵɵtemplateRefExtractor)(4, MessageComponent_ng_template_11_ng_container_0_ng_template_4_Template, 2, 4, "ng-template", null, 79, ɵɵtemplateRefExtractor)(6, MessageComponent_ng_template_11_ng_container_0_ng_template_6_Template, 1, 1, "ng-template", null, 80, ɵɵtemplateRefExtractor)(8, MessageComponent_ng_template_11_ng_container_0_ng_template_8_Template, 2, 4, "ng-template", null, 81, ɵɵtemplateRefExtractor)(10, MessageComponent_ng_template_11_ng_container_0_ng_template_10_Template, 7, 8, "ng-template", null, 82, ɵɵtemplateRefExtractor)(12, MessageComponent_ng_template_11_ng_container_0_ng_template_12_Template, 2, 4, "ng-template", null, 83, ɵɵtemplateRefExtractor)(14, MessageComponent_ng_template_11_ng_container_0_ng_template_14_Template, 7, 11, "ng-template", null, 84, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const _r126 = ɵɵreference(3);
    const ctx_r123 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (ctx_r123.message == null ? null : ctx_r123.message.status) === "sending")("ngIfElse", _r126);
  }
}
function MessageComponent_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_template_11_ng_container_0_Template, 16, 2, "ng-container", 10);
  }
  if (rf & 2) {
    const ctx_r10 = ɵɵnextContext();
    ɵɵproperty("ngIf", ctx_r10.isSentByCurrentUser && (ctx_r10.isLastSentMessage && (ctx_r10.message == null ? null : ctx_r10.message.status) === "received" || (ctx_r10.message == null ? null : ctx_r10.message.status) === "sending"));
  }
}
function MessageComponent_ng_template_13_div_0_button_1_stream_icon_placeholder_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-icon-placeholder", 101);
  }
}
function MessageComponent_ng_template_13_div_0_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r158 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 99);
    ɵɵlistener("click", function MessageComponent_ng_template_13_div_0_button_1_Template_button_click_0_listener() {
      ɵɵrestoreView(_r158);
      const ctx_r157 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r157.setAsActiveParentMessage());
    });
    ɵɵtemplate(1, MessageComponent_ng_template_13_div_0_button_1_stream_icon_placeholder_1_Template, 1, 0, "stream-icon-placeholder", 100);
    ɵɵtext(2);
    ɵɵpipe(3, "translate");
    ɵɵpipe(4, "translate");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r155 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r155.themeVersion === "1");
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", (ctx_r155.message == null ? null : ctx_r155.message.reply_count) === 1 ? ɵɵpipeBind1(3, 2, "streamChat.1 reply") : ɵɵpipeBind2(4, 4, "streamChat.{{ replyCount }} replies", ctx_r155.replyCountParam), " ");
  }
}
function MessageComponent_ng_template_13_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 97);
    ɵɵtemplate(1, MessageComponent_ng_template_13_div_0_button_1_Template, 5, 7, "button", 98);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r154 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r154.shouldDisplayThreadLink);
  }
}
function MessageComponent_ng_template_13_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_template_13_div_0_Template, 2, 1, "div", 96);
  }
  if (rf & 2) {
    const position_r153 = ctx.position;
    const ctx_r12 = ɵɵnextContext();
    ɵɵproperty("ngIf", position_r153 === "inside-message-bubble" && ctx_r12.themeVersion === "1" || position_r153 === "outside-message-bubble" && ctx_r12.themeVersion === "2");
  }
}
function MessageComponent_ng_template_15_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r167 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "stream-attachment-list", 67);
    ɵɵlistener("imageModalStateChange", function MessageComponent_ng_template_15_ng_template_0_Template_stream_attachment_list_imageModalStateChange_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r167);
      const imageModalStateChangeHandler_r165 = restoredCtx.imageModalStateChangeHandler;
      return ɵɵresetView(imageModalStateChangeHandler_r165($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const messageId_r162 = ctx.messageId;
    const attachments_r163 = ctx.attachments;
    const parentMessageId_r164 = ctx.parentMessageId;
    ɵɵproperty("messageId", messageId_r162)("attachments", attachments_r163)("parentMessageId", parentMessageId_r164);
  }
}
function MessageComponent_ng_template_15_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageComponent_ng_template_15_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageComponent_ng_template_15_ng_template_0_Template, 1, 3, "ng-template", null, 66, ɵɵtemplateRefExtractor)(2, MessageComponent_ng_template_15_ng_container_2_Template, 1, 0, "ng-container", 16);
    ɵɵpipe(3, "async");
  }
  if (rf & 2) {
    const _r160 = ɵɵreference(1);
    const ctx_r14 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(3, 2, ctx_r14.customTemplatesService.attachmentListTemplate$) || _r160)("ngTemplateOutletContext", ctx_r14.getAttachmentListContext());
  }
}
var _c29 = ["input"];
function AutocompleteTextareaComponent_ng_template_3_div_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c30 = (a0) => ({
  item: a0
});
function AutocompleteTextareaComponent_ng_template_3_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 7);
    ɵɵtemplate(1, AutocompleteTextareaComponent_ng_template_3_div_1_ng_container_1_Template, 1, 0, "ng-container", 8);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r7 = ɵɵnextContext().item;
    const ctx_r8 = ɵɵnextContext();
    const _r6 = ɵɵreference(8);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r8.mentionAutocompleteItemTemplate || _r6)("ngTemplateOutletContext", ɵɵpureFunction1(2, _c30, item_r7));
  }
}
function AutocompleteTextareaComponent_ng_template_3_div_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function AutocompleteTextareaComponent_ng_template_3_div_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 7);
    ɵɵtemplate(1, AutocompleteTextareaComponent_ng_template_3_div_2_ng_container_1_Template, 1, 0, "ng-container", 8);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r7 = ɵɵnextContext().item;
    const ctx_r9 = ɵɵnextContext();
    const _r4 = ɵɵreference(6);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r9.commandAutocompleteItemTemplate || _r4)("ngTemplateOutletContext", ɵɵpureFunction1(2, _c30, item_r7));
  }
}
function AutocompleteTextareaComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 5);
    ɵɵtemplate(1, AutocompleteTextareaComponent_ng_template_3_div_1_Template, 2, 4, "div", 6)(2, AutocompleteTextareaComponent_ng_template_3_div_2_Template, 2, 4, "div", 6);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r7 = ctx.item;
    ɵɵproperty("ngSwitch", item_r7.type);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "mention");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "command");
  }
}
function AutocompleteTextareaComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 9)(1, "span", 10)(2, "strong", 11);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "span", 12);
    ɵɵtext(5);
    ɵɵelementEnd()();
    ɵɵelement(6, "br");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r14 = ctx.item;
    ɵɵadvance(3);
    ɵɵtextInterpolate(item_r14.name);
    ɵɵadvance(2);
    ɵɵtextInterpolate2("/", item_r14.name, " ", item_r14.args, "");
  }
}
function AutocompleteTextareaComponent_ng_template_7_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 17);
    ɵɵtext(1, "@");
    ɵɵelementEnd();
  }
}
function AutocompleteTextareaComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 13);
    ɵɵelement(1, "stream-avatar-placeholder", 14);
    ɵɵelementStart(2, "span", 15);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵtemplate(4, AutocompleteTextareaComponent_ng_template_7_div_4_Template, 2, 0, "div", 16);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r15 = ctx.item;
    const ctx_r5 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵstyleMap("height: " + ctx_r5.themeVersion === "2" ? 56 : "20px");
    ɵɵproperty("size", ctx_r5.themeVersion === "2" ? 56 : 20)("imageUrl", item_r15.image || (item_r15.user == null ? null : item_r15.user.image))("name", item_r15.autocompleteLabel)("user", item_r15.user || item_r15);
    ɵɵadvance(2);
    ɵɵtextInterpolate(item_r15.autocompleteLabel);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.themeVersion === "2");
  }
}
var _c31 = ["scrollContainer"];
var _c32 = ["parentMessageElement"];
function MessageListComponent_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageListComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageListComponent_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 15);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r1.emptyListTemplate);
  }
}
function MessageListComponent_li_5_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c33 = (a0) => ({
  message: a0,
  index: "parent"
});
function MessageListComponent_li_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "li", 16, 17);
    ɵɵtemplate(2, MessageListComponent_li_5_ng_container_2_Template, 1, 0, "ng-container", 9);
    ɵɵelementStart(3, "div", 18);
    ɵɵtext(4);
    ɵɵpipe(5, "translate");
    ɵɵpipe(6, "translate");
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    const _r12 = ɵɵreference(17);
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", _r12)("ngTemplateOutletContext", ɵɵpureFunction1(8, _c33, ctx_r2.parentMessage));
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", (ctx_r2.parentMessage == null ? null : ctx_r2.parentMessage.reply_count) === 1 ? ɵɵpipeBind1(5, 3, "streamChat.1 reply") : ɵɵpipeBind2(6, 5, "streamChat.{{ replyCount }} replies", ctx_r2.replyCountParam), " ");
  }
}
function MessageListComponent_ng_container_6_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageListComponent_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageListComponent_ng_container_6_ng_container_1_Template, 1, 0, "ng-container", 15);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r3.emptyListTemplate);
  }
}
function MessageListComponent_stream_loading_indicator_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-loading-indicator", 19);
  }
}
function MessageListComponent_ng_container_8_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c34 = (a0, a1) => ({
  date: a0,
  parsedDate: a1,
  isNewMessage: false
});
function MessageListComponent_ng_container_8_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageListComponent_ng_container_8_ng_container_1_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 9);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const message_r23 = ɵɵnextContext().$implicit;
    const ctx_r27 = ɵɵnextContext(2);
    const _r14 = ɵɵreference(19);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r14)("ngTemplateOutletContext", ɵɵpureFunction2(2, _c34, message_r23.created_at, ctx_r27.parseDate(message_r23.created_at)));
  }
}
function MessageListComponent_ng_container_8_ng_container_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageListComponent_ng_container_8_ng_container_1_ng_container_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageListComponent_ng_container_8_ng_container_1_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageListComponent_ng_container_8_ng_container_1_ng_container_4_ng_container_1_Template, 1, 0, "ng-container", 15);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r29 = ɵɵnextContext(3);
    const _r16 = ɵɵreference(21);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r29.customnewMessagesIndicatorTemplate || _r16);
  }
}
function MessageListComponent_ng_container_8_ng_container_1_ng_container_5_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c35 = (a0, a1, a2) => ({
  date: a0,
  parsedDate: a1,
  isNewMessage: a2
});
function MessageListComponent_ng_container_8_ng_container_1_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageListComponent_ng_container_8_ng_container_1_ng_container_5_ng_container_1_Template, 1, 0, "ng-container", 9);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r36 = ɵɵnextContext();
    const i_r24 = ctx_r36.index;
    const message_r23 = ctx_r36.$implicit;
    const messages_r21 = ɵɵnextContext().ngIf;
    const ctx_r30 = ɵɵnextContext();
    const _r14 = ɵɵreference(19);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r14)("ngTemplateOutletContext", ɵɵpureFunction3(2, _c35, messages_r21[i_r24 + 1].created_at, ctx_r30.parseDate(messages_r21[i_r24 + 1].created_at), ctx_r30.direction === "bottom-to-top" && message_r23.id === ctx_r30.lastReadMessageId && !ctx_r30.isSentByCurrentUser(messages_r21[i_r24 + 1]) || ctx_r30.direction === "top-to-bottom" && false));
  }
}
var _c36 = (a0, a1) => ({
  message: a0,
  index: a1
});
function MessageListComponent_ng_container_8_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageListComponent_ng_container_8_ng_container_1_ng_container_1_Template, 2, 5, "ng-container", 2);
    ɵɵelementStart(2, "li", 21);
    ɵɵtemplate(3, MessageListComponent_ng_container_8_ng_container_1_ng_container_3_Template, 1, 0, "ng-container", 9);
    ɵɵelementEnd();
    ɵɵtemplate(4, MessageListComponent_ng_container_8_ng_container_1_ng_container_4_Template, 2, 1, "ng-container", 2)(5, MessageListComponent_ng_container_8_ng_container_1_ng_container_5_Template, 2, 6, "ng-container", 2);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const message_r23 = ctx.$implicit;
    const i_r24 = ctx.index;
    const isFirst_r25 = ctx.first;
    const isLast_r26 = ctx.last;
    const messages_r21 = ɵɵnextContext().ngIf;
    const ctx_r22 = ɵɵnextContext();
    const _r12 = ɵɵreference(17);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", isFirst_r25);
    ɵɵadvance(1);
    ɵɵclassMapInterpolate1("str-chat__li str-chat__li--", ctx_r22.groupStyles[i_r24], "");
    ɵɵpropertyInterpolate("id", message_r23.id);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r12)("ngTemplateOutletContext", ɵɵpureFunction2(9, _c36, message_r23, i_r24));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r22.lastReadMessageId === message_r23.id && !isLast_r26 && ctx_r22.direction === "bottom-to-top" && !ctx_r22.isSentByCurrentUser(messages_r21[i_r24 + 1]) && (!ctx_r22.displayDateSeparator || !ctx_r22.isNextMessageOnSeparateDate[i_r24]) || ctx_r22.direction === "top-to-bottom" && !isLast_r26 && !ctx_r22.isSentByCurrentUser(message_r23) && ctx_r22.lastReadMessageId === messages_r21[i_r24 + 1].id);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r22.isNextMessageOnSeparateDate[i_r24]);
  }
}
function MessageListComponent_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageListComponent_ng_container_8_ng_container_1_Template, 6, 12, "ng-container", 20);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const messages_r21 = ctx.ngIf;
    const ctx_r5 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", messages_r21)("ngForTrackBy", ctx_r5.trackByMessageId);
  }
}
function MessageListComponent_stream_loading_indicator_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-loading-indicator", 22);
  }
}
var _c37 = (a0) => ({
  user: a0
});
var _c38 = (a0) => ({
  users: a0
});
function MessageListComponent_ng_template_11_ng_container_0_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 24)(1, "div", 25);
    ɵɵelement(2, "span", 26)(3, "span", 26)(4, "span", 26);
    ɵɵelementEnd();
    ɵɵelementStart(5, "div", 27);
    ɵɵtext(6);
    ɵɵpipe(7, "translate");
    ɵɵpipe(8, "translate");
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const users_r40 = ɵɵnextContext().ngIf;
    const ctx_r41 = ɵɵnextContext(2);
    ɵɵadvance(6);
    ɵɵtextInterpolate1(" ", users_r40.length === 1 ? ɵɵpipeBind2(7, 1, "streamChat.user is typing", ɵɵpureFunction1(7, _c37, ctx_r41.getTypingIndicatorText(users_r40))) : ɵɵpipeBind2(8, 4, "streamChat.users are typing", ɵɵpureFunction1(9, _c38, ctx_r41.getTypingIndicatorText(users_r40))), " ");
  }
}
function MessageListComponent_ng_template_11_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageListComponent_ng_template_11_ng_container_0_div_1_Template, 9, 11, "div", 23);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const users_r40 = ctx.ngIf;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", users_r40.length > 0);
  }
}
function MessageListComponent_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageListComponent_ng_template_11_ng_container_0_Template, 2, 1, "ng-container", 2);
    ɵɵpipe(1, "async");
  }
  if (rf & 2) {
    const usersTyping$_r38 = ctx.usersTyping$;
    ɵɵproperty("ngIf", ɵɵpipeBind1(1, 1, usersTyping$_r38));
  }
}
function MessageListComponent_ng_container_13_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageListComponent_button_15_div_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 31);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r43 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r43.unreadMessageCount, " ");
  }
}
function MessageListComponent_button_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r45 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 28);
    ɵɵlistener("keyup.enter", function MessageListComponent_button_15_Template_button_keyup_enter_0_listener() {
      ɵɵrestoreView(_r45);
      const ctx_r44 = ɵɵnextContext();
      return ɵɵresetView(ctx_r44.jumpToLatestMessage());
    })("click", function MessageListComponent_button_15_Template_button_click_0_listener() {
      ɵɵrestoreView(_r45);
      const ctx_r46 = ɵɵnextContext();
      return ɵɵresetView(ctx_r46.jumpToLatestMessage());
    });
    ɵɵelement(1, "stream-icon", 29);
    ɵɵtemplate(2, MessageListComponent_button_15_div_2_Template, 2, 1, "div", 30);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r10 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("icon", ctx_r10.direction === "bottom-to-top" ? "arrow-down" : "arrow-up");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r10.unreadMessageCount > 0);
  }
}
function MessageListComponent_ng_template_16_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "stream-message", 33);
  }
  if (rf & 2) {
    const messageInput_r52 = ctx.message;
    const isLastSentMessage_r53 = ctx.isLastSentMessage;
    const enabledMessageActions_r54 = ctx.enabledMessageActions;
    const mode_r55 = ctx.mode;
    const isHighlighted_r56 = ctx.isHighlighted;
    const customActions_r57 = ctx.customActions;
    ɵɵproperty("message", messageInput_r52)("isLastSentMessage", isLastSentMessage_r53)("enabledMessageActions", enabledMessageActions_r54)("mode", mode_r55)("isHighlighted", isHighlighted_r56)("customActions", customActions_r57);
  }
}
function MessageListComponent_ng_template_16_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c39 = (a0, a1, a2, a3, a4, a5) => ({
  message: a0,
  isLastSentMessage: a1,
  enabledMessageActions: a2,
  mode: a3,
  isHighlighted: a4,
  customActions: a5
});
function MessageListComponent_ng_template_16_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageListComponent_ng_template_16_ng_template_0_Template, 1, 6, "ng-template", null, 32, ɵɵtemplateRefExtractor)(2, MessageListComponent_ng_template_16_ng_container_2_Template, 1, 0, "ng-container", 9);
  }
  if (rf & 2) {
    const message_r47 = ctx.message;
    const _r50 = ɵɵreference(1);
    const ctx_r11 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", ctx_r11.messageTemplate || _r50)("ngTemplateOutletContext", ɵɵpureFunction6(2, _c39, message_r47, !!(ctx_r11.lastSentMessageId && (message_r47 == null ? null : message_r47.id) === ctx_r11.lastSentMessageId), ctx_r11.enabledMessageActions, ctx_r11.mode, (message_r47 == null ? null : message_r47.id) === ctx_r11.highlightedMessageId && !ctx_r11.isJumpingToLatestUnreadMessage, ctx_r11.customMessageActions));
  }
}
function MessageListComponent_ng_template_18_ng_container_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function MessageListComponent_ng_template_18_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MessageListComponent_ng_template_18_ng_container_0_ng_container_1_Template, 1, 0, "ng-container", 9);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r65 = ɵɵnextContext();
    const date_r58 = ctx_r65.date;
    const parsedDate_r59 = ctx_r65.parsedDate;
    const isNewMessage_r60 = ctx_r65.isNewMessage;
    const _r63 = ɵɵreference(2);
    const ctx_r61 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r61.customDateSeparatorTemplate || _r63)("ngTemplateOutletContext", ɵɵpureFunction3(2, _c35, date_r58, parsedDate_r59, isNewMessage_r60));
  }
}
function MessageListComponent_ng_template_18_ng_template_1_hr_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "hr", 39);
  }
}
function MessageListComponent_ng_template_18_ng_template_1_span_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 40);
    ɵɵtext(1);
    ɵɵpipe(2, "translate");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    ɵɵadvance(1);
    ɵɵtextInterpolate1("• ", ɵɵpipeBind1(2, 1, "streamChat.New"), "");
  }
}
function MessageListComponent_ng_template_18_ng_template_1_hr_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "hr", 39);
  }
}
function MessageListComponent_ng_template_18_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 35);
    ɵɵtemplate(1, MessageListComponent_ng_template_18_ng_template_1_hr_1_Template, 1, 0, "hr", 36);
    ɵɵelementStart(2, "div", 37);
    ɵɵtext(3);
    ɵɵtemplate(4, MessageListComponent_ng_template_18_ng_template_1_span_4_Template, 3, 3, "span", 38);
    ɵɵelementEnd();
    ɵɵtemplate(5, MessageListComponent_ng_template_18_ng_template_1_hr_5_Template, 1, 0, "hr", 36);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const parsedDate_r67 = ctx.parsedDate;
    const isNewMessage_r68 = ctx.isNewMessage;
    const ctx_r62 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r62.dateSeparatorTextPos === "right" || ctx_r62.dateSeparatorTextPos === "center");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", parsedDate_r67, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", isNewMessage_r68);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r62.dateSeparatorTextPos === "left" || ctx_r62.dateSeparatorTextPos === "center");
  }
}
function MessageListComponent_ng_template_18_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, MessageListComponent_ng_template_18_ng_container_0_Template, 2, 6, "ng-container", 2)(1, MessageListComponent_ng_template_18_ng_template_1_Template, 6, 4, "ng-template", null, 34, ɵɵtemplateRefExtractor);
  }
  if (rf & 2) {
    const ctx_r13 = ɵɵnextContext();
    ɵɵproperty("ngIf", ctx_r13.displayDateSeparator);
  }
}
function MessageListComponent_ng_template_20_hr_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "hr", 39);
  }
}
function MessageListComponent_ng_template_20_hr_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "hr", 39);
  }
}
function MessageListComponent_ng_template_20_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 41);
    ɵɵtemplate(1, MessageListComponent_ng_template_20_hr_1_Template, 1, 0, "hr", 36);
    ɵɵelementStart(2, "div", 42);
    ɵɵtext(3, "streamChat.New");
    ɵɵelementEnd();
    ɵɵtemplate(4, MessageListComponent_ng_template_20_hr_4_Template, 1, 0, "hr", 36);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r15 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r15.dateSeparatorTextPos === "right" || ctx_r15.dateSeparatorTextPos === "center");
    ɵɵadvance(3);
    ɵɵproperty("ngIf", ctx_r15.dateSeparatorTextPos === "left" || ctx_r15.dateSeparatorTextPos === "center");
  }
}
function ThreadComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function ThreadComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 3)(1, "div", 4)(2, "div", 5);
    ɵɵtext(3, " streamChat.Thread ");
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 6);
    ɵɵtext(5);
    ɵɵelementEnd()();
    ɵɵelementStart(6, "button", 7);
    ɵɵlistener("click", function ThreadComponent_ng_template_4_Template_button_click_6_listener() {
      const restoredCtx = ɵɵrestoreView(_r6);
      const closeThreadHandler_r4 = restoredCtx.closeThreadHandler;
      return ɵɵresetView(closeThreadHandler_r4());
    });
    ɵɵelement(7, "stream-icon-placeholder", 8);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(5);
    ɵɵtextInterpolate1(" ", ctx_r1.channelName, " ");
  }
}
var version = "4.55.1";
var NotificationService = class {
  constructor() {
    this.notificationsSubject = new BehaviorSubject([]);
    this.notifications$ = this.notificationsSubject.asObservable();
  }
  /**
   * Displays a notification for the given amount of time.
   * @param content The text of the notification or the HTML template for the notification
   * @param type The type of the notification
   * @param timeout The number of milliseconds while the notification should be visible
   * @param translateParams Translation parameters for the `content` (for text notifications)
   * @param templateContext The input of the notification template (for HTML notifications)
   * @returns A method to clear the notification (before the timeout).
   */
  addTemporaryNotification(content, type = "error", timeout = 5e3, translateParams, templateContext) {
    const notification = this.createNotification(content, type, translateParams, templateContext);
    const id = setTimeout(() => this.removeNotification(notification.id), timeout);
    notification.dismissFn = () => {
      clearTimeout(id);
      this.removeNotification(notification.id);
    };
    this.notificationsSubject.next([...this.notificationsSubject.getValue(), notification]);
    return notification.dismissFn;
  }
  /**
   * Displays a notification, that will be visible until it's removed.
   * @param content The text of the notification or the HTML template for the notification
   * @param type The type of the notification
   * @param translateParams Translation parameters for the `content` (for text notifications)
   * @param templateContext The input of the notification template (for HTML notifications)
   * @returns A method to clear the notification.
   */
  addPermanentNotification(content, type = "error", translateParams, templateContext) {
    const notification = this.createNotification(content, type, translateParams, templateContext);
    this.notificationsSubject.next([...this.notificationsSubject.getValue(), notification]);
    return notification.dismissFn;
  }
  createNotification(content, type, translateParams, templateContext) {
    const id = (/* @__PURE__ */ new Date()).getTime().toString() + Math.random().toString();
    return {
      id,
      [typeof content === "string" ? "text" : "template"]: content,
      type,
      translateParams,
      templateContext,
      dismissFn: () => this.removeNotification(id)
    };
  }
  removeNotification(id) {
    const notifications = this.notificationsSubject.getValue();
    const index = notifications.findIndex((n) => n.id === id);
    if (index === -1) {
      return;
    }
    notifications.splice(index, 1);
    this.notificationsSubject.next([...notifications]);
  }
};
NotificationService.ɵfac = function NotificationService_Factory(t2) {
  return new (t2 || NotificationService)();
};
NotificationService.ɵprov = ɵɵdefineInjectable({
  token: NotificationService,
  factory: NotificationService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NotificationService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [];
  }, null);
})();
var ChatClientService = class {
  constructor(ngZone, notificationService) {
    this.ngZone = ngZone;
    this.notificationService = notificationService;
    this.notificationSubject = new ReplaySubject(1);
    this.connectionStateSubject = new ReplaySubject(1);
    this.appSettingsSubject = new BehaviorSubject(void 0);
    this.pendingInvitesSubject = new BehaviorSubject([]);
    this.userSubject = new ReplaySubject(1);
    this.subscriptions = [];
    this.events$ = this.notificationSubject.asObservable();
    this.connectionState$ = this.connectionStateSubject.asObservable();
    this.appSettings$ = this.appSettingsSubject.asObservable();
    this.pendingInvites$ = this.pendingInvitesSubject.asObservable();
    this.user$ = this.userSubject.asObservable();
  }
  /**
   * Creates a [`StreamChat`](https://github.com/GetStream/stream-chat-js/blob/668b3e5521339f4e14fc657834531b4c8bf8176b/src/client.ts#L124) instance using the provided `apiKey`, and connects a user with the given meta data and token. More info about [connecting users](https://getstream.io/chat/docs/javascript/init_and_users/?language=javascript) can be found in the platform documentation.
   * @param apiKey
   * @param userOrId you can emit this for anonymous logins
   * @param userTokenOrProvider You can provide:<ul>
   *  <li> a token, </li>
   *  <li> a token provider, a method that returns `Promise<string>`, which can be called when the previous token expires (recommended setup for production applications)</li>
   *  <li> the keyword 'guest' to connect as [guest user](https://getstream.io/chat/docs/javascript/authless_users/?language=javascript#guest-users) </li>
   *  <li> the keyword 'anonymous' to connect as [anonymous user](https://getstream.io/chat/docs/javascript/authless_users/?language=javascript#anonymous-users) </li>
   *  </ul>
   * @param clientOptions Setting to provide to the Stream client instance
   */
  init(apiKey, userOrId, userTokenOrProvider, clientOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      this.chatClient = StreamChat.getInstance(apiKey, clientOptions);
      this.chatClient.recoverStateOnReconnect = false;
      this.chatClient.devToken;
      let result;
      yield this.ngZone.runOutsideAngular(() => __awaiter(this, void 0, void 0, function* () {
        var _b;
        const user = typeof userOrId === "string" ? {
          id: userOrId
        } : userOrId;
        try {
          result = yield ((_b = {
            guest: () => this.chatClient.setGuestUser(user),
            anonymous: () => this.chatClient.connectAnonymousUser()
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
          }[`${userTokenOrProvider}`]) !== null && _b !== void 0 ? _b : () => this.chatClient.connectUser(user, userTokenOrProvider))();
        } catch (error) {
          this.notificationService.addPermanentNotification("streamChat.Error connecting to chat, refresh the page to try again.", "error");
          throw error;
        }
        this.userSubject.next(this.chatClient.user ? Object.assign({}, this.chatClient.user) : void 0);
        const sdkPrefix = "stream-chat-angular";
        if (!this.chatClient.getUserAgent().includes(sdkPrefix)) {
          this.chatClient.setUserAgent(`${sdkPrefix}-${version}-${this.chatClient.getUserAgent()}`);
        }
      }));
      const channels = yield this.chatClient.queryChannels(
        {
          invite: "pending"
        },
        // TODO: find out why we need this typecast
        {},
        {
          user_id: (_a = this.chatClient.user) === null || _a === void 0 ? void 0 : _a.id
        }
      );
      this.pendingInvitesSubject.next(channels);
      this.appSettingsSubject.next(void 0);
      this.subscriptions.push(this.chatClient.on((e2) => {
        this.updateUser(e2);
        this.updatePendingInvites(e2);
        this.notificationSubject.next({
          eventType: e2.type,
          event: e2
        });
      }));
      let removeNotification;
      this.subscriptions.push(this.chatClient.on("connection.changed", (e2) => {
        this.ngZone.run(() => {
          const isOnline2 = e2.online;
          if (isOnline2) {
            if (removeNotification) {
              removeNotification();
            }
          } else {
            removeNotification = this.notificationService.addPermanentNotification("streamChat.Connection failure, reconnecting now...");
          }
          this.connectionStateSubject.next(isOnline2 ? "online" : "offline");
        });
      }));
      return result;
    });
  }
  /**
   * Disconnects the current user, and closes the WebSocket connection. Useful when disconnecting a chat user, use in combination with [`reset`](./ChannelService.mdx/#reset).
   */
  disconnectUser() {
    return __awaiter(this, void 0, void 0, function* () {
      this.pendingInvitesSubject.next([]);
      yield this.chatClient.disconnectUser();
      this.userSubject.next(void 0);
      this.subscriptions.forEach((s2) => s2.unsubscribe());
    });
  }
  /**
   * Loads the current [application settings](https://getstream.io/chat/docs/javascript/app_setting_overview/?language=javascript), if the application settings have already been loaded, it does nothing.
   */
  getAppSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.appSettingsSubject.getValue()) {
        return;
      }
      const settings = yield this.chatClient.getAppSettings();
      this.appSettingsSubject.next(settings.app || {});
    });
  }
  /**
   * Flag the message with the given ID. If you want to know [more about flags](https://getstream.io/chat/docs/javascript/moderation/?language=javascript) check out the platform documentation.
   * @param messageId
   */
  flagMessage(messageId) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.chatClient.flagMessage(messageId);
    });
  }
  /**
   * Searches for users in the application that have ID or name matching the provided search term
   * @param searchTerm
   * @returns The users matching the search
   */
  autocompleteUsers(searchTerm) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!searchTerm) {
        return [];
      }
      const result = yield this.chatClient.queryUsers({
        $or: [{
          id: {
            $autocomplete: searchTerm
          }
        }, {
          name: {
            $autocomplete: searchTerm
          }
        }],
        id: {
          $ne: this.chatClient.userID
        }
      });
      return result.users;
    });
  }
  updatePendingInvites(e2) {
    var _a, _b, _c;
    if (((_b = (_a = e2.member) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.id) === ((_c = this.chatClient.user) === null || _c === void 0 ? void 0 : _c.id) && e2.channel) {
      const pendingInvites = this.pendingInvitesSubject.getValue();
      if (e2.type === "notification.invited") {
        this.pendingInvitesSubject.next([...pendingInvites, e2.channel]);
      } else if (e2.type === "notification.invite_accepted" || e2.type === "notification.invite_rejected") {
        const index = pendingInvites.findIndex((i) => {
          var _a2;
          return (i === null || i === void 0 ? void 0 : i.cid) === ((_a2 = e2.channel) === null || _a2 === void 0 ? void 0 : _a2.cid);
        });
        if (index !== -1) {
          pendingInvites.splice(index, 1);
          this.pendingInvitesSubject.next([...pendingInvites]);
        }
      }
    }
  }
  updateUser(e2) {
    var _a;
    if (typeof e2.total_unread_count !== "undefined") {
      let user;
      this.userSubject.pipe(take(1)).subscribe((u) => {
        user = u;
      });
      if (user && user.total_unread_count !== e2.total_unread_count) {
        this.userSubject.next(Object.assign(Object.assign({}, user), {
          total_unread_count: e2.total_unread_count
        }));
      }
    }
    if (typeof e2.unread_channels !== "undefined") {
      let user;
      this.userSubject.pipe(take(1)).subscribe((u) => {
        user = u;
      });
      if (user && user.unread_channels !== e2.unread_channels) {
        this.userSubject.next(Object.assign(Object.assign({}, user), {
          unread_channels: e2.unread_channels
        }));
      }
    }
    if (typeof e2.unread_count !== "undefined") {
      let user;
      this.userSubject.pipe(take(1)).subscribe((u) => {
        user = u;
      });
      if (user && user.unread_count !== e2.unread_count) {
        this.userSubject.next(Object.assign(Object.assign({}, user), {
          unread_count: e2.unread_count
        }));
      }
    }
    if (e2.type === "user.updated" && this.chatClient.user && ((_a = e2.user) === null || _a === void 0 ? void 0 : _a.id) === this.chatClient.user.id) {
      this.userSubject.next(Object.assign({}, this.chatClient.user));
    }
  }
};
ChatClientService.ɵfac = function ChatClientService_Factory(t2) {
  return new (t2 || ChatClientService)(ɵɵinject(NgZone), ɵɵinject(NotificationService));
};
ChatClientService.ɵprov = ɵɵdefineInjectable({
  token: ChatClientService,
  factory: ChatClientService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChatClientService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [{
      type: NgZone
    }, {
      type: NotificationService
    }];
  }, null);
})();
var getMessageTranslation = (message, channel, user) => {
  var _a, _b;
  const language = (user === null || user === void 0 ? void 0 : user.language) || ((_a = channel === null || channel === void 0 ? void 0 : channel.data) === null || _a === void 0 ? void 0 : _a.auto_translation_language);
  if (language && (message === null || message === void 0 ? void 0 : message.i18n) && ((_b = message === null || message === void 0 ? void 0 : message.user) === null || _b === void 0 ? void 0 : _b.id) !== (user === null || user === void 0 ? void 0 : user.id)) {
    return message.i18n[`${language}_text`];
  } else {
    return void 0;
  }
};
var createMessagePreview = (user, text, attachments = [], mentionedUsers = [], parentId = void 0, quotedMessageId = void 0, customData) => {
  const clientSideId = `${user.id}-${v4_default()}`;
  return Object.assign({
    __html: text,
    created_at: /* @__PURE__ */ new Date(),
    html: text,
    id: clientSideId,
    reactions: [],
    status: "sending",
    text,
    type: "regular",
    user,
    attachments,
    mentioned_users: mentionedUsers,
    parent_id: parentId,
    quoted_message_id: quotedMessageId
  }, customData);
};
var getReadBy = (message, channel) => {
  const readBy = [];
  Object.keys(channel.state.read).forEach((key) => {
    var _a;
    if (channel.state.read[key].last_read.getTime() >= message.created_at.getTime() && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== key) {
      readBy.push(channel.state.read[key].user);
    }
  });
  return readBy;
};
var ChannelService = class _ChannelService {
  constructor(chatClientService, ngZone, notificationService) {
    this.chatClientService = chatClientService;
    this.ngZone = ngZone;
    this.notificationService = notificationService;
    this.channelsSubject = new BehaviorSubject(void 0);
    this.activeChannelSubject = new BehaviorSubject(void 0);
    this.activeChannelMessagesSubject = new BehaviorSubject([]);
    this.activeChannelPinnedMessagesSubject = new BehaviorSubject([]);
    this.hasMoreChannelsSubject = new ReplaySubject(1);
    this.activeChannelSubscriptions = [];
    this.channelSubscriptions = {};
    this.activeParentMessageIdSubject = new BehaviorSubject(void 0);
    this.activeThreadMessagesSubject = new BehaviorSubject([]);
    this.jumpToMessageSubject = new BehaviorSubject({
      id: void 0,
      parentId: void 0
    });
    this.latestMessageDateByUserByChannelsSubject = new BehaviorSubject({});
    this.messagePageSize = 25;
    this.messageToQuoteSubject = new BehaviorSubject(void 0);
    this.usersTypingInChannelSubject = new BehaviorSubject([]);
    this.usersTypingInThreadSubject = new BehaviorSubject([]);
    this._shouldMarkActiveChannelAsRead = true;
    this.isStateRecoveryInProgress = false;
    this.channelQueryStateSubject = new BehaviorSubject(void 0);
    this.channelListSetter = (channels, shouldStopWatchingRemovedChannels = true) => {
      const currentChannels = this.channelsSubject.getValue() || [];
      const newChannels = channels.filter((c) => !currentChannels.find((channel) => channel.cid === c.cid));
      const deletedChannels = currentChannels.filter((c) => !(channels === null || channels === void 0 ? void 0 : channels.find((channel) => channel.cid === c.cid)));
      void this.addChannelsFromNotification(newChannels);
      this.removeChannelsFromChannelList(deletedChannels.map((c) => c.cid), shouldStopWatchingRemovedChannels);
    };
    this.messageListSetter = (messages) => {
      this.activeChannelMessagesSubject.next(messages);
    };
    this.threadListSetter = (messages) => {
      this.activeThreadMessagesSubject.next(messages);
    };
    this.parentMessageSetter = (message) => {
      this.activeParentMessageIdSubject.next(message === null || message === void 0 ? void 0 : message.id);
    };
    this.channels$ = this.channelsSubject.asObservable().pipe(shareReplay(1));
    this.activeChannel$ = this.activeChannelSubject.asObservable().pipe(shareReplay(1));
    this.activeChannelMessages$ = this.activeChannelMessagesSubject.pipe(map((messages) => {
      const channel = this.activeChannelSubject.getValue();
      return messages.map((message) => this.transformToStreamMessage(message, channel));
    }), shareReplay(1));
    this.hasMoreChannels$ = this.hasMoreChannelsSubject.asObservable().pipe(shareReplay(1));
    this.activeParentMessageId$ = this.activeParentMessageIdSubject.asObservable().pipe(shareReplay(1));
    this.activeThreadMessages$ = this.activeThreadMessagesSubject.pipe(map((messages) => {
      const channel = this.activeChannelSubject.getValue();
      return messages.map((message) => this.transformToStreamMessage(message, channel));
    }), shareReplay(1));
    this.activeParentMessage$ = combineLatest([this.activeChannelMessages$, this.activeParentMessageId$]).pipe(map(([messages, parentMessageId]) => {
      if (!parentMessageId) {
        return void 0;
      } else {
        const message = messages.find((m) => m.id === parentMessageId);
        if (!message) {
          void this.setAsActiveParentMessage(void 0);
          return void 0;
        } else {
          return message;
        }
      }
    }), shareReplay(1));
    this.messageToQuote$ = this.messageToQuoteSubject.asObservable().pipe(shareReplay(1));
    this.jumpToMessage$ = this.jumpToMessageSubject.asObservable().pipe(shareReplay(1));
    this.usersTypingInChannel$ = this.usersTypingInChannelSubject.asObservable().pipe(shareReplay(1));
    this.usersTypingInThread$ = this.usersTypingInThreadSubject.asObservable().pipe(shareReplay(1));
    this.latestMessageDateByUserByChannels$ = this.latestMessageDateByUserByChannelsSubject.asObservable().pipe(shareReplay(1));
    this.activeChannelPinnedMessages$ = this.activeChannelPinnedMessagesSubject.asObservable().pipe(shareReplay(1));
    this.channelQueryState$ = this.channelQueryStateSubject.asObservable().pipe(shareReplay(1));
  }
  /**
   * If set to false, read events won't be sent as new messages are received. If set to true active channel (if any) will immediately be marked as read.
   */
  get shouldMarkActiveChannelAsRead() {
    return this._shouldMarkActiveChannelAsRead;
  }
  /**
   * If set to false, read events won't be sent as new messages are received. If set to true active channel (if any) will immediately be marked as read.
   */
  set shouldMarkActiveChannelAsRead(shouldMarkActiveChannelAsRead) {
    if (!this._shouldMarkActiveChannelAsRead && shouldMarkActiveChannelAsRead) {
      const activeChannel = this.activeChannelSubject.getValue();
      if (activeChannel && this.canSendReadEvents) {
        void activeChannel.markRead();
      }
    }
    this._shouldMarkActiveChannelAsRead = shouldMarkActiveChannelAsRead;
  }
  /**
   * Sets the given `channel` as active and marks it as read.
   * If the channel wasn't previously part of the channel, it will be added to the beginning of the list.
   *
   * @param channel
   */
  setAsActiveChannel(channel) {
    var _a, _b, _c;
    const prevActiveChannel = this.activeChannelSubject.getValue();
    if ((prevActiveChannel === null || prevActiveChannel === void 0 ? void 0 : prevActiveChannel.cid) === channel.cid) {
      return;
    }
    this.stopWatchForActiveChannelEvents(prevActiveChannel);
    this.activeChannelLastReadMessageId = (_b = channel.state.read[((_a = this.chatClientService.chatClient.user) === null || _a === void 0 ? void 0 : _a.id) || ""]) === null || _b === void 0 ? void 0 : _b.last_read_message_id;
    if (((_c = channel.state.latestMessages[channel.state.latestMessages.length - 1]) === null || _c === void 0 ? void 0 : _c.id) === this.activeChannelLastReadMessageId) {
      this.activeChannelLastReadMessageId = void 0;
    }
    this.watchForActiveChannelEvents(channel);
    this.addChannel(channel);
    this.activeChannelSubject.next(channel);
    const channelStateLength = channel.state.latestMessages.length;
    if (channelStateLength > 2 * this.messagePageSize) {
      channel.state.latestMessages = channel.state.latestMessages.slice(channelStateLength - 2 * this.messagePageSize);
    }
    this.setChannelState(channel);
  }
  /**
   * Deselects the currently active (if any) channel
   */
  deselectActiveChannel() {
    const activeChannel = this.activeChannelSubject.getValue();
    if (!activeChannel) {
      return;
    }
    this.stopWatchForActiveChannelEvents(activeChannel);
    this.activeChannelMessagesSubject.next([]);
    this.activeChannelSubject.next(void 0);
    this.activeParentMessageIdSubject.next(void 0);
    this.activeThreadMessagesSubject.next([]);
    this.latestMessageDateByUserByChannelsSubject.next({});
    this.selectMessageToQuote(void 0);
    this.jumpToMessageSubject.next({
      id: void 0,
      parentId: void 0
    });
    this.activeChannelPinnedMessagesSubject.next([]);
    this.usersTypingInChannelSubject.next([]);
    this.usersTypingInThreadSubject.next([]);
    this.activeChannelLastReadMessageId = void 0;
  }
  /**
   * Sets the given `message` as an active parent message. If `undefined` is provided, it will deleselect the current parent message.
   * @param message
   * @param loadMessagesForm
   */
  setAsActiveParentMessage(message, loadMessagesForm = "request") {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const messageToQuote = this.messageToQuoteSubject.getValue();
      if (messageToQuote && !!messageToQuote.parent_id) {
        this.messageToQuoteSubject.next(void 0);
      }
      if (!message) {
        this.activeParentMessageIdSubject.next(void 0);
        this.activeThreadMessagesSubject.next([]);
        const messageToJumpTo = this.jumpToMessageSubject.getValue();
        if (messageToJumpTo && !!messageToJumpTo.parentId) {
          this.jumpToMessageSubject.next({
            id: void 0,
            parentId: void 0
          });
        }
      } else {
        this.activeParentMessageIdSubject.next(message.id);
        const activeChannel = this.activeChannelSubject.getValue();
        if (loadMessagesForm === "request") {
          const result = yield activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.getReplies(message.id, {
            limit: (_a = this.options) === null || _a === void 0 ? void 0 : _a.message_limit
          });
          this.activeThreadMessagesSubject.next((result === null || result === void 0 ? void 0 : result.messages) || []);
        } else {
          this.activeThreadMessagesSubject.next((activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.state.threads[message.id]) || []);
        }
      }
    });
  }
  /**
   * Loads the next page of messages of the active channel. The page size can be set in the [query option](https://getstream.io/chat/docs/javascript/query_channels/?language=javascript#query-options) object.
   * @param direction
   */
  loadMoreMessages(direction = "older") {
    var _a, _b, _c, _d;
    const activeChnannel = this.activeChannelSubject.getValue();
    const messages = this.activeChannelMessagesSubject.getValue();
    const lastMessageId = (_a = messages[direction === "older" ? 0 : messages.length - 1]) === null || _a === void 0 ? void 0 : _a.id;
    if (direction === "newer" && ((_b = activeChnannel === null || activeChnannel === void 0 ? void 0 : activeChnannel.state) === null || _b === void 0 ? void 0 : _b.latestMessages) === ((_c = activeChnannel === null || activeChnannel === void 0 ? void 0 : activeChnannel.state) === null || _c === void 0 ? void 0 : _c.messages)) {
      return false;
    }
    return activeChnannel === null || activeChnannel === void 0 ? void 0 : activeChnannel.query({
      messages: {
        limit: (_d = this.options) === null || _d === void 0 ? void 0 : _d.message_limit,
        [direction === "older" ? "id_lt" : "id_gt"]: lastMessageId
      },
      members: {
        limit: 0
      },
      watchers: {
        limit: 0
      }
    }).then((res) => {
      var _a2, _b2, _c40;
      if (((_a2 = activeChnannel === null || activeChnannel === void 0 ? void 0 : activeChnannel.data) === null || _a2 === void 0 ? void 0 : _a2.id) === ((_c40 = (_b2 = this.activeChannelSubject.getValue()) === null || _b2 === void 0 ? void 0 : _b2.data) === null || _c40 === void 0 ? void 0 : _c40.id)) {
        this.activeChannelMessagesSubject.next([...activeChnannel.state.messages]);
      }
      return res;
    });
  }
  /**
   * Loads the next page of messages of the active thread. The page size can be set in the [query option](https://getstream.io/chat/docs/javascript/query_channels/?language=javascript#query-options) object.
   * @param direction
   */
  loadMoreThreadReplies(direction = "older") {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
      if (direction === "newer") {
        return;
      }
      const activeChnannel = this.activeChannelSubject.getValue();
      const parentMessageId = this.activeParentMessageIdSubject.getValue();
      if (!parentMessageId) {
        return;
      }
      const threadMessages = this.activeThreadMessagesSubject.getValue();
      const lastMessageId = (_a = threadMessages[direction === "older" ? 0 : threadMessages.length - 1]) === null || _a === void 0 ? void 0 : _a.id;
      yield activeChnannel === null || activeChnannel === void 0 ? void 0 : activeChnannel.getReplies(parentMessageId, {
        limit: (_b = this.options) === null || _b === void 0 ? void 0 : _b.message_limit,
        [direction === "older" ? "id_lt" : "id_gt"]: lastMessageId
      });
      this.activeThreadMessagesSubject.next((activeChnannel === null || activeChnannel === void 0 ? void 0 : activeChnannel.state.threads[parentMessageId]) || []);
    });
  }
  /**
   * Queries the channels with the given filters, sorts and options. More info about [channel querying](https://getstream.io/chat/docs/javascript/query_channels/?language=javascript) can be found in the platform documentation. By default the first channel in the list will be set as active channel and will be marked as read.
   * @param filters
   * @param sort
   * @param options
   * @param shouldSetActiveChannel Decides if the first channel in the result should be made as an active channel, or no channel should be marked as active
   * @returns the list of channels found by the query
   */
  init(filters, sort, options, shouldSetActiveChannel = true) {
    return __awaiter(this, void 0, void 0, function* () {
      this.filters = filters;
      this.options = Object.assign({
        limit: 25,
        state: true,
        presence: true,
        watch: true,
        message_limit: this.messagePageSize
      }, options);
      this.sort = sort || {
        last_message_at: -1
      };
      this.shouldSetActiveChannel = shouldSetActiveChannel;
      this.clientEventsSubscription = this.chatClientService.events$.subscribe((notification) => void this.handleNotification(notification));
      try {
        const result = yield this.queryChannels(this.shouldSetActiveChannel);
        return result;
      } catch (error) {
        this.dismissErrorNotification = this.notificationService.addPermanentNotification("streamChat.Error loading channels", "error");
        throw error;
      }
    });
  }
  /**
   * Resets the `activeChannel$`, `channels$` and `activeChannelMessages$` Observables. Useful when disconnecting a chat user, use in combination with [`disconnectUser`](./ChatClientService.mdx/#disconnectuser).
   */
  reset() {
    var _a, _b;
    this.deselectActiveChannel();
    this.channelsSubject.next(void 0);
    this.channelQueryStateSubject.next(void 0);
    (_a = this.clientEventsSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    (_b = this.dismissErrorNotification) === null || _b === void 0 ? void 0 : _b.call(this);
    this.dismissErrorNotification = void 0;
    Object.keys(this.channelSubscriptions).forEach((cid) => {
      this.channelSubscriptions[cid]();
    });
    this.channelSubscriptions = {};
    this.nextPageConfiguration = void 0;
  }
  /**
   * Loads the next page of channels. The page size can be set in the [query option](https://getstream.io/chat/docs/javascript/query_channels/?language=javascript#query-options) object.
   */
  loadMoreChannels() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.queryChannels(false);
    });
  }
  /**
   * Adds a reaction to a message.
   * @param messageId The id of the message to add the reaction to
   * @param reactionType The type of the reaction
   * @param customData
   */
  addReaction(messageId, reactionType, customData) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      yield (_a = this.activeChannelSubject.getValue()) === null || _a === void 0 ? void 0 : _a.sendReaction(messageId, Object.assign({
        type: reactionType
      }, customData));
    });
  }
  /**
   * Removes a reaction from a message.
   * @param messageId The id of the message to remove the reaction from
   * @param reactionType Thr type of reaction to remove
   */
  removeReaction(messageId, reactionType) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      yield (_a = this.activeChannelSubject.getValue()) === null || _a === void 0 ? void 0 : _a.deleteReaction(messageId, reactionType);
    });
  }
  /**
   * Sends a message to the active channel. The message is immediately added to the message list, if an error occurs and the message can't be sent, the error is indicated in `state` of the message.
   * @param text The text of the message
   * @param attachments The attachments
   * @param mentionedUsers Mentioned users
   * @param parentId Id of the parent message (if sending a thread reply)
   * @param quotedMessageId Id of the message to quote (if sending a quote reply)
   * @param customData
   */
  sendMessage(text, attachments = [], mentionedUsers = [], parentId = void 0, quotedMessageId = void 0, customData = void 0) {
    return __awaiter(this, void 0, void 0, function* () {
      let input = {
        text,
        attachments,
        mentionedUsers,
        parentId,
        quotedMessageId,
        customData
      };
      if (this.beforeSendMessage) {
        input = yield this.beforeSendMessage(input);
      }
      const preview = createMessagePreview(this.chatClientService.chatClient.user, input.text, input.attachments, input.mentionedUsers, input.parentId, input.quotedMessageId, input.customData);
      const channel = this.activeChannelSubject.getValue();
      preview.readBy = [];
      channel.state.addMessageSorted(preview, true);
      const response = yield this.sendMessageRequest(preview, input.customData);
      return response;
    });
  }
  /**
   * Resends the given message to the active channel
   * @param message The message to resend
   */
  resendMessage(message) {
    return __awaiter(this, void 0, void 0, function* () {
      const channel = this.activeChannelSubject.getValue();
      channel.state.addMessageSorted(Object.assign(Object.assign({}, message), {
        errorStatusCode: void 0,
        status: "sending"
      }), true);
      yield this.sendMessageRequest(message);
    });
  }
  /**
   * Updates the message in the active channel
   * @param message Mesage to be updated
   */
  updateMessage(message) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      let messageToUpdate = Object.assign({}, message);
      delete messageToUpdate.i18n;
      if (this.beforeUpdateMessage) {
        messageToUpdate = yield this.beforeUpdateMessage(messageToUpdate);
      }
      const response = yield this.chatClientService.chatClient.updateMessage(messageToUpdate);
      const channel = (_a = this.channelsSubject.getValue()) === null || _a === void 0 ? void 0 : _a.find((c) => c.cid === message.cid);
      return this.transformToStreamMessage(response.message, channel);
    });
  }
  /**
   * Deletes the message from the active channel
   * @param message Message to be deleted
   */
  deleteMessage(message) {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.messageDeleteConfirmationHandler) {
        const result = yield this.messageDeleteConfirmationHandler(message);
        if (result) {
          yield this.chatClientService.chatClient.deleteMessage(message.id);
        }
      } else {
        yield this.chatClientService.chatClient.deleteMessage(message.id);
      }
    });
  }
  /**
   * Uploads files to the channel. If you want to know more about [file uploads](https://getstream.io/chat/docs/javascript/file_uploads/?language=javascript) check out the platform documentation.
   * @param uploads the attachments to upload (output of the [`AttachmentService`](./AttachmentService.mdx))
   * @returns the result of file upload requests
   */
  uploadAttachments(uploads) {
    return __awaiter(this, void 0, void 0, function* () {
      const result = [];
      const channel = this.activeChannelSubject.getValue();
      const uploadResults = yield Promise.allSettled(uploads.map((upload) => upload.type === "image" ? this.customImageUploadRequest ? this.customImageUploadRequest(upload.file, channel) : channel.sendImage(upload.file, upload.file.name, upload.file.type) : this.customFileUploadRequest ? this.customFileUploadRequest(upload.file, channel) : channel.sendFile(upload.file, upload.file.name, upload.file.type)));
      uploadResults.forEach((uploadResult, i) => {
        var _a, _b, _c, _d, _e, _f, _g;
        const file = uploads[i].file;
        const type = uploads[i].type;
        if (uploadResult.status === "fulfilled") {
          result.push({
            file,
            type,
            state: "success",
            url: uploadResult.value.file,
            /* eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access */
            thumb_url: uploadResult.value.thumb_url
          });
        } else {
          let reason = "unknown";
          let extraData;
          const message = (
            /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */
            (_b = (_a = uploadResult.reason.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message
          );
          const code = (
            /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */
            (_d = (_c = uploadResult.reason.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.code
          );
          if (code === 22) {
            reason = "file-size";
            extraData = {
              param: ((_e = /\d+MB/.exec(message || "")) === null || _e === void 0 ? void 0 : _e[0]) || "100MB"
            };
          } else if (code === 4 && ((_f = message === null || message === void 0 ? void 0 : message.toLowerCase()) === null || _f === void 0 ? void 0 : _f.includes("file extension"))) {
            reason = "file-extension";
            extraData = {
              param: ((_g = /\.\w+/.exec(message)) === null || _g === void 0 ? void 0 : _g[0]) || ""
            };
          }
          result.push({
            file,
            type,
            state: "error",
            errorReason: reason,
            errorExtraInfo: extraData ? [extraData] : void 0
          });
        }
      });
      return result;
    });
  }
  /**
   * Deletes an uploaded file by URL. If you want to know more about [file uploads](https://getstream.io/chat/docs/javascript/file_uploads/?language=javascript) check out the platform documentation
   * @param attachmentUpload Attachment to be deleted (output of the [`AttachmentService`](./AttachmentService.mdx))
   */
  deleteAttachment(attachmentUpload) {
    return __awaiter(this, void 0, void 0, function* () {
      const channel = this.activeChannelSubject.getValue();
      yield attachmentUpload.type === "image" ? this.customImageDeleteRequest ? this.customImageDeleteRequest(attachmentUpload.url, channel) : channel.deleteImage(attachmentUpload.url) : this.customFileDeleteRequest ? this.customFileDeleteRequest(attachmentUpload.url, channel) : channel.deleteFile(attachmentUpload.url);
    });
  }
  /**
   * Returns the autocomplete options for current channel members. If the channel has less than 100 members, it returns the channel members, otherwise sends a [search request](https://getstream.io/chat/docs/javascript/query_members/?language=javascript#pagination-and-ordering) with the given search term.
   * @param searchTerm Text to search for in the names of members
   * @returns The list of members matching the search filter
   */
  autocompleteMembers(searchTerm) {
    return __awaiter(this, void 0, void 0, function* () {
      const activeChannel = this.activeChannelSubject.getValue();
      if (!activeChannel) {
        return [];
      }
      if (Object.keys(activeChannel.state.members).length < 100) {
        return Object.values(activeChannel.state.members).filter((m) => {
          var _a;
          return ((_a = m.user) === null || _a === void 0 ? void 0 : _a.id) !== this.chatClientService.chatClient.userID;
        });
      } else {
        if (!searchTerm) {
          return [];
        }
        const result = yield activeChannel.queryMembers({
          name: {
            $autocomplete: searchTerm
          },
          id: {
            $ne: this.chatClientService.chatClient.userID
          }
        });
        return Object.values(result.members);
      }
    });
  }
  /**
   * [Runs a message action](https://getstream.io/chat/docs/rest/#messages-runmessageaction) in the current channel. Updates the message list based on the action result (if no message is returned, the message will be removed from the message list).
   * @param messageId
   * @param formData
   * @param parentMessageId
   */
  sendAction(messageId, formData, parentMessageId) {
    return __awaiter(this, void 0, void 0, function* () {
      const channel = this.activeChannelSubject.getValue();
      const response = yield channel.sendAction(messageId, formData);
      if (response === null || response === void 0 ? void 0 : response.message) {
        channel.state.addMessageSorted(Object.assign(Object.assign({}, response.message), {
          status: "received"
        }));
        const isThreadReply = !!response.message.parent_id;
        isThreadReply ? this.activeThreadMessagesSubject.next([...channel.state.threads[response.message.parent_id]]) : this.activeChannelMessagesSubject.next([...channel.state.messages]);
      } else {
        channel.state.removeMessage({
          id: messageId,
          parent_id: parentMessageId
        });
        if (parentMessageId) {
          this.activeThreadMessagesSubject.next(channel.state.threads[this.activeParentMessageIdSubject.getValue()]);
        } else {
          this.activeChannelMessagesSubject.next([...channel.state.messages]);
        }
      }
    });
  }
  /**
   * Selects or deselects the current message to quote reply to
   * @param message The message to select, if called with `undefined`, it deselects the message
   */
  selectMessageToQuote(message) {
    this.messageToQuoteSubject.next(message);
  }
  /**
   * Add a new channel to the channel list
   * The channel will be added to the beginning of the channel list
   * @param channel
   */
  addChannel(channel) {
    if (!this.channels.find((c) => c.cid === channel.cid)) {
      this.channelsSubject.next([channel, ...this.channels]);
      this.watchForChannelEvents(channel);
    }
  }
  sendMessageRequest(preview, customData) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const channel = this.activeChannelSubject.getValue();
      const isThreadReply = !!preview.parent_id;
      isThreadReply ? this.activeThreadMessagesSubject.next([...channel.state.threads[preview.parent_id]]) : this.activeChannelMessagesSubject.next([...channel.state.messages]);
      try {
        const response = yield channel.sendMessage(Object.assign({
          id: preview.id,
          text: preview.text,
          attachments: preview.attachments,
          mentioned_users: (_a = preview.mentioned_users) === null || _a === void 0 ? void 0 : _a.map((u) => u.id),
          parent_id: preview.parent_id,
          quoted_message_id: preview.quoted_message_id
        }, customData));
        channel.state.addMessageSorted(Object.assign(Object.assign({}, response.message), {
          status: "received"
        }), true);
        isThreadReply ? this.activeThreadMessagesSubject.next([...channel.state.threads[preview.parent_id]]) : this.activeChannelMessagesSubject.next([...channel.state.messages]);
        let messages;
        (isThreadReply ? this.activeThreadMessages$ : this.activeChannelMessages$).pipe(take(1)).subscribe((m) => messages = m);
        const newMessage = messages[messages.length - 1];
        return newMessage;
      } catch (error) {
        const stringError = JSON.stringify(error);
        const parsedError = stringError ? JSON.parse(stringError) : {};
        channel.state.addMessageSorted(Object.assign(Object.assign({}, preview), {
          errorStatusCode: parsedError.status || void 0,
          status: "failed"
        }), true);
        isThreadReply ? this.activeThreadMessagesSubject.next([...channel.state.threads[preview.parent_id]]) : this.activeChannelMessagesSubject.next([...channel.state.messages]);
        let messages;
        (isThreadReply ? this.activeThreadMessages$ : this.activeChannelMessages$).pipe(take(1)).subscribe((m) => messages = m);
        const newMessage = messages[messages.length - 1];
        return newMessage;
      }
    });
  }
  /**
   * Jumps to the selected message inside the message list, if the message is not yet loaded, it'll load the message (and it's surroundings) from the API.
   * @param messageId The ID of the message to be loaded, 'latest' means jump to the latest messages
   * @param parentMessageId The ID of the parent message if we want to load a thread message
   */
  jumpToMessage(messageId, parentMessageId) {
    return __awaiter(this, void 0, void 0, function* () {
      const activeChannel = this.activeChannelSubject.getValue();
      try {
        yield activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.state.loadMessageIntoState(messageId, parentMessageId);
        const messages = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.state.messages) || [];
        this.activeChannelMessagesSubject.next([...messages]);
        if (parentMessageId) {
          const parentMessage = messages.find((m) => m.id === parentMessageId);
          void this.setAsActiveParentMessage(parentMessage, "state");
        }
        this.jumpToMessageSubject.next({
          id: messageId,
          parentId: parentMessageId
        });
      } catch (error) {
        this.notificationService.addTemporaryNotification("Message not found");
        throw error;
      }
    });
  }
  /**
   * Pins the given message in the channel
   * @param message
   */
  pinMessage(message) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      try {
        yield (_a = this.chatClientService.chatClient) === null || _a === void 0 ? void 0 : _a.pinMessage(message);
        this.notificationService.addTemporaryNotification("Message pinned", "success");
      } catch (error) {
        this.notificationService.addTemporaryNotification("Error pinning message");
        throw error;
      }
    });
  }
  /**
   * Removes the given message from pinned messages
   * @param message
   */
  unpinMessage(message) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      try {
        yield (_a = this.chatClientService.chatClient) === null || _a === void 0 ? void 0 : _a.unpinMessage(message);
        this.notificationService.addTemporaryNotification("Message unpinned", "success");
      } catch (error) {
        this.notificationService.addTemporaryNotification("Error removing message pin");
        throw error;
      }
    });
  }
  handleNotification(clientEvent) {
    switch (clientEvent.eventType) {
      case "connection.recovered": {
        void this.ngZone.run(() => __awaiter(this, void 0, void 0, function* () {
          if (this.isStateRecoveryInProgress) {
            return;
          }
          this.isStateRecoveryInProgress = true;
          try {
            this.nextPageConfiguration = void 0;
            const shoulSetActiveChannel = this.shouldSetActiveChannel && !this.activeChannelSubject.getValue();
            yield this.queryChannels(shoulSetActiveChannel || false, true);
            if (this.activeChannelSubject.getValue()) {
              void this.setAsActiveParentMessage(void 0);
              const messageToQuote = this.messageToQuoteSubject.getValue();
              this.setChannelState(this.activeChannelSubject.getValue());
              let messages;
              this.activeChannelMessages$.pipe(take(1)).subscribe((m) => messages = m);
              const updatedMessageToQuote = messages.find((m) => m.id === (messageToQuote === null || messageToQuote === void 0 ? void 0 : messageToQuote.id));
              if (updatedMessageToQuote) {
                this.selectMessageToQuote(updatedMessageToQuote);
              }
            }
            this.isStateRecoveryInProgress = false;
          } catch (_a) {
            this.isStateRecoveryInProgress = false;
          }
        }));
        break;
      }
      case "notification.message_new": {
        this.ngZone.run(() => {
          if (this.customNewMessageNotificationHandler) {
            this.customNewMessageNotificationHandler(clientEvent, this.channelListSetter);
          } else {
            this.handleNewMessageNotification(clientEvent);
          }
        });
        break;
      }
      case "notification.added_to_channel": {
        this.ngZone.run(() => {
          if (this.customAddedToChannelNotificationHandler) {
            this.customAddedToChannelNotificationHandler(clientEvent, this.channelListSetter);
          } else {
            this.handleAddedToChannelNotification(clientEvent);
          }
        });
        break;
      }
      case "notification.removed_from_channel": {
        this.ngZone.run(() => {
          if (this.customRemovedFromChannelNotificationHandler) {
            this.customRemovedFromChannelNotificationHandler(clientEvent, this.channelListSetter);
          } else {
            this.handleRemovedFromChannelNotification(clientEvent);
          }
        });
        break;
      }
      case "user.updated": {
        this.ngZone.run(() => {
          var _a;
          const updatedChannels = (_a = this.channelsSubject.getValue()) === null || _a === void 0 ? void 0 : _a.map((c) => {
            if (this.chatClientService.chatClient.activeChannels[c.cid]) {
              return this.chatClientService.chatClient.activeChannels[c.cid];
            } else {
              return c;
            }
          });
          this.channelsSubject.next(updatedChannels);
          const activeChannel = this.activeChannelSubject.getValue();
          if (activeChannel) {
            this.activeChannelSubject.next(this.chatClientService.chatClient.activeChannels[activeChannel.cid] || activeChannel);
            this.activeChannelMessagesSubject.next(activeChannel.state.messages.map((m) => {
              m.readBy = getReadBy(m, activeChannel);
              return Object.assign({}, m);
            }));
            const activeParentMessage = this.activeParentMessageIdSubject.getValue();
            if (activeParentMessage) {
              const messages = activeChannel.state.threads[activeParentMessage];
              this.activeThreadMessagesSubject.next([...messages]);
            }
            this.activeChannelPinnedMessagesSubject.next([...activeChannel.state.pinnedMessages]);
          }
        });
        break;
      }
    }
  }
  handleRemovedFromChannelNotification(clientEvent) {
    const channelIdToBeRemoved = clientEvent.event.channel.cid;
    this.removeChannelsFromChannelList([channelIdToBeRemoved], true);
  }
  handleNewMessageNotification(clientEvent) {
    if (clientEvent.event.channel) {
      void this.addChannelsFromNotification([clientEvent.event.channel]);
    }
  }
  handleAddedToChannelNotification(clientEvent) {
    if (clientEvent.event.channel) {
      void this.addChannelsFromNotification([clientEvent.event.channel]);
    }
  }
  addChannelsFromNotification(channelResponses) {
    return __awaiter(this, void 0, void 0, function* () {
      let newChannels = [];
      const watchRequests = [];
      channelResponses.forEach((channelResponse) => {
        const channel = this.chatClientService.chatClient.channel(channelResponse.type, channelResponse.id);
        watchRequests.push(channel.watch());
        newChannels.push(channel);
      });
      yield Promise.all(watchRequests);
      const currentChannels = this.channelsSubject.getValue() || [];
      newChannels = newChannels.filter((newChannel) => !currentChannels.find((c) => c.cid === newChannel.cid));
      if (newChannels.length > 0) {
        newChannels.forEach((c) => this.watchForChannelEvents(c));
        this.channelsSubject.next([...newChannels, ...currentChannels]);
      }
    });
  }
  removeChannelsFromChannelList(cids, shouldStopWatching) {
    var _a;
    const channels = this.channels.filter((c) => !cids.includes(c.cid || ""));
    if (shouldStopWatching) {
      cids.forEach((cid) => {
        var _a2;
        if (this.channelSubscriptions[cid]) {
          this.channelSubscriptions[cid]();
          delete this.channelSubscriptions.cid;
        }
        void ((_a2 = this.chatClientService.chatClient.activeChannels[cid]) === null || _a2 === void 0 ? void 0 : _a2.stopWatching());
      });
    }
    if (channels.length < this.channels.length) {
      this.channelsSubject.next(channels);
      if (cids.includes(((_a = this.activeChannelSubject.getValue()) === null || _a === void 0 ? void 0 : _a.cid) || "")) {
        if (channels.length > 0) {
          this.setAsActiveChannel(channels[0]);
        } else {
          this.activeChannelSubject.next(void 0);
        }
      }
    }
  }
  watchForActiveChannelEvents(channel) {
    this.activeChannelSubscriptions.push(channel.on("message.new", (event) => {
      this.ngZone.run(() => {
        event.message && event.message.parent_id ? event.message.parent_id === this.activeParentMessageIdSubject.getValue() ? this.activeThreadMessagesSubject.next([...channel.state.threads[event.message.parent_id]]) : null : this.activeChannelMessagesSubject.next([...channel.state.messages]);
        this.activeChannel$.pipe(first()).subscribe((c) => {
          if (c) {
            this.markRead(c);
          }
        });
        this.updateLatestMessages(event);
      });
    }));
    this.activeChannelSubscriptions.push(channel.on("message.updated", (event) => this.messageUpdated(event)));
    this.activeChannelSubscriptions.push(channel.on("message.deleted", (event) => this.messageUpdated(event)));
    this.activeChannelSubscriptions.push(channel.on("reaction.new", (e2) => this.messageReactionEventReceived(e2)));
    this.activeChannelSubscriptions.push(channel.on("reaction.deleted", (e2) => this.messageReactionEventReceived(e2)));
    this.activeChannelSubscriptions.push(channel.on("reaction.updated", (e2) => this.messageReactionEventReceived(e2)));
    this.activeChannelSubscriptions.push(channel.on("message.read", (e2) => {
      this.ngZone.run(() => {
        let latestMessage;
        let messages;
        this.activeChannelMessages$.pipe(first()).subscribe((m) => {
          messages = m;
          latestMessage = messages[messages.length - 1];
        });
        if (!latestMessage || !e2.user) {
          return;
        }
        if (latestMessage.readBy) {
          latestMessage.readBy.splice(0, latestMessage.readBy.length);
        } else {
          latestMessage.readBy = [];
        }
        latestMessage.readBy.push(...getReadBy(latestMessage, channel));
        messages[messages.length - 1] = Object.assign({}, latestMessage);
        this.activeChannelMessagesSubject.next([...messages]);
      });
    }));
    this.activeChannelSubscriptions.push(channel.on("typing.start", (e2) => this.ngZone.run(() => this.handleTypingStartEvent(e2))));
    this.activeChannelSubscriptions.push(channel.on("typing.stop", (e2) => this.ngZone.run(() => this.handleTypingStopEvent(e2))));
  }
  /**
   * Call this method if user started typing in the active channel
   * @param parentId The id of the parent message, if user is typing in a thread
   */
  typingStarted(parentId) {
    return __awaiter(this, void 0, void 0, function* () {
      const activeChannel = this.activeChannelSubject.getValue();
      yield activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.keystroke(parentId);
    });
  }
  /**
   * Call this method if user stopped typing in the active channel
   * @param parentId The id of the parent message, if user were typing in a thread
   */
  typingStopped(parentId) {
    return __awaiter(this, void 0, void 0, function* () {
      const activeChannel = this.activeChannelSubject.getValue();
      yield activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.stopTyping(parentId);
    });
  }
  /**
   * The current list of channels
   */
  get channels() {
    return this.channelsSubject.getValue() || [];
  }
  /**
   * The current active channel
   */
  get activeChannel() {
    return this.activeChannelSubject.getValue() || void 0;
  }
  /**
   * The current active channel messages
   */
  get activeChannelMessages() {
    return this.activeChannelMessagesSubject.getValue() || [];
  }
  /**
   * Get the last 1200 reactions of a message in the current active channel. If you need to fetch more reactions please use the [following endpoint](https://getstream.io/chat/docs/javascript/send_reaction/?language=javascript#paginating-reactions).
   * @param messageId
   * @returns all reactions of a message
   */
  getMessageReactions(messageId) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
      const reactions = [];
      const limit = 300;
      let offset2 = 0;
      const reactionsLimit = _ChannelService.MAX_MESSAGE_REACTIONS_TO_FETCH;
      let lastPageSize = limit;
      while (lastPageSize === limit && reactions.length < reactionsLimit) {
        try {
          const response = yield (_a = this.activeChannel) === null || _a === void 0 ? void 0 : _a.getReactions(messageId, {
            offset: offset2,
            limit
          });
          lastPageSize = ((_b = response === null || response === void 0 ? void 0 : response.reactions) === null || _b === void 0 ? void 0 : _b.length) || 0;
          if (lastPageSize > 0) {
            reactions.push(...response.reactions);
          }
          offset2 += lastPageSize;
        } catch (e2) {
          this.notificationService.addTemporaryNotification("Error loading reactions");
          throw e2;
        }
      }
      return reactions;
    });
  }
  messageUpdated(event) {
    this.ngZone.run(() => {
      var _a;
      const isThreadReply = event.message && event.message.parent_id;
      const channel = this.activeChannelSubject.getValue();
      if (!channel) {
        return;
      }
      const messages = isThreadReply ? channel.state.threads[((_a = event === null || event === void 0 ? void 0 : event.message) === null || _a === void 0 ? void 0 : _a.parent_id) || ""] : channel.state.messages;
      if (!messages) {
        return;
      }
      const messageIndex = messages.findIndex((m) => {
        var _a2;
        return m.id === ((_a2 = event === null || event === void 0 ? void 0 : event.message) === null || _a2 === void 0 ? void 0 : _a2.id);
      });
      if (messageIndex !== -1) {
        isThreadReply ? this.activeThreadMessagesSubject.next([...messages]) : this.activeChannelMessagesSubject.next([...messages]);
        this.activeChannelPinnedMessagesSubject.next([...channel.state.pinnedMessages]);
      }
    });
  }
  messageReactionEventReceived(e2) {
    this.ngZone.run(() => {
      var _a, _b, _c, _d;
      const isThreadMessage = e2.message && e2.message.parent_id;
      let messages;
      (isThreadMessage ? this.activeThreadMessages$ : this.activeChannelMessages$).pipe(first()).subscribe((m) => messages = m);
      const messageIndex = messages.findIndex((m) => {
        var _a2;
        return m.id === ((_a2 = e2 === null || e2 === void 0 ? void 0 : e2.message) === null || _a2 === void 0 ? void 0 : _a2.id);
      });
      if (messageIndex === -1) {
        return;
      }
      const message = messages[messageIndex];
      message.reaction_counts = Object.assign({}, (_a = e2.message) === null || _a === void 0 ? void 0 : _a.reaction_counts);
      message.reaction_scores = Object.assign({}, (_b = e2.message) === null || _b === void 0 ? void 0 : _b.reaction_scores);
      message.latest_reactions = [...((_c = e2.message) === null || _c === void 0 ? void 0 : _c.latest_reactions) || []];
      message.own_reactions = [...((_d = e2.message) === null || _d === void 0 ? void 0 : _d.own_reactions) || []];
      messages[messageIndex] = Object.assign({}, message);
      isThreadMessage ? this.activeThreadMessagesSubject.next([...messages]) : this.activeChannelMessagesSubject.next([...messages]);
    });
  }
  formatMessage(message) {
    const m = message;
    m.pinned_at = message.pinned_at ? new Date(message.pinned_at) : null;
    m.created_at = message.created_at ? new Date(message.created_at) : /* @__PURE__ */ new Date();
    m.updated_at = message.updated_at ? new Date(message.updated_at) : /* @__PURE__ */ new Date();
    message.status = message.status || "received";
    return m;
  }
  isStreamMessage(message) {
    return !!message.readBy;
  }
  isFormatMessageResponse(message) {
    return message.created_at instanceof Date;
  }
  stopWatchForActiveChannelEvents(channel) {
    if (!channel) {
      return;
    }
    this.activeChannelSubscriptions.forEach((s2) => s2.unsubscribe());
    this.activeChannelSubscriptions = [];
  }
  queryChannels(shouldSetActiveChannel, recoverState = false) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
      try {
        this.channelQueryStateSubject.next({
          state: "in-progress"
        });
        let filters;
        let options;
        if (this.nextPageConfiguration) {
          if (this.nextPageConfiguration.type === "filter") {
            filters = Object.assign(Object.assign({}, this.filters), this.nextPageConfiguration.paginationFilter);
            options = this.options;
          } else {
            options = Object.assign(Object.assign({}, this.options), {
              offset: this.nextPageConfiguration.offset
            });
            filters = this.filters;
          }
        } else {
          filters = this.filters;
          options = this.options;
        }
        const channels = yield this.chatClientService.chatClient.queryChannels(filters, this.sort || {}, options);
        this.setNextPageConfiguration(channels);
        channels.forEach((c) => this.watchForChannelEvents(c));
        const prevChannels = recoverState ? [] : this.channelsSubject.getValue() || [];
        const filteredChannels = channels.filter((channel) => !prevChannels.find((existingChannel) => existingChannel.cid === channel.cid));
        let currentActiveChannel = this.activeChannelSubject.getValue();
        let isCurrentActiveChannelDeselected = false;
        const nextChannels = [...prevChannels, ...filteredChannels];
        if (recoverState && currentActiveChannel && !filteredChannels.find((c) => c.cid === (currentActiveChannel === null || currentActiveChannel === void 0 ? void 0 : currentActiveChannel.cid))) {
          try {
            yield currentActiveChannel.watch();
            nextChannels.unshift(currentActiveChannel);
          } catch (e2) {
            isCurrentActiveChannelDeselected = true;
          }
        }
        this.channelsSubject.next(nextChannels);
        if (isCurrentActiveChannelDeselected) {
          this.deselectActiveChannel();
        }
        if (filteredChannels.length > 0 && !currentActiveChannel && shouldSetActiveChannel) {
          this.setAsActiveChannel(filteredChannels[0]);
          currentActiveChannel = this.activeChannelSubject.getValue();
        }
        this.hasMoreChannelsSubject.next(channels.length >= this.options.limit);
        this.channelQueryStateSubject.next({
          state: "success"
        });
        if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.keepAliveChannels$OnError) && this.dismissErrorNotification) {
          this.dismissErrorNotification();
        }
        return channels;
      } catch (error) {
        if (!((_b = this.options) === null || _b === void 0 ? void 0 : _b.keepAliveChannels$OnError)) {
          this.channelsSubject.error(error);
        }
        this.channelQueryStateSubject.next({
          state: "error",
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          error
        });
        throw error;
      }
    });
  }
  watchForChannelEvents(channel) {
    const unsubscribe = channel.on((event) => {
      const type = event.type;
      switch (type) {
        case "message.new": {
          this.ngZone.run(() => {
            if (this.customNewMessageHandler) {
              this.customNewMessageHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
            } else {
              this.handleNewMessage(event, channel);
            }
          });
          break;
        }
        case "channel.hidden": {
          this.ngZone.run(() => {
            if (this.customChannelHiddenHandler) {
              this.customChannelHiddenHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
            } else {
              this.handleChannelHidden(event);
            }
          });
          break;
        }
        case "channel.deleted": {
          this.ngZone.run(() => {
            if (this.customChannelDeletedHandler) {
              this.customChannelDeletedHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
            } else {
              this.handleChannelDeleted(event);
            }
          });
          break;
        }
        case "channel.visible": {
          this.ngZone.run(() => {
            if (this.customChannelVisibleHandler) {
              this.customChannelVisibleHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
            } else {
              this.handleChannelVisible(event, channel);
            }
          });
          break;
        }
        case "channel.updated": {
          this.ngZone.run(() => {
            if (this.customChannelUpdatedHandler) {
              this.customChannelUpdatedHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
            } else {
              this.handleChannelUpdate(event);
            }
          });
          break;
        }
        case "channel.truncated": {
          this.ngZone.run(() => {
            if (this.customChannelTruncatedHandler) {
              this.customChannelTruncatedHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
            } else {
              this.handleChannelTruncate(event);
            }
          });
          break;
        }
        case "capabilities.changed": {
          this.ngZone.run(() => {
            var _a;
            const cid = event.cid;
            if (cid) {
              const currentChannels = this.channelsSubject.getValue();
              const index = currentChannels === null || currentChannels === void 0 ? void 0 : currentChannels.findIndex((c) => c.cid === cid);
              if (index !== -1 && index !== void 0) {
                this.channelsSubject.next([...currentChannels]);
                if (cid === ((_a = this.activeChannelSubject.getValue()) === null || _a === void 0 ? void 0 : _a.cid)) {
                  this.activeChannelSubject.next(this.activeChannelSubject.getValue());
                }
              }
            }
          });
          break;
        }
      }
    });
    this.channelSubscriptions[channel.cid] = unsubscribe.unsubscribe;
  }
  handleNewMessage(_, channel) {
    const channelIndex = this.channels.findIndex((c) => c.cid === channel.cid);
    this.channels.splice(channelIndex, 1);
    this.channelsSubject.next([channel, ...this.channels]);
  }
  handleChannelHidden(event) {
    this.removeChannelsFromChannelList([event.channel.cid], false);
  }
  handleChannelDeleted(event) {
    this.removeChannelsFromChannelList([event.channel.cid], false);
  }
  handleChannelVisible(event, channel) {
    if (!this.channels.find((c) => c.cid === event.cid)) {
      this.ngZone.run(() => this.channelsSubject.next([...this.channels, channel]));
    }
  }
  handleChannelUpdate(event) {
    var _a, _b, _c, _d;
    const channelIndex = this.channels.findIndex((c) => c.cid === event.channel.cid);
    if (channelIndex !== -1) {
      const channel = this.channels[channelIndex];
      const notIncludedProperies = {
        hidden: ((_a = channel.data) === null || _a === void 0 ? void 0 : _a.hidden) || false,
        own_capabilities: ((_b = channel.data) === null || _b === void 0 ? void 0 : _b.own_capabilities) || []
      };
      channel.data = Object.assign(Object.assign({}, event.channel), notIncludedProperies);
      this.channelsSubject.next([...this.channels]);
      if (((_c = event.channel) === null || _c === void 0 ? void 0 : _c.cid) === ((_d = this.activeChannelSubject.getValue()) === null || _d === void 0 ? void 0 : _d.cid)) {
        this.activeChannelSubject.next(channel);
      }
    }
  }
  handleChannelTruncate(event) {
    var _a, _b;
    const channelIndex = this.channels.findIndex((c) => c.cid === event.channel.cid);
    if (channelIndex !== -1) {
      this.channels[channelIndex].state.messages = [];
      this.channelsSubject.next([...this.channels]);
      if (((_a = event.channel) === null || _a === void 0 ? void 0 : _a.cid) === ((_b = this.activeChannelSubject.getValue()) === null || _b === void 0 ? void 0 : _b.cid)) {
        const channel = this.activeChannelSubject.getValue();
        channel.state.messages = [];
        this.activeChannelSubject.next(channel);
        this.activeChannelMessagesSubject.next([]);
        this.activeParentMessageIdSubject.next(void 0);
        this.activeThreadMessagesSubject.next([]);
      }
    }
  }
  get canSendReadEvents() {
    var _a;
    const channel = this.activeChannelSubject.getValue();
    if (!channel) {
      return false;
    }
    const capabilites = (_a = channel.data) === null || _a === void 0 ? void 0 : _a.own_capabilities;
    return capabilites.indexOf("read-events") !== -1;
  }
  transformToStreamMessage(message, channel) {
    const isThreadMessage = !!message.parent_id;
    if (this.isStreamMessage(message) && this.isFormatMessageResponse(message)) {
      if (message.quoted_message) {
        message.quoted_message.translation = getMessageTranslation(message.quoted_message, channel, this.chatClientService.chatClient.user);
      }
      message.translation = getMessageTranslation(message, channel, this.chatClientService.chatClient.user);
      return message;
    } else {
      if (message.quoted_message) {
        message.quoted_message.translation = getMessageTranslation(message.quoted_message, channel, this.chatClientService.chatClient.user);
      }
      if (this.isFormatMessageResponse(message)) {
        message.readBy = isThreadMessage ? [] : channel ? getReadBy(message, channel) : [];
        message.translation = getMessageTranslation(message, channel, this.chatClientService.chatClient.user);
        return message;
      } else {
        message = this.formatMessage(message);
        message.readBy = isThreadMessage ? [] : channel ? getReadBy(message, channel) : [];
        message.translation = getMessageTranslation(message, channel, this.chatClientService.chatClient.user);
        return message;
      }
    }
  }
  handleTypingStartEvent(event) {
    var _a, _b;
    if (((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = this.chatClientService.chatClient.user) === null || _b === void 0 ? void 0 : _b.id)) {
      return;
    }
    const isTypingInThread = !!event.parent_id;
    if (isTypingInThread && event.parent_id !== this.activeParentMessageIdSubject.getValue()) {
      return;
    }
    const subject = isTypingInThread ? this.usersTypingInThreadSubject : this.usersTypingInChannelSubject;
    const users = subject.getValue();
    const user = event.user;
    if (user && !users.find((u) => u.id === user.id)) {
      users.push(user);
      subject.next([...users]);
    }
  }
  handleTypingStopEvent(event) {
    const usersTypingInChannel = this.usersTypingInChannelSubject.getValue();
    const usersTypingInThread = this.usersTypingInThreadSubject.getValue();
    const user = event.user;
    if (user && usersTypingInChannel.find((u) => u.id === user.id)) {
      usersTypingInChannel.splice(usersTypingInChannel.findIndex((u) => u.id === user.id), 1);
      this.usersTypingInChannelSubject.next([...usersTypingInChannel]);
      return;
    }
    if (user && usersTypingInThread.find((u) => u.id === user.id)) {
      usersTypingInThread.splice(usersTypingInThread.findIndex((u) => u.id === user.id), 1);
      this.usersTypingInThreadSubject.next([...usersTypingInThread]);
      return;
    }
  }
  updateLatestMessages(event) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (((_b = (_a = event.message) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.id) !== ((_d = (_c = this.chatClientService) === null || _c === void 0 ? void 0 : _c.chatClient.user) === null || _d === void 0 ? void 0 : _d.id)) {
      return;
    }
    const latestMessages = this.latestMessageDateByUserByChannelsSubject.getValue();
    if (!((_e = event.message) === null || _e === void 0 ? void 0 : _e.created_at)) {
      return;
    }
    const channelId = (_f = event === null || event === void 0 ? void 0 : event.message) === null || _f === void 0 ? void 0 : _f.cid;
    if (!channelId) {
      return;
    }
    const messageDate = new Date(event.message.created_at);
    if (!latestMessages[channelId] || ((_g = latestMessages[channelId]) === null || _g === void 0 ? void 0 : _g.getTime()) < messageDate.getTime()) {
      latestMessages[channelId] = messageDate;
      this.latestMessageDateByUserByChannelsSubject.next(Object.assign({}, latestMessages));
    }
  }
  setChannelState(channel) {
    channel.state.messages.forEach((m) => {
      m.readBy = getReadBy(m, channel);
      m.translation = getMessageTranslation(m, channel, this.chatClientService.chatClient.user);
      if (m.quoted_message) {
        m.quoted_message.translation = getMessageTranslation(m.quoted_message, channel, this.chatClientService.chatClient.user);
      }
    });
    this.markRead(channel);
    this.activeChannelMessagesSubject.next([...channel.state.messages]);
    this.activeChannelPinnedMessagesSubject.next([...channel.state.pinnedMessages]);
    this.activeParentMessageIdSubject.next(void 0);
    this.activeThreadMessagesSubject.next([]);
    this.messageToQuoteSubject.next(void 0);
    this.usersTypingInChannelSubject.next([]);
    this.usersTypingInThreadSubject.next([]);
  }
  markRead(channel) {
    if (this.canSendReadEvents && this.shouldMarkActiveChannelAsRead) {
      void channel.markRead();
    }
  }
  setNextPageConfiguration(channelQueryResult) {
    var _a;
    if (this.customPaginator) {
      this.nextPageConfiguration = this.customPaginator(channelQueryResult);
    } else {
      this.nextPageConfiguration = {
        type: "offset",
        offset: (((_a = this.nextPageConfiguration) === null || _a === void 0 ? void 0 : _a.type) === "offset" ? this.nextPageConfiguration.offset : 0) + channelQueryResult.length
      };
    }
  }
};
ChannelService.MAX_MESSAGE_REACTIONS_TO_FETCH = 1200;
ChannelService.ɵfac = function ChannelService_Factory(t2) {
  return new (t2 || ChannelService)(ɵɵinject(ChatClientService), ɵɵinject(NgZone), ɵɵinject(NotificationService));
};
ChannelService.ɵprov = ɵɵdefineInjectable({
  token: ChannelService,
  factory: ChannelService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChannelService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [{
      type: ChatClientService
    }, {
      type: NgZone
    }, {
      type: NotificationService
    }];
  }, null);
})();
var ThemeService = class {
  constructor() {
    this.theme$ = new BehaviorSubject("light");
    this.defaultDarkModeVariables = {
      "--bg-gradient-end": "#101214",
      "--bg-gradient-start": "#070a0d",
      "--black": "#ffffff",
      "--blue-alice": "#00193d",
      "--border": "#141924",
      "--button-background": "#ffffff",
      "--button-text": "#005fff",
      "--grey": "#7a7a7a",
      "--grey-gainsboro": "#2d2f2f",
      "--grey-whisper": "#1c1e22",
      "--modal-shadow": "#000000",
      "--overlay": "#00000066",
      "--overlay-dark": "#ffffffcc",
      "--shadow-icon": "#00000080",
      "--targetedMessageBackground": "#302d22",
      "--transparent": "transparent",
      "--white": "#101418",
      "--white-smoke": "#13151b",
      "--white-snow": "#070a0d"
    };
    this.variablesToDelete = [];
    this.theme$.subscribe((theme) => {
      const darkVariables = this.customDarkThemeVariables ? Object.assign(Object.assign({}, this.defaultDarkModeVariables), this.customDarkThemeVariables) : this.defaultDarkModeVariables;
      const lightVariables = this.customLightThemeVariables ? this.customLightThemeVariables : {};
      this.variablesToDelete.forEach((variables) => this.deleteVariables(variables));
      if (theme === "dark") {
        this.deleteVariables(lightVariables);
        this.setVariables(darkVariables);
      } else {
        this.deleteVariables(darkVariables);
        this.setVariables(lightVariables);
      }
    });
    this.themeVersion = getComputedStyle(document.documentElement).getPropertyValue("--str-chat__theme-version").replace(" ", "") || "1";
  }
  /**
   * A getter that returns the currently set custom light theme variables.
   * @deprecated Only use with [theme v1](../concepts/theming-and-css.mdx)
   * @returns An object where the keys are theme variables, and the values are the currently set CSS values.
   */
  get customLightThemeVariables() {
    return this._customLightThemeVariables;
  }
  /**
   * A setter that can be used to overwrite the values of the CSS theme variables of the light theme.
   * @deprecated Only use with [theme v1](../concepts/theming-and-css.mdx)
   * @param variables An object where the keys are theme variables, and the values are CSS values.
   */
  set customLightThemeVariables(variables) {
    const prevVariables = this.customLightThemeVariables;
    if (prevVariables) {
      this.variablesToDelete.push(prevVariables);
    }
    this._customLightThemeVariables = variables;
    if (this.theme$.getValue() === "light") {
      this.theme$.next("light");
    }
  }
  /**
   * A getter that returns the currently set custom dark theme variables.
   * @deprecated Only use with [theme v1](../concepts/theming-and-css.mdx)
   * @returns An object where the keys are theme variables, and the values are the currently set CSS values.
   */
  get customDarkThemeVariables() {
    return this._customDarkThemeVariables;
  }
  /**
   * A setter that can be used to overwrite the values of the CSS theme variables of the dark theme.
   * @deprecated Only use with [theme v1](../concepts/theming-and-css.mdx)
   * @param variables An object where the keys are theme variables, and the values are CSS values.
   */
  set customDarkThemeVariables(variables) {
    const prevVariables = this.customDarkThemeVariables;
    if (prevVariables) {
      this.variablesToDelete.push(prevVariables);
    }
    this._customDarkThemeVariables = variables;
    if (this.theme$.getValue() === "dark") {
      this.theme$.next("dark");
    }
  }
  deleteVariables(variables) {
    if (!variables) {
      return;
    }
    Object.keys(variables).forEach((key) => document.documentElement.style.setProperty(key, null));
  }
  setVariables(variables) {
    if (!variables) {
      return;
    }
    Object.keys(variables).forEach((key) => document.documentElement.style.setProperty(key, variables[key]));
  }
};
ThemeService.ɵfac = function ThemeService_Factory(t2) {
  return new (t2 || ThemeService)();
};
ThemeService.ɵprov = ɵɵdefineInjectable({
  token: ThemeService,
  factory: ThemeService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [];
  }, null);
})();
var isImageFile = (file) => {
  return file.type.startsWith("image/") && !file.type.endsWith(".photoshop");
};
var isImageAttachment = (attachment) => {
  return attachment.type === "image" && !attachment.title_link && !attachment.og_scrape_url;
};
var AttachmentService = class {
  constructor(channelService, notificationService) {
    this.channelService = channelService;
    this.notificationService = notificationService;
    this.attachmentUploadInProgressCounterSubject = new BehaviorSubject(0);
    this.attachmentUploadsSubject = new BehaviorSubject([]);
    this.attachmentUploadInProgressCounter$ = this.attachmentUploadInProgressCounterSubject.asObservable();
    this.attachmentUploads$ = this.attachmentUploadsSubject.asObservable();
  }
  /**
   * Resets the attachments uploads (for example after the message with the attachments sent successfully)
   */
  resetAttachmentUploads() {
    this.attachmentUploadsSubject.next([]);
  }
  /**
   * Uploads the selected files, and creates preview for image files. The result is propagated throught the `attachmentUploads$` stream.
   * @param fileList The files selected by the user
   * @returns A promise with the result
   */
  filesSelected(fileList) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!fileList) {
        return;
      }
      const imageFiles = [];
      const dataFiles = [];
      const videoFiles = [];
      Array.from(fileList).forEach((file) => {
        if (isImageFile(file)) {
          imageFiles.push(file);
        } else if (file.type.startsWith("video/")) {
          videoFiles.push(file);
        } else {
          dataFiles.push(file);
        }
      });
      imageFiles.forEach((f2) => this.createPreview(f2));
      const newUploads = [...imageFiles.map((file) => ({
        file,
        state: "uploading",
        type: "image"
      })), ...videoFiles.map((file) => ({
        file,
        state: "uploading",
        type: "video"
      })), ...dataFiles.map((file) => ({
        file,
        state: "uploading",
        type: "file"
      }))];
      this.attachmentUploadsSubject.next([...this.attachmentUploadsSubject.getValue(), ...newUploads]);
      yield this.uploadAttachments(newUploads);
    });
  }
  /**
   * You can add custom `image`, `video` and `file` attachments using this method.
   *
   * Note: If you just want to use your own CDN for file uploads, you don't necessary need this method, you can just specify you own upload function in the [`ChannelService`](./ChannelService.mdx)
   *
   * @param attachment
   */
  addAttachment(attachment) {
    attachment.isCustomAttachment = true;
    this.createFromAttachments([attachment]);
  }
  /**
   * Retries to upload an attachment.
   * @param file
   * @returns A promise with the result
   */
  retryAttachmentUpload(file) {
    return __awaiter(this, void 0, void 0, function* () {
      const attachmentUploads = this.attachmentUploadsSubject.getValue();
      const upload = attachmentUploads.find((u) => u.file === file);
      if (!upload) {
        return;
      }
      upload.state = "uploading";
      this.attachmentUploadsSubject.next([...attachmentUploads]);
      yield this.uploadAttachments([upload]);
    });
  }
  /**
   * Deletes an attachment, the attachment can have any state (`error`, `uploading` or `success`).
   * @param upload
   */
  deleteAttachment(upload) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const attachmentUploads = this.attachmentUploadsSubject.getValue();
      let result;
      if (upload.state === "success" && !((_a = upload.fromAttachment) === null || _a === void 0 ? void 0 : _a.isCustomAttachment)) {
        try {
          yield this.channelService.deleteAttachment(upload);
          result = [...attachmentUploads];
          const index = attachmentUploads.indexOf(upload);
          result.splice(index, 1);
        } catch (error) {
          result = attachmentUploads;
          this.notificationService.addTemporaryNotification("streamChat.Error deleting attachment");
        }
      } else {
        result = [...attachmentUploads];
        const index = attachmentUploads.indexOf(upload);
        result.splice(index, 1);
      }
      this.attachmentUploadsSubject.next([...result]);
    });
  }
  /**
   * Maps the current uploads to a format that can be sent along with the message to the Stream API.
   * @returns the attachments
   */
  mapToAttachments() {
    const attachmentUploads = this.attachmentUploadsSubject.getValue();
    return attachmentUploads.filter((r) => r.state === "success").map((r) => {
      var _a, _b, _c, _d;
      const attachment = {
        type: r.type
      };
      if (r.fromAttachment) {
        return r.fromAttachment;
      } else {
        attachment.mime_type = (_a = r.file) === null || _a === void 0 ? void 0 : _a.type;
        if (r.type === "image") {
          attachment.fallback = (_b = r.file) === null || _b === void 0 ? void 0 : _b.name;
          attachment.image_url = r.url;
        } else {
          attachment.asset_url = r.url;
          attachment.title = (_c = r.file) === null || _c === void 0 ? void 0 : _c.name;
          attachment.file_size = (_d = r.file) === null || _d === void 0 ? void 0 : _d.size;
          attachment.thumb_url = r.thumb_url;
        }
      }
      return attachment;
    });
  }
  /**
   * Maps attachments received from the Stream API to uploads. This is useful when editing a message.
   * @param attachments Attachemnts received with the message
   */
  createFromAttachments(attachments) {
    const attachmentUploads = [];
    attachments.forEach((attachment) => {
      if (isImageAttachment(attachment)) {
        attachmentUploads.push({
          url: attachment.img_url || attachment.thumb_url || attachment.image_url,
          state: "success",
          type: "image",
          file: {
            name: attachment.fallback,
            type: attachment.mime_type
          },
          fromAttachment: attachment
        });
      } else if (attachment.type === "file" || attachment.type === "video") {
        attachmentUploads.push({
          url: attachment.asset_url,
          state: "success",
          file: {
            name: attachment.title,
            size: attachment.file_size,
            type: attachment.mime_type
          },
          type: attachment.type,
          thumb_url: attachment.thumb_url,
          fromAttachment: attachment
        });
      }
    });
    if (attachmentUploads.length > 0) {
      this.attachmentUploadsSubject.next([...this.attachmentUploadsSubject.getValue(), ...attachmentUploads]);
    }
  }
  createPreview(file) {
    const reader = new FileReader();
    reader.onload = (event) => {
      var _a;
      const attachmentUploads = this.attachmentUploadsSubject.getValue();
      const upload = attachmentUploads.find((upload2) => upload2.file === file);
      if (!upload) {
        return;
      }
      upload.previewUri = ((_a = event.target) === null || _a === void 0 ? void 0 : _a.result) || void 0;
      this.attachmentUploadsSubject.next([...attachmentUploads]);
    };
    reader.readAsDataURL(file);
  }
  uploadAttachments(uploads) {
    return __awaiter(this, void 0, void 0, function* () {
      this.attachmentUploadInProgressCounterSubject.next(this.attachmentUploadInProgressCounterSubject.getValue() + 1);
      const result = yield this.channelService.uploadAttachments(uploads);
      const attachmentUploads = this.attachmentUploadsSubject.getValue();
      result.forEach((r) => {
        var _a, _b, _c, _d;
        const upload = attachmentUploads.find((upload2) => upload2.file === r.file);
        if (!upload) {
          if (r.url) {
            void this.channelService.deleteAttachment(r);
          }
          return;
        }
        upload.state = r.state;
        upload.url = r.url;
        upload.thumb_url = r.thumb_url;
        if (upload.state === "error") {
          upload.errorReason = r.errorReason;
          upload.errorExtraInfo = r.errorExtraInfo;
          let errorKey;
          const translateParams = {
            name: upload.file.name
          };
          switch (upload.errorReason) {
            case "file-extension":
              errorKey = "streamChat.Error uploading file, extension not supported";
              translateParams.ext = (_b = (_a = upload.errorExtraInfo) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.param;
              break;
            case "file-size":
              errorKey = "streamChat.Error uploading file, maximum file size exceeded";
              translateParams.limit = (_d = (_c = upload.errorExtraInfo) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.param;
              break;
            default:
              errorKey = "streamChat.Error uploading file";
          }
          this.notificationService.addTemporaryNotification(errorKey, "error", void 0, translateParams);
        }
      });
      this.attachmentUploadInProgressCounterSubject.next(this.attachmentUploadInProgressCounterSubject.getValue() - 1);
      this.attachmentUploadsSubject.next([...attachmentUploads]);
    });
  }
};
AttachmentService.ɵfac = function AttachmentService_Factory(t2) {
  return new (t2 || AttachmentService)(ɵɵinject(ChannelService), ɵɵinject(NotificationService));
};
AttachmentService.ɵprov = ɵɵdefineInjectable({
  token: AttachmentService,
  factory: AttachmentService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AttachmentService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [{
      type: ChannelService
    }, {
      type: NotificationService
    }];
  }, null);
})();
var AttachmentConfigurationService = class {
  constructor() {
    this.shouldGenerateVideoThumbnail = true;
  }
  /**
   * Handles the configuration for image attachments, it's possible to provide your own function to override the default logic
   * @param attachment The attachment to configure
   * @param location Specifies where the image is being displayed
   * @param element The default resizing logics reads the height/max-height and max-width propperties of this element and reduces file size based on the given values. File size reduction is done by Stream's CDN.
   */
  getImageAttachmentConfiguration(attachment, location, element) {
    if (this.customImageAttachmentConfigurationHandler) {
      return this.customImageAttachmentConfigurationHandler(attachment, location, element);
    }
    const url = new URL(attachment.img_url || attachment.thumb_url || attachment.image_url || "");
    const originalHeight = Number(url.searchParams.get("oh")) > 1 ? Number(url.searchParams.get("oh")) : 1e6;
    const originalWidth = Number(url.searchParams.get("ow")) > 1 ? Number(url.searchParams.get("ow")) : 1e6;
    const displayWarning = location === "gallery" || location === "single";
    const sizeRestriction = this.getSizingRestrictions(url, element, displayWarning);
    if (sizeRestriction) {
      sizeRestriction.height *= 2;
      sizeRestriction.width *= 2;
      this.addResizingParamsToUrl(sizeRestriction, url);
    }
    return {
      url: url.href,
      width: "",
      height: "",
      originalHeight,
      originalWidth
    };
  }
  /**
   * Handles the configuration for video attachments, it's possible to provide your own function to override the default logic
   * @param attachment The attachment to configure
   * @param element The default resizing logics reads the height/max-height and max-width propperties of this element and reduces file size based on the given values. File size reduction is done by Stream's CDN.
   */
  getVideoAttachmentConfiguration(attachment, element) {
    if (this.customVideoAttachmentConfigurationHandler) {
      return this.customVideoAttachmentConfigurationHandler(attachment, element);
    }
    let thumbUrl = void 0;
    let originalHeight = 1e6;
    let originalWidth = 1e6;
    if (attachment.thumb_url && this.shouldGenerateVideoThumbnail) {
      const url = new URL(attachment.thumb_url);
      originalHeight = Number(url.searchParams.get("oh")) > 1 ? Number(url.searchParams.get("oh")) : originalHeight;
      originalWidth = Number(url.searchParams.get("ow")) > 1 ? Number(url.searchParams.get("ow")) : originalWidth;
      const displayWarning = true;
      const sizeRestriction = this.getSizingRestrictions(url, element, displayWarning);
      if (sizeRestriction) {
        sizeRestriction.height *= 2;
        sizeRestriction.width *= 2;
        this.addResizingParamsToUrl(sizeRestriction, url);
      }
      thumbUrl = url.href;
    }
    return {
      url: attachment.asset_url || "",
      width: "",
      height: "",
      thumbUrl,
      originalHeight,
      originalWidth
    };
  }
  /**
   * Handles the configuration for giphy attachments, it's possible to provide your own function to override the default logic
   * @param attachment The attachment to configure
   */
  getGiphyAttachmentConfiguration(attachment) {
    var _a;
    if (this.customGiphyAttachmentConfigurationHandler) {
      return this.customGiphyAttachmentConfigurationHandler(attachment);
    }
    const giphy = (_a = attachment.giphy) === null || _a === void 0 ? void 0 : _a.fixed_height_downsampled;
    return {
      url: (giphy === null || giphy === void 0 ? void 0 : giphy.url) || attachment.image_url || attachment.thumb_url || "",
      height: (giphy === null || giphy === void 0 ? void 0 : giphy.height) ? `${giphy === null || giphy === void 0 ? void 0 : giphy.height}px` : "300px",
      width: (giphy === null || giphy === void 0 ? void 0 : giphy.width) ? `${giphy === null || giphy === void 0 ? void 0 : giphy.width}px` : ""
    };
  }
  /**
   * Handles the configuration for scraped image attachments, it's possible to provide your own function to override the default logic
   * @param attachment The attachment to configure
   */
  getScrapedImageAttachmentConfiguration(attachment) {
    if (this.customScrapedImageAttachmentConfigurationHandler) {
      return this.customScrapedImageAttachmentConfigurationHandler(attachment);
    }
    return {
      url: attachment.image_url || attachment.thumb_url || "",
      width: "",
      height: ""
      // Set from CSS
    };
  }
  addResizingParamsToUrl(sizeRestriction, url) {
    url.searchParams.set("h", sizeRestriction.height.toString());
    url.searchParams.set("w", sizeRestriction.width.toString());
  }
  getSizingRestrictions(url, htmlElement, displayWarning = false) {
    const urlParams = url.searchParams;
    const originalHeight = Number(urlParams.get("oh")) || 1;
    const originalWidth = Number(urlParams.get("ow")) || 1;
    const cssSizeRestriction = this.getCSSSizeRestriction(htmlElement);
    let sizeRestriction;
    if ((cssSizeRestriction.maxHeight || cssSizeRestriction.height) && cssSizeRestriction.maxWidth) {
      sizeRestriction = this.getSizeRestrictions(originalHeight, originalWidth, cssSizeRestriction.maxHeight || cssSizeRestriction.height, cssSizeRestriction.maxWidth);
    } else {
      sizeRestriction = void 0;
      if (displayWarning) {
        console.warn(`Invalid value set for height/max-height and/or max-width for HTML element, this can cause scrolling issues inside the message list, more info https://getstream.io/chat/docs/sdk/angular/components/AttachmentListComponent/#image-and-video-sizing`);
      }
    }
    return sizeRestriction;
  }
  getSizeRestrictions(originalHeight, originalWidth, maxHeight, maxWidth) {
    return {
      height: Math.round(Math.max(maxHeight, maxWidth / originalWidth * originalHeight)),
      width: Math.round(Math.max(maxHeight, maxWidth / originalHeight * originalWidth))
    };
  }
  getCSSSizeRestriction(htmlElement) {
    const computedStylesheet = getComputedStyle(htmlElement);
    const height = this.getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue("height"));
    const maxHeight = this.getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue("max-height"));
    const maxWidth = this.getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue("max-width"));
    return {
      height,
      maxHeight,
      maxWidth
    };
  }
  getValueRepresentationOfCSSProperty(property) {
    return Number(property.replace("px", "")) || void 0;
  }
};
AttachmentConfigurationService.ɵfac = function AttachmentConfigurationService_Factory(t2) {
  return new (t2 || AttachmentConfigurationService)();
};
AttachmentConfigurationService.ɵprov = ɵɵdefineInjectable({
  token: AttachmentConfigurationService,
  factory: AttachmentConfigurationService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AttachmentConfigurationService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var en = {
  streamChat: {
    "1 reply": "1 reply",
    "Attach files": "Attach files",
    Cancel: "Cancel",
    "Channel Missing": "Channel Missing",
    Close: "Close",
    "Close emoji picker": "Close emoji picker",
    "Commands matching": "Commands matching",
    "Connection failure, reconnecting now...": "Connection failure, reconnecting now...",
    Delete: "Delete",
    Delivered: "Delivered",
    "Edit Message": "Edit Message",
    "Edit message request failed": "Edit message request failed",
    "Emoji matching": "Emoji matching",
    "Empty message...": "Empty message...",
    "Error adding flag": "Error adding flag",
    "Error connecting to chat, refresh the page to try again.": "Error connecting to chat, refresh the page to try again",
    "Error deleting message": "Error deleting message",
    "Error loading reactions": "Error loading reactions",
    "Error muting a user ...": "Error muting a user ...",
    "Error pinning message": "Error pinning message",
    "Error removing message pin": "Error removing message pin",
    "Error unmuting a user ...": "Error unmuting a user ...",
    "Error uploading file": 'Error uploading file "{{ name }}"',
    "Error uploading file, maximum file size exceeded": 'Error uploading "{{ name }}", maximum file size {{ limit }} exceeded',
    "Error uploading file, extension not supported": 'Error uploading "{{ name }}", type {{ ext }} not supported',
    "Error deleting attachment": "Error deleting attachment",
    "Error · Unsent": "Message couldn't be sent",
    "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
    Flag: "Flag",
    "Message Failed": "Message Failed",
    "Message Failed · Unauthorized": "Unauthorized to send message",
    "Message Failed · Click to try again": "Message couldn't be sent, click to try again",
    "Message deleted": "Message deleted",
    "Message has been successfully flagged": "Message has been successfully flagged",
    "Message pinned": "Message pinned",
    "Message unpinned": "Message unpinned",
    Mute: "Mute",
    New: "New",
    "New Messages!": "New Messages!",
    "No results found": "No results found",
    "Nothing yet...": "Nothing yet...",
    "Only visible to you": "Only visible to you",
    "Open emoji picker": "Open emoji picker",
    "People matching": "People matching",
    "Pick your emoji": "Pick your emoji",
    Pin: "Pin",
    "Pinned by": "Pinned by",
    Reply: "Reply",
    "Reply to Message": "Reply to Message",
    Search: "Search",
    "Searching...": "Searching...",
    Send: "Send",
    "Send message request failed": "Send message request failed",
    "Sending...": "Sending...",
    "Slow Mode ON": "Slow Mode ON",
    "Start of a new thread": "Start of a new thread",
    "This message was deleted...": "This message was deleted...",
    Thread: "Thread reply",
    "Type your message": "Type your message",
    Unmute: "Unmute",
    Unpin: "Unpin",
    "Wait until all attachments have uploaded": "Wait until all attachments have uploaded",
    "You have no channels currently": "You have no channels currently",
    "You've reached the maximum number of files": "You've reached the maximum number of files",
    live: "live",
    "this content could not be displayed": "this content could not be displayed",
    "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} and {{ moreCount }} more",
    "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }}, and {{ lastUser }}",
    "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} and {{ secondUser }}",
    "{{ imageCount }} more": "{{ imageCount }} more",
    "{{ memberCount }} members": "{{ memberCount }} members",
    "{{ replyCount }} replies": "{{ replyCount }} replies",
    "{{ user }} has been muted": "{{ user }} has been muted",
    "{{ user }} has been unmuted": "{{ user }} has been unmuted",
    "{{ watcherCount }} online": "{{ watcherCount }} online",
    "🏙 Attachment...": "🏙 Attachment...",
    "Connection error": "Connection error",
    "Load more": "Load more",
    failed: "failed",
    retry: "retry",
    test: "success",
    "Sending links is not allowed in this conversation": "Sending links is not allowed in this conversation",
    "You can't send messages in this channel": "You can't send messages in this channel",
    "You can't send thread replies in this channel": "You can't send thread replies in this channel",
    "Message not found": "Message not found",
    "No chats here yet…": "No chats here yet…",
    "user is typing": "{{ user }} is typing",
    "users are typing": "{{ users }} are typing",
    "Error loading channels": "Error loading channels",
    "See original (automatically translated)": "See original (automatically translated)",
    "See translation": "See translation"
  }
};
var StreamI18nService = class {
  constructor(translteService) {
    this.translteService = translteService;
  }
  /**
   * Registers the translation to the [ngx-translate](https://github.com/ngx-translate/core) TranslateService.
   * @param lang The language key to register the translation to
   * @param overrides An object which keys are translation keys, and the values are custom translations
   */
  setTranslation(lang = "en", overrides) {
    if (!this.translteService.defaultLang) {
      this.translteService.defaultLang = lang;
    }
    this.translteService.setTranslation(lang, {
      streamChat: Object.assign(Object.assign({}, en.streamChat), overrides)
    }, true);
  }
};
StreamI18nService.ɵfac = function StreamI18nService_Factory(t2) {
  return new (t2 || StreamI18nService)(ɵɵinject(TranslateService));
};
StreamI18nService.ɵprov = ɵɵdefineInjectable({
  token: StreamI18nService,
  factory: StreamI18nService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StreamI18nService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [{
      type: TranslateService
    }];
  }, null);
})();
var AvatarComponent = class {
  constructor(chatClientService, ngZone) {
    this.chatClientService = chatClientService;
    this.ngZone = ngZone;
    this.size = 32;
    this.showOnlineIndicator = true;
    this.initialsType = "first-letter-of-first-word";
    this.isLoaded = false;
    this.isError = false;
    this.isOnline = false;
  }
  ngOnChanges(changes) {
    var _a, _b;
    if (changes["channel"]) {
      if (this.channel) {
        const otherMember = this.getOtherMemberIfOneToOneChannel();
        if (otherMember) {
          this.isOnline = otherMember.online || false;
          this.isOnlineSubscription = this.chatClientService.events$.pipe(filter((e2) => e2.eventType === "user.presence.changed")).subscribe((event) => {
            var _a2;
            if (((_a2 = event.event.user) === null || _a2 === void 0 ? void 0 : _a2.id) === otherMember.id) {
              this.ngZone.run(() => {
                var _a3;
                this.isOnline = ((_a3 = event.event.user) === null || _a3 === void 0 ? void 0 : _a3.online) || false;
              });
            }
          });
        } else {
          (_a = this.isOnlineSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        }
      } else {
        this.isOnline = false;
        (_b = this.isOnlineSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
      }
    }
  }
  get initials() {
    var _a, _b, _c, _d, _e;
    let result = "";
    if (this.type === "user") {
      result = ((_a = this.name) === null || _a === void 0 ? void 0 : _a.toString()) || "";
    } else if (this.type === "channel") {
      if ((_c = (_b = this.channel) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.name) {
        result = (_e = (_d = this.channel) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.name;
      } else {
        const otherMember = this.getOtherMemberIfOneToOneChannel();
        if (otherMember) {
          result = otherMember.name || otherMember.id || "";
        } else {
          result = "#";
        }
      }
    }
    const words = result.split(" ");
    let initials;
    if (this.initialsType === "first-letter-of-each-word") {
      initials = words.map((w) => w.charAt(0) || "").join("");
    } else {
      initials = words[0].charAt(0) || "";
    }
    return initials;
  }
  get fallbackChannelImage() {
    if (this.type !== "channel") {
      return void 0;
    } else {
      const otherMember = this.getOtherMemberIfOneToOneChannel();
      if (otherMember) {
        return otherMember.image;
      } else {
        return void 0;
      }
    }
  }
  getOtherMemberIfOneToOneChannel() {
    var _a, _b;
    const otherMembers = Object.values(((_b = (_a = this.channel) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.members) || {}).filter((m) => {
      var _a2;
      return m.user_id !== ((_a2 = this.chatClientService.chatClient.user) === null || _a2 === void 0 ? void 0 : _a2.id);
    });
    if (otherMembers.length === 1) {
      return otherMembers[0].user;
    } else {
      return void 0;
    }
  }
};
AvatarComponent.ɵfac = function AvatarComponent_Factory(t2) {
  return new (t2 || AvatarComponent)(ɵɵdirectiveInject(ChatClientService), ɵɵdirectiveInject(NgZone));
};
AvatarComponent.ɵcmp = ɵɵdefineComponent({
  type: AvatarComponent,
  selectors: [["stream-avatar"]],
  inputs: {
    name: "name",
    imageUrl: "imageUrl",
    size: "size",
    location: "location",
    channel: "channel",
    user: "user",
    type: "type",
    showOnlineIndicator: "showOnlineIndicator",
    initialsType: "initialsType"
  },
  features: [ɵɵNgOnChangesFeature],
  decls: 5,
  vars: 15,
  consts: [[3, "title"], ["data-testid", "avatar-img", 3, "class", "src", "alt", "style", "load", "error", 4, "ngIf", "ngIfElse"], ["fallback", ""], ["data-testid", "online-indicator", "class", "str-chat__avatar--online-indicator", 4, "ngIf"], ["data-testid", "avatar-img", 3, "src", "alt", "load", "error"], ["data-testid", "fallback-img", 1, "str-chat__avatar-fallback", 2, "overflow", "hidden", "white-space", "nowrap", "text-overflow", "ellipsis"], ["data-testid", "online-indicator", 1, "str-chat__avatar--online-indicator"]],
  template: function AvatarComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0);
      ɵɵtemplate(1, AvatarComponent_img_1_Template, 1, 11, "img", 1)(2, AvatarComponent_ng_template_2_Template, 2, 1, "ng-template", null, 2, ɵɵtemplateRefExtractor)(4, AvatarComponent_div_4_Template, 1, 0, "div", 3);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r2 = ɵɵreference(3);
      ɵɵstyleMap(ɵɵpureFunction5(9, _c13, "calc(var(--str-chat__spacing-px, 1px) * " + ctx.size + ")", ctx.initialsType === "first-letter-of-first-word" ? "calc(var(--str-chat__spacing-px, 1px) * " + ctx.size / 2 + ")" : "calc(var(--str-chat__spacing-px, 1px) * " + ctx.size / 3 + ")", "calc(var(--str-chat__spacing-px, 1px) * " + ctx.size + ")", "calc(var(--str-chat__spacing-px, 1px) * " + ctx.size + ")", "calc(var(--str-chat__spacing-px, 1px) * " + ctx.size + ")"));
      ɵɵclassMapInterpolate1("str-chat__avatar str-chat__avatar--circle stream-chat__avatar--", ctx.location, "");
      ɵɵpropertyInterpolate("title", ctx.name);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", (ctx.imageUrl || ctx.fallbackChannelImage) && !ctx.isError)("ngIfElse", _r2);
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.isOnline && ctx.showOnlineIndicator);
    }
  },
  dependencies: [NgIf]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AvatarComponent, [{
    type: Component,
    args: [{
      selector: "stream-avatar",
      templateUrl: "./avatar.component.html",
      styleUrls: ["./avatar.component.scss"]
    }]
  }], function() {
    return [{
      type: ChatClientService
    }, {
      type: NgZone
    }];
  }, {
    name: [{
      type: Input
    }],
    imageUrl: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    location: [{
      type: Input
    }],
    channel: [{
      type: Input
    }],
    user: [{
      type: Input
    }],
    type: [{
      type: Input
    }],
    showOnlineIndicator: [{
      type: Input
    }],
    initialsType: [{
      type: Input
    }]
  });
})();
var CustomTemplatesService = class {
  constructor() {
    this.mentionAutocompleteItemTemplate$ = new BehaviorSubject(void 0);
    this.commandAutocompleteItemTemplate$ = new BehaviorSubject(void 0);
    this.channelPreviewTemplate$ = new BehaviorSubject(void 0);
    this.messageInputTemplate$ = new BehaviorSubject(void 0);
    this.mentionTemplate$ = new BehaviorSubject(void 0);
    this.emojiPickerTemplate$ = new BehaviorSubject(void 0);
    this.typingIndicatorTemplate$ = new BehaviorSubject(void 0);
    this.messageTemplate$ = new BehaviorSubject(void 0);
    this.channelActionsTemplate$ = new BehaviorSubject(void 0);
    this.attachmentListTemplate$ = new BehaviorSubject(void 0);
    this.attachmentPreviewListTemplate$ = new BehaviorSubject(void 0);
    this.avatarTemplate$ = new BehaviorSubject(void 0);
    this.iconTemplate$ = new BehaviorSubject(void 0);
    this.loadingIndicatorTemplate$ = new BehaviorSubject(void 0);
    this.messageActionsBoxTemplate$ = new BehaviorSubject(void 0);
    this.messageActionsBoxItemTemplate$ = new BehaviorSubject(void 0);
    this.messageReactionsTemplate$ = new BehaviorSubject(void 0);
    this.modalTemplate$ = new BehaviorSubject(void 0);
    this.notificationTemplate$ = new BehaviorSubject(void 0);
    this.threadHeaderTemplate$ = new BehaviorSubject(void 0);
    this.deliveredStatusTemplate$ = new BehaviorSubject(void 0);
    this.sendingStatusTemplate$ = new BehaviorSubject(void 0);
    this.readStatusTemplate$ = new BehaviorSubject(void 0);
    this.channelHeaderInfoTemplate$ = new BehaviorSubject(void 0);
    this.customAttachmentUploadTemplate$ = new BehaviorSubject(void 0);
    this.imageAttachmentTemplate$ = new BehaviorSubject(void 0);
    this.videoAttachmentTemplate$ = new BehaviorSubject(void 0);
    this.galleryAttachmentTemplate$ = new BehaviorSubject(void 0);
    this.fileAttachmentTemplate$ = new BehaviorSubject(void 0);
    this.cardAttachmentTemplate$ = new BehaviorSubject(void 0);
    this.attachmentActionsTemplate$ = new BehaviorSubject(void 0);
    this.systemMessageTemplate$ = new BehaviorSubject(void 0);
    this.dateSeparatorTemplate$ = new BehaviorSubject(void 0);
    this.newMessagesIndicatorTemplate$ = new BehaviorSubject(void 0);
    this.emptyMainMessageListPlaceholder$ = new BehaviorSubject(void 0);
    this.emptyThreadMessageListPlaceholder$ = new BehaviorSubject(void 0);
  }
};
CustomTemplatesService.ɵfac = function CustomTemplatesService_Factory(t2) {
  return new (t2 || CustomTemplatesService)();
};
CustomTemplatesService.ɵprov = ɵɵdefineInjectable({
  token: CustomTemplatesService,
  factory: CustomTemplatesService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CustomTemplatesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [];
  }, null);
})();
var AvatarPlaceholderComponent = class {
  constructor(customTemplatesService) {
    this.customTemplatesService = customTemplatesService;
    this.size = 32;
    this.initialsType = "first-letter-of-first-word";
    this.showOnlineIndicator = true;
    this.context = {
      name: void 0,
      imageUrl: void 0,
      size: void 0,
      location: void 0,
      channel: void 0,
      user: void 0,
      type: void 0,
      initialsType: void 0,
      showOnlineIndicator: void 0
    };
  }
  ngOnChanges() {
    this.context = {
      name: this.name,
      imageUrl: this.imageUrl,
      size: this.size,
      location: this.location,
      type: this.type,
      user: this.user,
      channel: this.channel,
      initialsType: this.initialsType,
      showOnlineIndicator: this.showOnlineIndicator
    };
  }
};
AvatarPlaceholderComponent.ɵfac = function AvatarPlaceholderComponent_Factory(t2) {
  return new (t2 || AvatarPlaceholderComponent)(ɵɵdirectiveInject(CustomTemplatesService));
};
AvatarPlaceholderComponent.ɵcmp = ɵɵdefineComponent({
  type: AvatarPlaceholderComponent,
  selectors: [["stream-avatar-placeholder"]],
  inputs: {
    name: "name",
    imageUrl: "imageUrl",
    size: "size",
    location: "location",
    channel: "channel",
    user: "user",
    type: "type",
    initialsType: "initialsType",
    showOnlineIndicator: "showOnlineIndicator"
  },
  features: [ɵɵNgOnChangesFeature],
  decls: 4,
  vars: 4,
  consts: [["defaultAvatar", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "name", "imageUrl", "size", "type", "channel", "user", "location", "initialsType", "showOnlineIndicator"]],
  template: function AvatarPlaceholderComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, AvatarPlaceholderComponent_ng_template_0_Template, 1, 9, "ng-template", null, 0, ɵɵtemplateRefExtractor)(2, AvatarPlaceholderComponent_ng_container_2_Template, 1, 0, "ng-container", 1);
      ɵɵpipe(3, "async");
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(1);
      ɵɵadvance(2);
      ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(3, 2, ctx.customTemplatesService.avatarTemplate$) || _r1)("ngTemplateOutletContext", ctx.context);
    }
  },
  dependencies: [AvatarComponent, NgTemplateOutlet, AsyncPipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AvatarPlaceholderComponent, [{
    type: Component,
    args: [{
      selector: "stream-avatar-placeholder",
      templateUrl: "./avatar-placeholder.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: CustomTemplatesService
    }];
  }, {
    name: [{
      type: Input
    }],
    imageUrl: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    location: [{
      type: Input
    }],
    channel: [{
      type: Input
    }],
    user: [{
      type: Input
    }],
    type: [{
      type: Input
    }],
    initialsType: [{
      type: Input
    }],
    showOnlineIndicator: [{
      type: Input
    }]
  });
})();
var IconComponent = class {
  constructor() {
  }
};
IconComponent.ɵfac = function IconComponent_Factory(t2) {
  return new (t2 || IconComponent)();
};
IconComponent.ɵcmp = ɵɵdefineComponent({
  type: IconComponent,
  selectors: [["stream-icon"]],
  inputs: {
    icon: "icon",
    size: "size"
  },
  decls: 22,
  vars: 22,
  consts: [["data-testid", "action-icon", "height", "4", "viewBox", "0 0 11 4", "width", "11", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "delivered-icon", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["height", "12", "viewBox", "0 0 12 12", "width", "12", "xmlns", "http://www.w3.org/2000/svg", "data-testid", "reaction-icon", 4, "ngIf"], ["data-testid", "connection-error", "width", "78px", "height", "78px", "viewBox", "0 0 78 78", "version", "1.1", "xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", 4, "ngIf"], ["data-testid", "send", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "file-upload", "height", "14", "width", "14", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "retry", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "close", "width", "28", "height", "28", "viewBox", "0 0 28 28", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "file", "className", "rfu-file-icon--small fa-file-fallback", "xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 384 512", 4, "ngIf"], ["data-testid", "unspecified-filetype", "width", "34", "height", "40", "viewBox", "0 0 34 40", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "reply", "height", "15", "width", "18", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "close-no-outline", "viewBox", "0 0 24 24", "width", "24", "height", "24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["height", "10", "width", "14", "xmlns", "http://www.w3.org/2000/svg", "data-testid", "reply-in-thread", 4, "ngIf"], ["data-testid", "arrow-left", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "arrow-right", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "menu", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "arrow-up", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "arrow-down", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "chat-bubble", "viewBox", "0 0 136 136", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "attach", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "download", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "error", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["data-testid", "action-icon", "height", "4", "viewBox", "0 0 11 4", "width", "11", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M1.5 3a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z", "fillRule", "nonzero"], ["data-testid", "delivered-icon", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["fill-rule", "evenodd", "clip-rule", "evenodd", "d", "M8.9999 16.2L4.7999 12L3.3999 13.4L8.9999 19L20.9999 6.99998L19.5999 5.59998L8.9999 16.2Z", "fill", "black"], ["height", "12", "viewBox", "0 0 12 12", "width", "12", "xmlns", "http://www.w3.org/2000/svg", "data-testid", "reaction-icon"], ["clipRule", "evenodd", "fillRule", "evenodd"], ["d", "M6 1.2C3.3 1.2 1.2 3.3 1.2 6c0 2.7 2.1 4.8 4.8 4.8 2.7 0 4.8-2.1 4.8-4.8 0-2.7-2.1-4.8-4.8-4.8zM0 6c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6-6-2.7-6-6z"], ["d", "M5.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM8.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM3.3 6.7c.3-.2.6-.1.8.1.3.4.8.9 1.5 1 .6.2 1.4.1 2.4-1 .2-.2.6-.3.8 0 .2.2.3.6 0 .8-1.1 1.3-2.4 1.7-3.5 1.5-1-.2-1.8-.9-2.2-1.5-.2-.3-.1-.7.2-.9z"], ["data-testid", "connection-error", "width", "78px", "height", "78px", "viewBox", "0 0 78 78", "version", "1.1", "xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink"], ["id", "Interactions", "stroke", "none", "stroke-width", "1", "fill", "none", "fill-rule", "evenodd"], ["id", "Connection-Error-_-Connectivity", "transform", "translate(-270.000000, -30.000000)", "fill", "#CF1F25"], ["id", "109-network-connection", "transform", "translate(270.000000, 30.000000)"], ["d", "M66.4609744,11.414231 C81.6225232,26.5757798 81.6225232,51.157545 66.4609744,66.3188467 C51.2994256,81.4803954 26.7176604,81.4803954 11.5563587,66.3188467 C-3.60519004,51.1572979 -3.60519004,26.5755327 11.5563587,11.414231 C26.7179075,-3.74731776 51.2996727,-3.74731776 66.4609744,11.414231 Z M54.7853215,45.8823776 L54.7853215,40.5882574 C54.7853215,39.613638 53.9952341,38.8235506 53.0206147,38.8235506 L44.9576695,38.8235506 L41.428256,42.3529641 L51.255555,42.3529641 L51.255555,45.8823776 L54.7853215,45.8823776 Z M40.6659027,43.1153174 L37.8988425,45.8823776 L40.6659027,45.8823776 L40.6659027,43.1153174 Z M51.1764962,56.4702653 L58.2353232,56.4702653 C59.2099355,56.4702653 60.00003,55.6801708 60.00003,54.7055585 L60.00003,51.176145 C60.00003,50.2015327 59.2099355,49.4114382 58.2353232,49.4114382 L51.1764962,49.4114382 C50.2018839,49.4114382 49.4117894,50.2015327 49.4117894,51.176145 L49.4117894,54.7055585 C49.4117894,55.6801708 50.2018839,56.4702653 51.1764962,56.4702653 Z M35.2941353,56.4702653 L42.3529624,56.4702653 C43.3275746,56.4702653 44.1176691,55.6801708 44.1176691,54.7055585 L44.1176691,51.176145 C44.1176691,50.2015327 43.3275746,49.4114382 42.3529624,49.4114382 L35.2941353,49.4114382 C34.319523,49.4114382 33.5294285,50.2015327 33.5294285,51.176145 L33.5294285,54.7055585 C33.5294285,55.6801708 34.319523,56.4702653 35.2941353,56.4702653 Z M56.6964989,19.0874231 C56.007381,18.3985134 54.8903216,18.3985134 54.2012036,19.087423 L45.882376,27.4062507 L45.882376,19.4117761 C45.882376,18.4371568 45.0922885,17.6470693 44.1176692,17.6470693 L33.5294286,17.6470693 C32.5548092,17.6470694 31.7647218,18.4371568 31.7647218,19.4117761 L31.7647218,30.0000167 C31.7647219,30.9746363 32.5548092,31.7647237 33.5294285,31.7647237 L41.5239031,31.7647237 L34.4650761,38.8235508 L24.7058947,38.8235508 C23.7312753,38.8235508 22.9411879,39.6136382 22.9411879,40.5882575 L22.9411879,45.8823778 L26.4706014,45.8823778 L26.4706014,42.3529643 L30.9356624,42.3529643 L23.8768354,49.4117914 L19.4117743,49.4117914 C18.4371549,49.4117914 17.6470675,50.2018788 17.6470675,51.1764981 L17.6470675,54.7059117 C17.6504049,54.9674302 17.7129076,55.2248042 17.8298886,55.4587302 L16.4456526,56.8429662 C15.7446193,57.5200453 15.7252005,58.6372282 16.4022825,59.3382615 C17.0793616,60.0392948 18.1965445,60.0587136 18.8975778,59.3816316 C18.9122847,59.3674273 18.9267436,59.3529684 18.940948,59.3382615 L56.6964963,21.5830662 C57.3856425,20.8939094 57.3856425,19.7765747 56.6964963,19.0874179 Z", "id", "Combined-Shape"], ["data-testid", "send", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["translate", ""], ["d", "M4.00952 22L24 12L4.00952 2L4 9.77778L18.2857 12L4 14.2222L4.00952 22Z", "fill", "black"], ["data-testid", "file-upload", "height", "14", "width", "14", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M1.667.333h10.666c.737 0 1.334.597 1.334 1.334v10.666c0 .737-.597 1.334-1.334 1.334H1.667a1.333 1.333 0 0 1-1.334-1.334V1.667C.333.93.93.333 1.667.333zm2 1.334a1.667 1.667 0 1 0 0 3.333 1.667 1.667 0 0 0 0-3.333zm-2 9.333v1.333h10.666v-4l-2-2-4 4-2-2L1.667 11z", "fillRule", "nonzero"], ["data-testid", "retry", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M17.6449 6.35C16.1949 4.9 14.2049 4 11.9949 4C7.57488 4 4.00488 7.58 4.00488 12C4.00488 16.42 7.57488 20 11.9949 20C15.7249 20 18.8349 17.45 19.7249 14H17.6449C16.8249 16.33 14.6049 18 11.9949 18C8.68488 18 5.99488 15.31 5.99488 12C5.99488 8.69 8.68488 6 11.9949 6C13.6549 6 15.1349 6.69 16.2149 7.78L12.9949 11H19.9949V4L17.6449 6.35Z", "fill", "black"], ["data-testid", "close", "width", "28", "height", "28", "viewBox", "0 0 28 28", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["width", "28", "height", "28", "rx", "14", "fill", "#72767E"], ["cx", "14", "cy", "14", "r", "12", "fill", "#72767E"], ["fill-rule", "evenodd", "clip-rule", "evenodd", "d", "M28 14C28 21.732 21.732 28 14 28C6.26801 28 0 21.732 0 14C0 6.26801 6.26801 0 14 0C21.732 0 28 6.26801 28 14ZM26 14C26 20.6274 20.6274 26 14 26C7.37258 26 2 20.6274 2 14C2 7.37258 7.37258 2 14 2C20.6274 2 26 7.37258 26 14ZM19.59 7L21 8.41L15.41 14L21 19.59L19.59 21L14 15.41L8.41 21L7 19.59L12.59 14L7 8.41L8.41 7L14 12.59L19.59 7Z", "fill", "white"], ["data-testid", "file", "className", "rfu-file-icon--small fa-file-fallback", "xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 384 512"], ["d", "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48z", "fill", "#414D54"], ["data-testid", "unspecified-filetype", "width", "34", "height", "40", "viewBox", "0 0 34 40", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", "fill", "url(#paint0_linear)"], ["d", "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", "fill", "#DBDBDB"], ["fill-rule", "evenodd", "clip-rule", "evenodd", "d", "M8 13H23V15H8V13Z", "fill", "#CFCFCF"], ["fill-rule", "evenodd", "clip-rule", "evenodd", "d", "M8 17H18V19H8V17Z", "fill", "#CFCFCF"], ["fill-rule", "evenodd", "clip-rule", "evenodd", "d", "M8 21H23V23H8V21Z", "fill", "#CFCFCF"], ["id", "paint0_linear", "x1", "0", "y1", "0", "x2", "0", "y2", "40", "gradientUnits", "userSpaceOnUse"], ["stop-color", "white"], ["offset", "1", "stop-color", "#DBDBDB"], ["data-testid", "reply", "height", "15", "width", "18", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M.56 10.946H.06l-.002-.498L.025.92a.5.5 0 1 1 1-.004l.032 9.029H9.06v-4l9 4.5-9 4.5v-4H.56z", "fillRule", "nonzero"], ["data-testid", "close-no-outline", "viewBox", "0 0 24 24", "width", "24", "height", "24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z", "fill", "black"], ["height", "10", "width", "14", "xmlns", "http://www.w3.org/2000/svg", "data-testid", "reply-in-thread"], ["d", "M8.516 3c4.78 0 4.972 6.5 4.972 6.5-1.6-2.906-2.847-3.184-4.972-3.184v2.872L3.772 4.994 8.516.5V3zM.484 5l4.5-4.237v1.78L2.416 5l2.568 2.125v1.828L.484 5z", "fillRule", "evenodd"], ["data-testid", "arrow-left", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M15.7049 7.41L14.2949 6L8.29492 12L14.2949 18L15.7049 16.59L11.1249 12L15.7049 7.41Z", "fill", "var(--black)"], ["data-testid", "arrow-right", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M9.70492 6L8.29492 7.41L12.8749 12L8.29492 16.59L9.70492 18L15.7049 12L9.70492 6Z", "fill", "var(--black)"], ["data-testid", "menu", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["fill-rule", "evenodd", "clip-rule", "evenodd", "d", "M3 8V6H21V8H3ZM3 13H21V11H3V13ZM3 18H21V16H3V18Z", "fill", "black"], ["data-testid", "arrow-up", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M16.59 15.7051L12 11.1251L7.41 15.7051L6 14.2951L12 8.29508L18 14.2951L16.59 15.7051Z", "fill", "var(--primary-color)"], ["data-testid", "arrow-down", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M7.41 8.29504L12 12.875L16.59 8.29504L18 9.70504L12 15.705L6 9.70504L7.41 8.29504Z", "fill", "var(--primary-color)"], ["data-testid", "chat-bubble", "viewBox", "0 0 136 136", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M106 24.5H30C24.775 24.5 20.5 28.775 20.5 34V119.5L39.5 100.5H106C111.225 100.5 115.5 96.225 115.5 91V34C115.5 28.775 111.225 24.5 106 24.5ZM106 91H39.5L30 100.5V34H106V91Z", "fill", "#B4B7BB"], ["data-testid", "attach", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["clip-path", "url(#clip0_10878_5)"], ["d", "M12.9997 6.99993L10.9997 6.99993L10.9997 10.9999L6.99972 10.9999L6.99972 12.9999L10.9997 12.9999L10.9997 16.9999L12.9997 16.9999L12.9997 12.9999L16.9997 12.9999L16.9997 10.9999L12.9997 10.9999L12.9997 6.99993ZM11.9997 1.99992C6.47972 1.99992 1.99972 6.47993 1.99972 11.9999C1.99972 17.5199 6.47972 21.9999 11.9997 21.9999C17.5197 21.9999 21.9997 17.5199 21.9997 11.9999C21.9997 6.47993 17.5197 1.99992 11.9997 1.99992ZM11.9997 19.9999C7.58972 19.9999 3.99972 16.4099 3.99972 11.9999C3.99972 7.58993 7.58972 3.99993 11.9997 3.99993C16.4097 3.99993 19.9997 7.58993 19.9997 11.9999C19.9997 16.4099 16.4097 19.9999 11.9997 19.9999Z", "fill", "black"], ["id", "clip0_10878_5"], ["width", "24", "height", "24", "fill", "white"], ["data-testid", "download", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M19.35 10.04C18.67 6.59 15.64 4 12 4C9.11 4 6.6 5.64 5.35 8.04C2.34 8.36 0 10.91 0 14C0 17.31 2.69 20 6 20H19C21.76 20 24 17.76 24 15C24 12.36 21.95 10.22 19.35 10.04ZM19 18H6C3.79 18 2 16.21 2 14C2 11.95 3.53 10.24 5.56 10.03L6.63 9.92L7.13 8.97C8.08 7.14 9.94 6 12 6C14.62 6 16.88 7.86 17.39 10.43L17.69 11.93L19.22 12.04C20.78 12.14 22 13.45 22 15C22 16.65 20.65 18 19 18ZM13.45 10H10.55V13H8L12 17L16 13H13.45V10Z", "fill", "black"], ["data-testid", "error", "width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["id", "background", "d", "M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z", "fill", "black"], ["d", "M13 17H11V15H13V17ZM13 13H11V7H13V13Z", "fill", "white"]],
  template: function IconComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, IconComponent__svg_svg_0_Template, 2, 0, "svg", 0)(1, IconComponent__svg_svg_1_Template, 2, 0, "svg", 1)(2, IconComponent__svg_svg_2_Template, 4, 0, "svg", 2)(3, IconComponent__svg_svg_3_Template, 9, 0, "svg", 3)(4, IconComponent__svg_svg_4_Template, 4, 0, "svg", 4)(5, IconComponent__svg_svg_5_Template, 4, 0, "svg", 5)(6, IconComponent__svg_svg_6_Template, 2, 0, "svg", 6)(7, IconComponent__svg_svg_7_Template, 4, 0, "svg", 7)(8, IconComponent__svg_svg_8_Template, 2, 2, "svg", 8)(9, IconComponent__svg_svg_9_Template, 10, 0, "svg", 9)(10, IconComponent__svg_svg_10_Template, 2, 0, "svg", 10)(11, IconComponent__svg_svg_11_Template, 2, 0, "svg", 11)(12, IconComponent__svg_svg_12_Template, 2, 0, "svg", 12)(13, IconComponent__svg_svg_13_Template, 2, 0, "svg", 13)(14, IconComponent__svg_svg_14_Template, 2, 0, "svg", 14)(15, IconComponent__svg_svg_15_Template, 2, 0, "svg", 15)(16, IconComponent__svg_svg_16_Template, 2, 0, "svg", 16)(17, IconComponent__svg_svg_17_Template, 2, 0, "svg", 17)(18, IconComponent__svg_svg_18_Template, 2, 0, "svg", 18)(19, IconComponent__svg_svg_19_Template, 6, 0, "svg", 19)(20, IconComponent__svg_svg_20_Template, 2, 0, "svg", 20)(21, IconComponent__svg_svg_21_Template, 3, 0, "svg", 21);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.icon === "action-icon");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "delivered-icon");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "reaction-icon");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "connection-error");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "send");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "file-upload");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "retry");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "close");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "file");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "unspecified-filetype");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "reply");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "close-no-outline");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "reply-in-thread");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "arrow-left");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "arrow-right");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "menu");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "arrow-up");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "arrow-down");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "chat-bubble");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "attach");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "download");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon === "error");
    }
  },
  dependencies: [NgIf, TranslateDirective],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IconComponent, [{
    type: Component,
    args: [{
      selector: "stream-icon",
      templateUrl: "./icon.component.html",
      styles: []
    }]
  }], function() {
    return [];
  }, {
    icon: [{
      type: Input
    }],
    size: [{
      type: Input
    }]
  });
})();
var IconPlaceholderComponent = class {
  constructor(customTemplatesService) {
    this.customTemplatesService = customTemplatesService;
    this.iconContext = {
      icon: void 0,
      size: void 0
    };
  }
  ngOnChanges() {
    this.iconContext = {
      icon: this.icon,
      size: this.size
    };
  }
};
IconPlaceholderComponent.ɵfac = function IconPlaceholderComponent_Factory(t2) {
  return new (t2 || IconPlaceholderComponent)(ɵɵdirectiveInject(CustomTemplatesService));
};
IconPlaceholderComponent.ɵcmp = ɵɵdefineComponent({
  type: IconPlaceholderComponent,
  selectors: [["stream-icon-placeholder"]],
  inputs: {
    icon: "icon",
    size: "size"
  },
  features: [ɵɵNgOnChangesFeature],
  decls: 4,
  vars: 4,
  consts: [["defaultIcon", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "icon", "size"]],
  template: function IconPlaceholderComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, IconPlaceholderComponent_ng_template_0_Template, 1, 2, "ng-template", null, 0, ɵɵtemplateRefExtractor)(2, IconPlaceholderComponent_ng_container_2_Template, 1, 0, "ng-container", 1);
      ɵɵpipe(3, "async");
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(1);
      ɵɵadvance(2);
      ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(3, 2, ctx.customTemplatesService.iconTemplate$) || _r1)("ngTemplateOutletContext", ctx.iconContext);
    }
  },
  dependencies: [IconComponent, NgTemplateOutlet, AsyncPipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IconPlaceholderComponent, [{
    type: Component,
    args: [{
      selector: "stream-icon-placeholder",
      templateUrl: "./icon-placeholder.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: CustomTemplatesService
    }];
  }, {
    icon: [{
      type: Input
    }],
    size: [{
      type: Input
    }]
  });
})();
var LoadingIndicatorComponent = class {
  constructor() {
    this.size = 15;
    this.color = `var(--str-chat__loading-indicator-color, var(--str-chat__primary-color, '#006CFF'))`;
    this.linearGradientId = v4_default();
  }
};
LoadingIndicatorComponent.ɵfac = function LoadingIndicatorComponent_Factory(t2) {
  return new (t2 || LoadingIndicatorComponent)();
};
LoadingIndicatorComponent.ɵcmp = ɵɵdefineComponent({
  type: LoadingIndicatorComponent,
  selectors: [["stream-loading-indicator"]],
  inputs: {
    size: "size",
    color: "color"
  },
  decls: 7,
  vars: 8,
  consts: [[1, "str-chat__loading-indicator"], ["viewBox", "0 0 30 30", "data-testid", "loading-indicator", "xmlns", "http://www.w3.org/2000/svg"], ["x1", "50%", "x2", "50%", "y1", "0%", "y2", "100%", 3, "id"], ["offset", "0%", "stop-color", "#FFF", "stop-opacity", "0"], ["data-testid", "stop-color", "offset", "100%", "stop-opacity", "1", 3, "ngStyle"], ["d", "M2.518 23.321l1.664-1.11A12.988 12.988 0 0 0 15 28c7.18 0 13-5.82 13-13S22.18 2 15 2V0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-5.206 0-9.792-2.652-12.482-6.679z", "fillRule", "evenodd"]],
  template: function LoadingIndicatorComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0);
      ɵɵnamespaceSVG();
      ɵɵelementStart(1, "svg", 1)(2, "defs")(3, "linearGradient", 2);
      ɵɵelement(4, "stop", 3)(5, "stop", 4);
      ɵɵelementEnd()();
      ɵɵelement(6, "path", 5);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵadvance(1);
      ɵɵattribute("height", ctx.size)("width", ctx.size);
      ɵɵadvance(2);
      ɵɵpropertyInterpolate("id", ctx.linearGradientId);
      ɵɵadvance(2);
      ɵɵproperty("ngStyle", ɵɵpureFunction1(6, _c22, ctx.color));
      ɵɵattribute("stop-color", ctx.color);
      ɵɵadvance(1);
      ɵɵattribute("fill", "url(#" + ctx.linearGradientId + ")");
    }
  },
  dependencies: [NgStyle],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LoadingIndicatorComponent, [{
    type: Component,
    args: [{
      selector: "stream-loading-indicator",
      templateUrl: "./loading-indicator.component.html",
      styles: []
    }]
  }], function() {
    return [];
  }, {
    size: [{
      type: Input
    }],
    color: [{
      type: Input
    }]
  });
})();
var LoadingIndicatorPlaceholderComponent = class {
  constructor(customTemplatesService) {
    this.customTemplatesService = customTemplatesService;
    this.size = 15;
    this.color = `var(--str-chat__loading-indicator-color, var(--str-chat__primary-color, '#006CFF'))`;
  }
  getLoadingIndicatorContext() {
    return {
      size: this.size,
      color: this.color
    };
  }
};
LoadingIndicatorPlaceholderComponent.ɵfac = function LoadingIndicatorPlaceholderComponent_Factory(t2) {
  return new (t2 || LoadingIndicatorPlaceholderComponent)(ɵɵdirectiveInject(CustomTemplatesService));
};
LoadingIndicatorPlaceholderComponent.ɵcmp = ɵɵdefineComponent({
  type: LoadingIndicatorPlaceholderComponent,
  selectors: [["stream-loading-indicator-placeholder"]],
  inputs: {
    size: "size",
    color: "color"
  },
  decls: 4,
  vars: 4,
  consts: [["defaultLoadingIndicator", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "size", "color"]],
  template: function LoadingIndicatorPlaceholderComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, LoadingIndicatorPlaceholderComponent_ng_template_0_Template, 1, 2, "ng-template", null, 0, ɵɵtemplateRefExtractor)(2, LoadingIndicatorPlaceholderComponent_ng_container_2_Template, 1, 0, "ng-container", 1);
      ɵɵpipe(3, "async");
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(1);
      ɵɵadvance(2);
      ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(3, 2, ctx.customTemplatesService.loadingIndicatorTemplate$) || _r1)("ngTemplateOutletContext", ctx.getLoadingIndicatorContext());
    }
  },
  dependencies: [LoadingIndicatorComponent, NgTemplateOutlet, AsyncPipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LoadingIndicatorPlaceholderComponent, [{
    type: Component,
    args: [{
      selector: "stream-loading-indicator-placeholder",
      templateUrl: "./loading-indicator-placeholder.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: CustomTemplatesService
    }];
  }, {
    size: [{
      type: Input
    }],
    color: [{
      type: Input
    }]
  });
})();
var ModalComponent = class {
  constructor() {
    this.isOpen = false;
    this.isOpenChange = new EventEmitter();
    this.watchForEscPress = (event) => {
      if (event.key === "Escape") {
        this.close();
      }
    };
    this.stopWatchForEscPress = () => {
      window.removeEventListener("keyup", this.watchForEscPress);
    };
    this.watchForOutsideClicks = (event) => {
      var _a;
      if (!((_a = this.innerContainer) === null || _a === void 0 ? void 0 : _a.nativeElement.contains(event.target))) {
        this.close();
      }
    };
  }
  ngOnChanges(changes) {
    if (changes.isOpen) {
      if (this.isOpen) {
        window.addEventListener("keyup", this.watchForEscPress);
        setTimeout(() => window.addEventListener("click", this.watchForOutsideClicks), 0);
      } else {
        this.stopWatchForOutsideClicks();
        this.stopWatchForEscPress();
      }
    }
  }
  close() {
    this.isOpen = false;
    this.isOpenChange.emit(false);
    this.stopWatchForOutsideClicks();
    this.stopWatchForEscPress();
  }
  stopWatchForOutsideClicks() {
    window.removeEventListener("click", this.watchForOutsideClicks);
  }
};
ModalComponent.ɵfac = function ModalComponent_Factory(t2) {
  return new (t2 || ModalComponent)();
};
ModalComponent.ɵcmp = ɵɵdefineComponent({
  type: ModalComponent,
  selectors: [["stream-modal"]],
  viewQuery: function ModalComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c3, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.innerContainer = _t.first);
    }
  },
  inputs: {
    isOpen: "isOpen",
    content: "content"
  },
  outputs: {
    isOpenChange: "isOpenChange"
  },
  features: [ɵɵNgOnChangesFeature],
  ngContentSelectors: _c4,
  decls: 8,
  vars: 5,
  consts: [["data-testid", "modal"], ["data-testid", "close", 1, "str-chat__modal__close-button", 3, "click", "keyup.enter"], ["icon", "close"], [1, "str-chat__modal__inner"], ["modalInner", ""], [4, "ngIf", "ngIfElse"], ["elseContent", ""], [4, "ngTemplateOutlet"]],
  template: function ModalComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0)(1, "div", 1);
      ɵɵlistener("click", function ModalComponent_Template_div_click_1_listener() {
        return ctx.close();
      })("keyup.enter", function ModalComponent_Template_div_keyup_enter_1_listener() {
        return ctx.close();
      });
      ɵɵelement(2, "stream-icon-placeholder", 2);
      ɵɵelementEnd();
      ɵɵelementStart(3, "div", 3, 4);
      ɵɵtemplate(5, ModalComponent_ng_container_5_Template, 2, 1, "ng-container", 5)(6, ModalComponent_ng_template_6_Template, 1, 0, "ng-template", null, 6, ɵɵtemplateRefExtractor);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      const _r3 = ɵɵreference(7);
      ɵɵclassMapInterpolate1("str-chat__modal str-chat__modal--", ctx.isOpen ? "open" : "close", "");
      ɵɵadvance(5);
      ɵɵproperty("ngIf", ctx.content)("ngIfElse", _r3);
    }
  },
  dependencies: [IconPlaceholderComponent, NgIf, NgTemplateOutlet],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ModalComponent, [{
    type: Component,
    args: [{
      selector: "stream-modal",
      templateUrl: "./modal.component.html",
      styles: []
    }]
  }], function() {
    return [];
  }, {
    isOpen: [{
      type: Input
    }],
    content: [{
      type: Input
    }],
    isOpenChange: [{
      type: Output
    }],
    innerContainer: [{
      type: ViewChild,
      args: ["modalInner"]
    }]
  });
})();
var textareaInjectionToken = new InjectionToken("textareaInjectionToken");
var TextareaDirective = class {
  constructor(viewContainerRef) {
    this.viewContainerRef = viewContainerRef;
    this.value = "";
    this.valueChange = new EventEmitter();
    this.send = new EventEmitter();
    this.userMentions = new EventEmitter();
    this.subscriptions = [];
    this.unpropagatedChanges = [];
  }
  ngOnChanges(changes) {
    var _a, _b;
    this.unpropagatedChanges.push(changes);
    if (!this.componentRef) {
      return;
    }
    if (changes.componentRef) {
      this.subscriptions.forEach((s2) => s2.unsubscribe());
      if (this.componentRef) {
        this.subscriptions.push(this.componentRef.instance.valueChange.subscribe((value) => this.valueChange.next(value)));
        this.subscriptions.push(this.componentRef.instance.send.subscribe((value) => this.send.next(value)));
        if (this.componentRef.instance.userMentions) {
          this.subscriptions.push(this.componentRef.instance.userMentions.subscribe((value) => this.userMentions.next(value)));
        }
        this.componentRef.instance.areMentionsEnabled = this.areMentionsEnabled;
        this.componentRef.instance.mentionScope = this.mentionScope;
        this.componentRef.instance.value = this.value;
        this.componentRef.instance.placeholder = this.placeholder;
        this.componentRef.instance.inputMode = this.inputMode;
        this.componentRef.instance.autoFocus = this.autoFocus;
      }
    }
    if (changes.areMentionsEnabled) {
      this.componentRef.instance.areMentionsEnabled = this.areMentionsEnabled;
    }
    if (changes.mentionScope) {
      this.componentRef.instance.mentionScope = this.mentionScope;
    }
    if (changes.value) {
      this.componentRef.instance.value = this.value;
    }
    if (changes.placeholder) {
      this.componentRef.instance.placeholder = this.placeholder;
    }
    if (changes.inputMode) {
      this.componentRef.instance.inputMode = this.inputMode;
    }
    if (changes.autoFocus) {
      this.componentRef.instance.autoFocus = this.autoFocus;
    }
    let changesToPropagate = {};
    this.unpropagatedChanges.forEach((c) => changesToPropagate = Object.assign(Object.assign({}, changesToPropagate), c));
    (_b = (_a = this.componentRef.instance).ngOnChanges) === null || _b === void 0 ? void 0 : _b.call(_a, changesToPropagate);
    this.unpropagatedChanges = [];
  }
};
TextareaDirective.ɵfac = function TextareaDirective_Factory(t2) {
  return new (t2 || TextareaDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
TextareaDirective.ɵdir = ɵɵdefineDirective({
  type: TextareaDirective,
  selectors: [["", "streamTextarea", ""]],
  inputs: {
    componentRef: "componentRef",
    areMentionsEnabled: "areMentionsEnabled",
    mentionScope: "mentionScope",
    inputMode: "inputMode",
    value: "value",
    placeholder: "placeholder",
    autoFocus: "autoFocus"
  },
  outputs: {
    valueChange: "valueChange",
    send: "send",
    userMentions: "userMentions"
  },
  features: [ɵɵNgOnChangesFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TextareaDirective, [{
    type: Directive,
    args: [{
      selector: "[streamTextarea]"
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, {
    componentRef: [{
      type: Input
    }],
    areMentionsEnabled: [{
      type: Input
    }],
    mentionScope: [{
      type: Input
    }],
    inputMode: [{
      type: Input
    }],
    value: [{
      type: Input
    }],
    placeholder: [{
      type: Input
    }],
    autoFocus: [{
      type: Input
    }],
    valueChange: [{
      type: Output
    }],
    send: [{
      type: Output
    }],
    userMentions: [{
      type: Output
    }]
  });
})();
var EmojiInputService = class {
  constructor() {
    this.emojiInput$ = new Subject();
  }
};
EmojiInputService.ɵfac = function EmojiInputService_Factory(t2) {
  return new (t2 || EmojiInputService)();
};
EmojiInputService.ɵprov = ɵɵdefineInjectable({
  token: EmojiInputService,
  factory: EmojiInputService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EmojiInputService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [];
  }, null);
})();
var MessageInputConfigService = class {
  constructor() {
    this.isFileUploadEnabled = true;
    this.areMentionsEnabled = true;
    this.isMultipleFileUploadEnabled = true;
    this.mentionScope = "channel";
    this.inputMode = "desktop";
  }
};
MessageInputConfigService.ɵfac = function MessageInputConfigService_Factory(t2) {
  return new (t2 || MessageInputConfigService)();
};
MessageInputConfigService.ɵprov = ɵɵdefineInjectable({
  token: MessageInputConfigService,
  factory: MessageInputConfigService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MessageInputConfigService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [];
  }, null);
})();
var AttachmentListComponent = class {
  constructor(customTemplatesService, channelService, attachmentConfigurationService, themeService) {
    this.customTemplatesService = customTemplatesService;
    this.channelService = channelService;
    this.attachmentConfigurationService = attachmentConfigurationService;
    this.attachments = [];
    this.imageModalStateChange = new EventEmitter();
    this.class = "str-chat__attachment-list-angular-host";
    this.orderedAttachments = [];
    this.imagesToView = [];
    this.imagesToViewCurrentIndex = 0;
    this.attachmentConfigurations = /* @__PURE__ */ new Map();
    this.themeVersion = themeService.themeVersion;
  }
  ngOnChanges(changes) {
    if (changes.attachments) {
      const images = this.attachments.filter(this.isImage);
      const containsGallery = images.length >= 2;
      this.orderedAttachments = [...containsGallery ? this.createGallery(images) : images, ...this.attachments.filter((a2) => this.isVideo(a2)), ...this.attachments.filter((a2) => this.isFile(a2))];
      this.attachmentConfigurations = /* @__PURE__ */ new Map();
      if (this.orderedAttachments.length === 0) {
        this.orderedAttachments.push(...this.attachments.filter((a2) => this.isCard(a2)));
      }
    }
  }
  trackByUrl(_, attachment) {
    return attachment.image_url || attachment.img_url || attachment.asset_url || attachment.thumb_url;
  }
  isImage(attachment) {
    return isImageAttachment(attachment);
  }
  isSvg(attachment) {
    const filename = attachment.fallback || "";
    return !!filename.toLowerCase().endsWith(".svg");
  }
  isFile(attachment) {
    return attachment.type === "file";
  }
  isGallery(attachment) {
    return attachment.type === "gallery";
  }
  isVideo(attachment) {
    return attachment.type === "video" && attachment.asset_url && !attachment.og_scrape_url;
  }
  isCard(attachment) {
    return !attachment.type || attachment.type === "image" && !this.isImage(attachment) || attachment.type === "giphy";
  }
  hasFileSize(attachment) {
    return attachment.file_size && Number.isFinite(Number(attachment.file_size));
  }
  getFileSize(attachment) {
    return (0, import_pretty_bytes.default)(Number(attachment.file_size));
  }
  getModalContext() {
    return {
      isOpen: this.imagesToView && this.imagesToView.length > 0,
      isOpenChangeHandler: (isOpen) => isOpen ? null : this.closeImageModal(),
      content: this.modalContent
    };
  }
  trimUrl(url) {
    if (url !== void 0 && url !== null) {
      const [trimmedUrl] = url.replace(/^(?:https?:\/\/)?(?:www\.)?/i, "").split("/");
      return trimmedUrl;
    }
    return null;
  }
  sendAction(action) {
    void this.channelService.sendAction(this.messageId, {
      [action.name]: action.value
    }, this.parentMessageId);
  }
  trackByActionValue(_, item) {
    return item.value;
  }
  openImageModal(attachments, selectedIndex = 0) {
    this.imageModalStateChange.next("opened");
    this.imagesToView = attachments;
    this.imagesToViewCurrentIndex = selectedIndex;
  }
  stepImages(dir) {
    this.imagesToViewCurrentIndex += dir * 1;
  }
  trackByImageUrl(_, item) {
    return item.image_url || item.img_url || item.thumb_url;
  }
  getAttachmentContext(attachment) {
    return {
      attachment
    };
  }
  getImageAttachmentConfiguration(attachment, type, element) {
    const existingConfiguration = this.attachmentConfigurations.get(attachment);
    if (existingConfiguration) {
      return existingConfiguration;
    }
    const configuration = this.attachmentConfigurationService.getImageAttachmentConfiguration(attachment, type, element);
    this.attachmentConfigurations.set(attachment, configuration);
    return configuration;
  }
  getCarouselImageAttachmentConfiguration(attachment, element) {
    return this.attachmentConfigurationService.getImageAttachmentConfiguration(attachment, "carousel", element);
  }
  getVideoAttachmentConfiguration(attachment, element) {
    const existingConfiguration = this.attachmentConfigurations.get(attachment);
    if (existingConfiguration) {
      return existingConfiguration;
    }
    const configuration = this.attachmentConfigurationService.getVideoAttachmentConfiguration(attachment, element);
    this.attachmentConfigurations.set(attachment, configuration);
    return configuration;
  }
  getCardAttachmentConfiguration(attachment) {
    const existingConfiguration = this.attachmentConfigurations.get(attachment);
    if (existingConfiguration) {
      return existingConfiguration;
    }
    if (attachment.type === "giphy") {
      return this.attachmentConfigurationService.getGiphyAttachmentConfiguration(attachment);
    } else {
      const configuration = this.attachmentConfigurationService.getScrapedImageAttachmentConfiguration(attachment);
      this.attachmentConfigurations.set(attachment, configuration);
      return configuration;
    }
  }
  get isImageModalPrevButtonVisible() {
    return this.imagesToViewCurrentIndex !== 0;
  }
  get isImageModalNextButtonVisible() {
    return this.imagesToViewCurrentIndex !== this.imagesToView.length - 1;
  }
  createGallery(images) {
    return [{
      type: "gallery",
      images
    }];
  }
  closeImageModal() {
    this.imageModalStateChange.next("closed");
    this.imagesToView = [];
  }
};
AttachmentListComponent.ɵfac = function AttachmentListComponent_Factory(t2) {
  return new (t2 || AttachmentListComponent)(ɵɵdirectiveInject(CustomTemplatesService), ɵɵdirectiveInject(ChannelService), ɵɵdirectiveInject(AttachmentConfigurationService), ɵɵdirectiveInject(ThemeService));
};
AttachmentListComponent.ɵcmp = ɵɵdefineComponent({
  type: AttachmentListComponent,
  selectors: [["stream-attachment-list"]],
  viewQuery: function AttachmentListComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c5, 7);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.modalContent = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function AttachmentListComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassMap(ctx.class);
    }
  },
  inputs: {
    messageId: "messageId",
    parentMessageId: "parentMessageId",
    attachments: "attachments"
  },
  outputs: {
    imageModalStateChange: "imageModalStateChange"
  },
  features: [ɵɵNgOnChangesFeature],
  decls: 5,
  vars: 1,
  consts: [["class", "str-chat__attachment-list", 4, "ngIf"], ["defaultModal", ""], ["modalContent", ""], [1, "str-chat__attachment-list"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [4, "ngIf"], ["data-testclass", "attachment-container"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["defaultImage", ""], ["data-testclass", "image", 1, "str-chat__message-attachment--img", 3, "src", "alt", "ngStyle", "click", "keyup.enter"], ["imgElement", ""], ["defaultGallery", ""], ["data-testid", "image-gallery", 1, "str-chat__gallery"], ["class", "str-chat__gallery-image", "data-testclass", "gallery-image", 3, "str-chat__message-attachment--svg-image", "click", "keyup.enter", 4, "ngIf"], ["class", "str-chat__gallery-placeholder", "data-testclass", "gallery-image", "data-testid", "more-image-button", 3, "str-chat__message-attachment--svg-image", "--original-height", "--original-width", "ngStyle", "click", "keyup.enter", 4, "ngIf"], ["data-testclass", "gallery-image", 1, "str-chat__gallery-image", 3, "click", "keyup.enter"], [3, "src", "alt", "ngStyle"], ["data-testclass", "gallery-image", "data-testid", "more-image-button", 1, "str-chat__gallery-placeholder", 3, "ngStyle", "click", "keyup.enter"], ["element", ""], [3, "innerHTML"], ["defaultVideo", ""], ["data-testclass", "video-attachment-parent", 1, "str-chat__player-wrapper", 3, "ngStyle"], ["controls", "", "data-testclass", "video-attachment", 1, "str-chat__video-angular", 3, "src", "poster"], ["videoElement", ""], ["defaultFile", ""], ["data-testclass", "file-link", "target", "_blank", 1, "str-chat__message-attachment-file--item", "str-chat-angular__message-attachment-file-single", 2, "cursor", "pointer", "text-decoration", "none", 3, "href"], ["icon", "file", 3, "size", 4, "ngIf"], ["icon", "unspecified-filetype", 3, "size", 4, "ngIf"], [1, "str-chat__message-attachment-file--item-text"], [1, "str-chat__message-attachment-file--item-first-row"], ["data-testclass", "file-title", 1, "str-chat__message-attachment-file--item-name"], ["class", "str-chat__message-attachment-file--item-size", "data-testclass", "size", 4, "ngIf"], ["icon", "file", 3, "size"], ["icon", "unspecified-filetype", 3, "size"], ["data-testclass", "size", 1, "str-chat__message-attachment-file--item-size"], ["defaultCard", ""], ["class", "str-chat__message-attachment-card--header", 4, "ngIf"], [1, "str-chat__message-attachment-card--content"], [1, "str-chat__message-attachment-card--flex"], ["data-testclass", "card-title", "class", "str-chat__message-attachment-card--title", 4, "ngIf"], ["class", "str-chat__message-attachment-card--text", "data-testclass", "card-text", 4, "ngIf"], ["class", "str-chat__message-attachment-card--url", "data-testclass", "url-link", "noopener", "", "noreferrer", "", "target", "_blank", 3, "href", 4, "ngIf"], [1, "str-chat__message-attachment-card--header"], ["data-testclass", "card-img", 3, "alt", "src", "ngStyle"], ["data-testclass", "card-title", 1, "str-chat__message-attachment-card--title"], ["data-testclass", "card-text", 1, "str-chat__message-attachment-card--text"], ["data-testclass", "url-link", "noopener", "", "noreferrer", "", "target", "_blank", 1, "str-chat__message-attachment-card--url", 3, "href"], ["defaultActions", ""], [1, "str-chat__message-attachment-actions"], [1, "str-chat__message-attachment-actions-form"], ["data-testclass", "attachment-action", 3, "class", "click", "keyup.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["data-testclass", "attachment-action", 3, "click", "keyup.enter"], [1, "stream-chat-angular__image-modal-host", 3, "isOpen", "content", "isOpenChange"], [1, "stream-chat-angular__image-modal", "str-chat__image-carousel"], ["data-testid", "image-modal-prev", "type", "button", 1, "stream-chat-angular__image-modal-stepper", "str-chat__image-carousel-stepper", 3, "ngStyle", "click", "keyup.enter"], ["icon", "arrow-left"], ["data-testid", "modal-image", 1, "stream-chat-angular__image-modal-image", "str-chat__image-carousel-image", 3, "src", "alt", "ngStyle"], ["type", "button", "data-testid", "image-modal-next", 1, "stream-chat-angular__image-modal-stepper", "str-chat__image-carousel-stepper", 3, "ngStyle", "click", "keyup.enter"], ["icon", "arrow-right"]],
  template: function AttachmentListComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, AttachmentListComponent_div_0_Template, 3, 3, "div", 0)(1, AttachmentListComponent_ng_template_1_Template, 1, 2, "ng-template", null, 1, ɵɵtemplateRefExtractor)(3, AttachmentListComponent_ng_template_3_Template, 7, 16, "ng-template", null, 2, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.orderedAttachments.length > 0);
    }
  },
  dependencies: [IconPlaceholderComponent, ModalComponent, NgIf, NgForOf, NgTemplateOutlet, NgStyle, AsyncPipe, TranslatePipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AttachmentListComponent, [{
    type: Component,
    args: [{
      selector: "stream-attachment-list",
      templateUrl: "./attachment-list.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: CustomTemplatesService
    }, {
      type: ChannelService
    }, {
      type: AttachmentConfigurationService
    }, {
      type: ThemeService
    }];
  }, {
    messageId: [{
      type: Input
    }],
    parentMessageId: [{
      type: Input
    }],
    attachments: [{
      type: Input
    }],
    imageModalStateChange: [{
      type: Output
    }],
    class: [{
      type: HostBinding
    }],
    modalContent: [{
      type: ViewChild,
      args: ["modalContent", {
        static: true
      }]
    }]
  });
})();
var AttachmentPreviewListComponent = class {
  constructor(themeService) {
    this.retryAttachmentUpload = new EventEmitter();
    this.deleteAttachment = new EventEmitter();
    this.themeVersion = themeService.themeVersion;
  }
  attachmentUploadRetried(file) {
    this.retryAttachmentUpload.emit(file);
  }
  attachmentDeleted(upload) {
    this.deleteAttachment.emit(upload);
  }
  trackByFile(_, item) {
    return item.file;
  }
};
AttachmentPreviewListComponent.ɵfac = function AttachmentPreviewListComponent_Factory(t2) {
  return new (t2 || AttachmentPreviewListComponent)(ɵɵdirectiveInject(ThemeService));
};
AttachmentPreviewListComponent.ɵcmp = ɵɵdefineComponent({
  type: AttachmentPreviewListComponent,
  selectors: [["stream-attachment-preview-list"]],
  inputs: {
    attachmentUploads$: "attachmentUploads$"
  },
  outputs: {
    retryAttachmentUpload: "retryAttachmentUpload",
    deleteAttachment: "deleteAttachment"
  },
  decls: 8,
  vars: 6,
  consts: [["class", "rfu-image-previewer", 4, "ngIf"], ["class", "str-chat__attachment-preview-list", 4, "ngIf"], ["deleteButton", ""], ["retryButton", ""], [1, "rfu-image-previewer"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "rfu-image-previewer__image", "data-testclass", "attachment-image-preview", 3, "rfu-image-previewer__image--loaded", 4, "ngIf"], ["class", "rfu-file-previewer", "data-testclass", "attachment-file-preview", 4, "ngIf"], ["data-testclass", "attachment-image-preview", 1, "rfu-image-previewer__image"], ["class", "rfu-image-previewer__retry", "data-testclass", "upload-retry", 3, "click", "keyup.enter", 4, "ngIf"], [1, "rfu-thumbnail__wrapper", 2, "width", "100", "height", "100"], [1, "rfu-thumbnail__overlay"], ["data-testclass", "file-delete", "role", "button", 1, "rfu-icon-button", 3, "click", "keyup.enter"], ["icon", "close-no-outline"], ["class", "rfu-thumbnail__image", "data-testclass", "attachment-image", 3, "src", "alt", 4, "ngIf"], ["data-testclass", "loading-indicator", "color", "rgba(255,255,255,0.7)", 4, "ngIf"], ["data-testclass", "upload-retry", 1, "rfu-image-previewer__retry", 3, "click", "keyup.enter"], ["icon", "retry"], ["data-testclass", "attachment-image", 1, "rfu-thumbnail__image", 3, "src", "alt"], ["data-testclass", "loading-indicator", "color", "rgba(255,255,255,0.7)"], ["data-testclass", "attachment-file-preview", 1, "rfu-file-previewer"], [1, "rfu-file-previewer__file"], ["icon", "file"], ["data-testclass", "file-download-link", "download", "", 3, "href", "click", "keyup.enter"], [4, "ngIf"], ["data-testclass", "file-delete", 1, "rfu-file-previewer__close-button", 3, "click", "keyup.enter"], ["class", "rfu-file-previewer__loading-indicator", 4, "ngIf"], ["data-testclass", "upload-retry", "translate", "", 1, "rfu-file-previewer__failed", 3, "click", "keyup.enter"], ["translate", "", 1, "rfu-file-previewer__retry", 3, "click", "keyup.enter"], [1, "rfu-file-previewer__loading-indicator"], [1, "str-chat__attachment-preview-list"], [1, "str-chat__attachment-list-scroll-container"], ["class", "str-chat__attachment-preview-image", "data-testclass", "attachment-image-preview", 4, "ngIf"], ["class", "str-chat__attachment-preview-file", "data-testclass", "attachment-file-preview", 4, "ngIf"], ["data-testclass", "attachment-image-preview", 1, "str-chat__attachment-preview-image"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "str-chat__attachment-preview-image-loading", 4, "ngIf"], ["class", "str-chat__attachment-preview-thumbnail", "data-testclass", "attachment-image", 3, "src", "alt", 4, "ngIf"], [1, "str-chat__attachment-preview-image-loading"], ["data-testclass", "loading-indicator", 3, "size"], ["data-testclass", "attachment-image", 1, "str-chat__attachment-preview-thumbnail", 3, "src", "alt"], ["data-testclass", "attachment-file-preview", 1, "str-chat__attachment-preview-file"], ["icon", "unspecified-filetype"], [1, "str-chat__attachment-preview-file-end"], [1, "str-chat__attachment-preview-file-name"], ["class", "str-chat__attachment-preview-file-download", "data-testclass", "file-download-link", "download", "", 3, "href", "click", "keyup.enter", 4, "ngIf"], ["data-testclass", "loading-indicator", 3, "size", 4, "ngIf"], ["data-testclass", "file-download-link", "download", "", 1, "str-chat__attachment-preview-file-download", 3, "href", "click", "keyup.enter"], ["icon", "download"], ["data-testclass", "file-delete", "role", "button", 1, "str-chat__attachment-preview-delete", 3, "click", "keyup.enter"], ["data-testclass", "upload-retry", 3, "class", "click", "keyup.enter", 4, "ngIf"], ["data-testclass", "upload-retry", 3, "click", "keyup.enter"]],
  template: function AttachmentPreviewListComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, AttachmentPreviewListComponent_div_0_Template, 3, 4, "div", 0);
      ɵɵpipe(1, "async");
      ɵɵtemplate(2, AttachmentPreviewListComponent_div_2_Template, 4, 4, "div", 1);
      ɵɵpipe(3, "async");
      ɵɵtemplate(4, AttachmentPreviewListComponent_ng_template_4_Template, 2, 0, "ng-template", null, 2, ɵɵtemplateRefExtractor)(6, AttachmentPreviewListComponent_ng_template_6_Template, 1, 1, "ng-template", null, 3, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      let tmp_0_0;
      let tmp_1_0;
      ɵɵproperty("ngIf", ((tmp_0_0 = ɵɵpipeBind1(1, 2, ctx.attachmentUploads$)) == null ? null : tmp_0_0.length) && ctx.themeVersion === "1");
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ((tmp_1_0 = ɵɵpipeBind1(3, 4, ctx.attachmentUploads$)) == null ? null : tmp_1_0.length) && ctx.themeVersion === "2");
    }
  },
  dependencies: [IconPlaceholderComponent, LoadingIndicatorPlaceholderComponent, NgIf, NgForOf, TranslateDirective, NgTemplateOutlet, AsyncPipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AttachmentPreviewListComponent, [{
    type: Component,
    args: [{
      selector: "stream-attachment-preview-list",
      templateUrl: "./attachment-preview-list.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: ThemeService
    }];
  }, {
    attachmentUploads$: [{
      type: Input
    }],
    retryAttachmentUpload: [{
      type: Output
    }],
    deleteAttachment: [{
      type: Output
    }]
  });
})();
var MessageInputComponent = class {
  constructor(channelService, notificationService, attachmentService, configService, textareaType, componentFactoryResolver, cdRef, chatClient, emojiInputService, customTemplatesService, themeService) {
    this.channelService = channelService;
    this.notificationService = notificationService;
    this.attachmentService = attachmentService;
    this.configService = configService;
    this.textareaType = textareaType;
    this.componentFactoryResolver = componentFactoryResolver;
    this.cdRef = cdRef;
    this.chatClient = chatClient;
    this.emojiInputService = emojiInputService;
    this.customTemplatesService = customTemplatesService;
    this.mode = "main";
    this.autoFocus = true;
    this.messageUpdate = new EventEmitter();
    this.class = "str-chat__message-input-angular-host";
    this.textareaValue = "";
    this.mentionedUsers = [];
    this.typingStart$ = new Subject();
    this.isCooldownInProgress = false;
    this.fileInputId = v4_default();
    this.subscriptions = [];
    this.isViewInited = false;
    this.defaultTextareaPlaceholder = "streamChat.Type your message";
    this.slowModeTextareaPlaceholder = "streamChat.Slow Mode ON";
    this.themeVersion = themeService.themeVersion;
    this.textareaPlaceholder = this.defaultTextareaPlaceholder;
    this.subscriptions.push(this.attachmentService.attachmentUploadInProgressCounter$.subscribe((counter) => {
      if (counter === 0 && this.hideNotification) {
        this.hideNotification();
        this.hideNotification = void 0;
      }
    }));
    this.subscriptions.push(this.channelService.activeChannel$.subscribe((channel) => {
      var _a;
      if (channel && this.channel && channel.id !== this.channel.id) {
        this.textareaValue = "";
        this.attachmentService.resetAttachmentUploads();
      }
      const capabilities = (_a = channel === null || channel === void 0 ? void 0 : channel.data) === null || _a === void 0 ? void 0 : _a.own_capabilities;
      if (capabilities) {
        this.isFileUploadAuthorized = capabilities.indexOf("upload-file") !== -1;
        this.canSendLinks = capabilities.indexOf("send-links") !== -1;
        this.channel = channel;
        this.setCanSendMessages();
      }
    }));
    this.subscriptions.push(this.chatClient.appSettings$.subscribe((appSettings) => this.appSettings = appSettings));
    this.subscriptions.push(this.channelService.messageToQuote$.subscribe((m) => {
      const isThreadReply = m && m.parent_id;
      if (this.mode === "thread" && isThreadReply || this.mode === "thread" && this.quotedMessage && !m || this.mode === "main" && !isThreadReply) {
        this.quotedMessage = m;
      }
    }));
    this.attachmentUploads$ = this.attachmentService.attachmentUploads$;
    this.attachmentUploadInProgressCounter$ = this.attachmentService.attachmentUploadInProgressCounter$;
    this.isFileUploadEnabled = this.configService.isFileUploadEnabled;
    this.isMultipleFileUploadEnabled = this.configService.isMultipleFileUploadEnabled;
    this.areMentionsEnabled = this.configService.areMentionsEnabled;
    this.mentionScope = this.configService.mentionScope;
    this.inputMode = this.configService.inputMode;
    this.subscriptions.push(this.typingStart$.subscribe(() => void this.channelService.typingStarted(this.parentMessageId)));
    this.subscriptions.push(combineLatest([this.channelService.latestMessageDateByUserByChannels$, this.channelService.activeChannel$]).pipe(map(([latestMessages, channel]) => [latestMessages[(channel === null || channel === void 0 ? void 0 : channel.cid) || ""], channel])).subscribe(([latestMessageDate, channel]) => {
      var _a, _b, _c;
      const cooldown = ((_a = channel === null || channel === void 0 ? void 0 : channel.data) === null || _a === void 0 ? void 0 : _a.cooldown) && latestMessageDate && Math.round(((_b = channel === null || channel === void 0 ? void 0 : channel.data) === null || _b === void 0 ? void 0 : _b.cooldown) - ((/* @__PURE__ */ new Date()).getTime() - latestMessageDate.getTime()) / 1e3);
      if (cooldown && cooldown > 0 && ((_c = channel === null || channel === void 0 ? void 0 : channel.data) === null || _c === void 0 ? void 0 : _c.own_capabilities).includes("slow-mode")) {
        this.startCooldown(cooldown);
      } else if (this.isCooldownInProgress) {
        this.stopCooldown();
      }
    }));
  }
  ngOnInit() {
    this.subscriptions.push(this.customTemplatesService.emojiPickerTemplate$.subscribe((template) => {
      this.emojiPickerTemplate = template;
      this.cdRef.detectChanges();
    }));
    this.subscriptions.push(this.customTemplatesService.attachmentPreviewListTemplate$.subscribe((template) => {
      this.attachmentPreviewListTemplate = template;
      this.cdRef.detectChanges();
    }));
    this.subscriptions.push(this.customTemplatesService.customAttachmentUploadTemplate$.subscribe((template) => {
      this.customAttachmentUploadTemplate = template;
      this.cdRef.detectChanges();
    }));
  }
  ngAfterViewInit() {
    this.isViewInited = true;
    this.initTextarea();
  }
  ngOnChanges(changes) {
    if (changes.message) {
      this.attachmentService.resetAttachmentUploads();
      if (this.isUpdate) {
        this.attachmentService.createFromAttachments(this.message.attachments || []);
        this.textareaValue = this.message.text || "";
      }
    }
    if (changes.isFileUploadEnabled) {
      this.configService.isFileUploadEnabled = this.isFileUploadEnabled;
    }
    if (changes.isMultipleFileUploadEnabled) {
      this.configService.isMultipleFileUploadEnabled = this.isMultipleFileUploadEnabled;
    }
    if (changes.areMentionsEnabled) {
      this.configService.areMentionsEnabled = this.areMentionsEnabled;
    }
    if (changes.mentionScope) {
      this.configService.mentionScope = this.mentionScope;
    }
    if (changes.mode) {
      this.setCanSendMessages();
    }
    if (changes.inputMode) {
      this.configService.inputMode = this.inputMode;
    }
    if (changes.sendMessage$) {
      if (this.sendMessageSubcription) {
        this.sendMessageSubcription.unsubscribe();
      }
      if (this.sendMessage$) {
        this.sendMessageSubcription = this.sendMessage$.subscribe(() => void this.messageSent());
      }
    }
  }
  ngOnDestroy() {
    if (this.sendMessageSubcription) {
      this.sendMessageSubcription.unsubscribe();
    }
    this.subscriptions.forEach((s2) => s2.unsubscribe());
  }
  messageSent() {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      if (this.isCooldownInProgress) {
        return;
      }
      let attachmentUploadInProgressCounter;
      this.attachmentService.attachmentUploadInProgressCounter$.pipe(first()).subscribe((counter) => attachmentUploadInProgressCounter = counter);
      if (attachmentUploadInProgressCounter > 0) {
        if (!this.hideNotification) {
          this.hideNotification = this.notificationService.addPermanentNotification("streamChat.Wait until all attachments have uploaded");
        }
        return;
      }
      const attachments = this.attachmentService.mapToAttachments();
      let text = this.textareaValue;
      text = text.replace(/^\n+/g, "");
      text = text.replace(/\n+$/g, "");
      const textContainsOnlySpaceChars = !text.replace(/ /g, "");
      if ((!text || textContainsOnlySpaceChars) && (!attachments || attachments.length === 0)) {
        return;
      }
      if (textContainsOnlySpaceChars) {
        text = "";
      }
      if (this.containsLinks && !this.canSendLinks) {
        this.notificationService.addTemporaryNotification("streamChat.Sending links is not allowed in this conversation");
        return;
      }
      if (!this.isUpdate) {
        this.textareaValue = "";
      }
      try {
        const message = yield this.isUpdate ? this.channelService.updateMessage(Object.assign(Object.assign({}, this.message), {
          text,
          attachments
        })) : this.channelService.sendMessage(text, attachments, this.mentionedUsers, this.parentMessageId, (_a = this.quotedMessage) === null || _a === void 0 ? void 0 : _a.id);
        this.messageUpdate.emit({
          message
        });
        if (!this.isUpdate) {
          this.attachmentService.resetAttachmentUploads();
        }
      } catch (error) {
        if (this.isUpdate) {
          this.notificationService.addTemporaryNotification("streamChat.Edit message request failed");
        }
      }
      void this.channelService.typingStopped(this.parentMessageId);
      if (this.quotedMessage) {
        this.deselectMessageToQuote();
      }
    });
  }
  get containsLinks() {
    return /(?:(?:https?|ftp):\/\/)?[\w/\-?=%.]+\.[\w/\-&?=%.]+/.test(this.textareaValue);
  }
  get quotedMessageAttachments() {
    var _a;
    const originalAttachments = (_a = this.quotedMessage) === null || _a === void 0 ? void 0 : _a.attachments;
    return originalAttachments && originalAttachments.length ? [originalAttachments[0]] : [];
  }
  get disabledTextareaText() {
    if (!this.canSendMessages) {
      return this.mode === "thread" ? "streamChat.You can't send thread replies in this channel" : "streamChat.You can't send messages in this channel";
    }
    return "";
  }
  filesSelected(fileList) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!(yield this.areAttachemntsValid(fileList))) {
        return;
      }
      yield this.attachmentService.filesSelected(fileList);
      this.clearFileInput();
    });
  }
  deselectMessageToQuote() {
    this.channelService.selectMessageToQuote(void 0);
  }
  getEmojiPickerContext() {
    return {
      emojiInput$: this.emojiInputService.emojiInput$
    };
  }
  getAttachmentPreviewListContext() {
    return {
      attachmentUploads$: this.attachmentService.attachmentUploads$,
      deleteUploadHandler: this.deleteUpload.bind(this),
      retryUploadHandler: this.retryUpload.bind(this)
    };
  }
  getAttachmentUploadContext() {
    return {
      isMultipleFileUploadEnabled: this.isMultipleFileUploadEnabled,
      attachmentService: this.attachmentService
    };
  }
  deleteUpload(upload) {
    if (this.isUpdate) {
      setTimeout(() => {
        void this.attachmentService.deleteAttachment(upload);
      });
    } else {
      void this.attachmentService.deleteAttachment(upload);
    }
  }
  retryUpload(file) {
    void this.attachmentService.retryAttachmentUpload(file);
  }
  clearFileInput() {
    this.fileInput.nativeElement.value = "";
  }
  get isUpdate() {
    return !!this.message;
  }
  initTextarea() {
    if (!this.canSendMessages) {
      this.textareaRef = void 0;
    }
    if (!this.canSendMessages || this.textareaRef || !this.textareaAnchor) {
      return;
    }
    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.textareaType);
    this.textareaRef = this.textareaAnchor.viewContainerRef.createComponent(componentFactory);
    this.cdRef.detectChanges();
  }
  areAttachemntsValid(fileList) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!fileList) {
        return true;
      }
      if (!this.appSettings) {
        yield this.chatClient.getAppSettings();
      }
      let isValid = true;
      Array.from(fileList).forEach((f2) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11;
        let hasBlockedExtension;
        let hasBlockedMimeType;
        let hasNotAllowedExtension;
        let hasNotAllowedMimeType;
        if (isImageFile(f2)) {
          hasBlockedExtension = !!((_c = (_b = (_a = this.appSettings) === null || _a === void 0 ? void 0 : _a.image_upload_config) === null || _b === void 0 ? void 0 : _b.blocked_file_extensions) === null || _c === void 0 ? void 0 : _c.find((ext) => f2.name.endsWith(ext)));
          hasBlockedMimeType = !!((_f = (_e = (_d = this.appSettings) === null || _d === void 0 ? void 0 : _d.image_upload_config) === null || _e === void 0 ? void 0 : _e.blocked_mime_types) === null || _f === void 0 ? void 0 : _f.find((type) => f2.type === type));
          hasNotAllowedExtension = !!((_j = (_h = (_g = this.appSettings) === null || _g === void 0 ? void 0 : _g.image_upload_config) === null || _h === void 0 ? void 0 : _h.allowed_file_extensions) === null || _j === void 0 ? void 0 : _j.length) && !((_m = (_l = (_k = this.appSettings) === null || _k === void 0 ? void 0 : _k.image_upload_config) === null || _l === void 0 ? void 0 : _l.allowed_file_extensions) === null || _m === void 0 ? void 0 : _m.find((ext) => f2.name.endsWith(ext)));
          hasNotAllowedMimeType = !!((_q = (_p = (_o = this.appSettings) === null || _o === void 0 ? void 0 : _o.image_upload_config) === null || _p === void 0 ? void 0 : _p.allowed_mime_types) === null || _q === void 0 ? void 0 : _q.length) && !((_t = (_s = (_r = this.appSettings) === null || _r === void 0 ? void 0 : _r.image_upload_config) === null || _s === void 0 ? void 0 : _s.allowed_mime_types) === null || _t === void 0 ? void 0 : _t.find((type) => f2.type === type));
        } else {
          hasBlockedExtension = !!((_w = (_v = (_u = this.appSettings) === null || _u === void 0 ? void 0 : _u.file_upload_config) === null || _v === void 0 ? void 0 : _v.blocked_file_extensions) === null || _w === void 0 ? void 0 : _w.find((ext) => f2.name.endsWith(ext)));
          hasBlockedMimeType = !!((_z = (_y = (_x = this.appSettings) === null || _x === void 0 ? void 0 : _x.file_upload_config) === null || _y === void 0 ? void 0 : _y.blocked_mime_types) === null || _z === void 0 ? void 0 : _z.find((type) => f2.type === type));
          hasNotAllowedExtension = !!((_2 = (_1 = (_0 = this.appSettings) === null || _0 === void 0 ? void 0 : _0.file_upload_config) === null || _1 === void 0 ? void 0 : _1.allowed_file_extensions) === null || _2 === void 0 ? void 0 : _2.length) && !((_5 = (_4 = (_3 = this.appSettings) === null || _3 === void 0 ? void 0 : _3.file_upload_config) === null || _4 === void 0 ? void 0 : _4.allowed_file_extensions) === null || _5 === void 0 ? void 0 : _5.find((ext) => f2.name.endsWith(ext)));
          hasNotAllowedMimeType = !!((_8 = (_7 = (_6 = this.appSettings) === null || _6 === void 0 ? void 0 : _6.file_upload_config) === null || _7 === void 0 ? void 0 : _7.allowed_mime_types) === null || _8 === void 0 ? void 0 : _8.length) && !((_11 = (_10 = (_9 = this.appSettings) === null || _9 === void 0 ? void 0 : _9.file_upload_config) === null || _10 === void 0 ? void 0 : _10.allowed_mime_types) === null || _11 === void 0 ? void 0 : _11.find((type) => f2.type === type));
        }
        if (hasBlockedExtension || hasBlockedMimeType || hasNotAllowedExtension || hasNotAllowedMimeType) {
          this.notificationService.addTemporaryNotification("streamChat.Error uploading file, extension not supported", void 0, void 0, {
            name: f2.name,
            ext: f2.type
          });
          isValid = false;
        }
      });
      return isValid;
    });
  }
  setCanSendMessages() {
    var _a, _b;
    const capabilities = (_b = (_a = this.channel) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.own_capabilities;
    if (!capabilities) {
      this.canSendMessages = false;
    } else {
      this.canSendMessages = capabilities.indexOf(this.mode === "main" ? "send-message" : "send-reply") !== -1;
    }
    if (this.isViewInited) {
      this.cdRef.detectChanges();
      this.initTextarea();
    }
  }
  get parentMessageId() {
    let parentMessageId = void 0;
    if (this.mode === "thread") {
      this.channelService.activeParentMessageId$.pipe(first()).subscribe((id) => parentMessageId = id);
    }
    return parentMessageId;
  }
  startCooldown(cooldown) {
    this.textareaPlaceholder = this.slowModeTextareaPlaceholder;
    this.isCooldownInProgress = true;
    this.cooldown$ = timer(0, 1e3).pipe(take(cooldown + 1), map((v) => cooldown - v), tap((v) => {
      if (v === 0) {
        this.stopCooldown();
      }
    }));
  }
  stopCooldown() {
    this.cooldown$ = void 0;
    this.isCooldownInProgress = false;
    this.textareaPlaceholder = this.defaultTextareaPlaceholder;
  }
};
MessageInputComponent.ɵfac = function MessageInputComponent_Factory(t2) {
  return new (t2 || MessageInputComponent)(ɵɵdirectiveInject(ChannelService), ɵɵdirectiveInject(NotificationService), ɵɵdirectiveInject(AttachmentService), ɵɵdirectiveInject(MessageInputConfigService), ɵɵdirectiveInject(textareaInjectionToken), ɵɵdirectiveInject(ComponentFactoryResolver$1), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ChatClientService), ɵɵdirectiveInject(EmojiInputService), ɵɵdirectiveInject(CustomTemplatesService), ɵɵdirectiveInject(ThemeService));
};
MessageInputComponent.ɵcmp = ɵɵdefineComponent({
  type: MessageInputComponent,
  selectors: [["stream-message-input"]],
  viewQuery: function MessageInputComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c122, 5);
      ɵɵviewQuery(TextareaDirective, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.fileInput = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textareaAnchor = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function MessageInputComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassMap(ctx.class);
    }
  },
  inputs: {
    isFileUploadEnabled: "isFileUploadEnabled",
    areMentionsEnabled: "areMentionsEnabled",
    mentionScope: "mentionScope",
    mode: "mode",
    isMultipleFileUploadEnabled: "isMultipleFileUploadEnabled",
    message: "message",
    sendMessage$: "sendMessage$",
    inputMode: "inputMode",
    autoFocus: "autoFocus"
  },
  outputs: {
    messageUpdate: "messageUpdate"
  },
  features: [ɵɵProvidersFeature([AttachmentService, EmojiInputService]), ɵɵNgOnChangesFeature],
  decls: 2,
  vars: 2,
  consts: [[3, "class", "str-chat__input-flat-has-attachments", "str-chat__input-flat-quoted", 4, "ngIf"], ["class", "str-chat__message-input str-chat-angular__message-input", 4, "ngIf"], ["class", "quoted-message-preview", 4, "ngIf"], [1, "str-chat__input-flat-wrapper", 2, "width", "100%"], ["defaultAttachmentsPreview", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "rta", "str-chat__textarea", "str-chat-angular__textarea"], ["data-testid", "emoji-picker", 4, "ngIf"], [4, "ngIf", "ngIfElse"], ["disabledTextarea", ""], [4, "ngIf"], ["data-testid", "send-button", "class", "str-chat__send-button", 3, "click", "keyup.enter", 4, "ngIf"], ["class", "str-chat__input-flat-cooldown", "data-testid", "cooldown-timer", 4, "ngIf"], [1, "quoted-message-preview"], [1, "quoted-message-preview-header"], ["data-testid", "remove-quote", 1, "str-chat__square-button", 3, "click", "keyup.enter"], ["icon", "close-no-outline", 2, "font-size", "15px", "line-height", "15px", "width", "15px", "height", "15px"], [1, "quoted-message-preview-content"], ["data-testid", "qouted-message-avatar", "type", "user", "location", "quoted-message-sender", 1, "str-chat-angular__avatar-host", 3, "imageUrl", "name", "size", "user"], [1, "quoted-message-preview-content-inner"], [3, "attachments", "messageId", 4, "ngIf"], ["data-testid", "quoted-message-text", 3, "innerHTML"], [3, "attachments", "messageId"], [1, "rfu-image-previewer-angular-host", 3, "attachmentUploads$", "retryAttachmentUpload", "deleteAttachment"], ["data-testid", "emoji-picker"], [1, "str-chat__input-flat-emojiselect", "str-chat-angular__emojiselect"], ["streamTextarea", "", 3, "value", "componentRef", "areMentionsEnabled", "mentionScope", "placeholder", "inputMode", "autoFocus", "valueChange", "send", "userMentions"], ["disabled", "", "rows", "1", "data-testid", "disabled-textarea", 1, "rta__textarea", "str-chat__textarea__textarea", 3, "value"], ["defaultAttachmentUpload", ""], ["data-testid", "file-upload-button", 1, "str-chat__fileupload-wrapper"], [1, "str-chat__tooltip"], [1, "rfu-file-upload-button"], ["type", "file", "data-testid", "file-input", 1, "rfu-file-input", 3, "multiple", "change"], ["fileInput", ""], [1, "str-chat__input-flat-fileupload"], ["icon", "file-upload"], ["data-testid", "send-button", 1, "str-chat__send-button", 3, "click", "keyup.enter"], ["icon", "send", 1, "str-chat__send-button-angular"], ["data-testid", "cooldown-timer", 1, "str-chat__input-flat-cooldown"], [1, "str-chat__message-input-cooldown-text"], [1, "str-chat__message-input", "str-chat-angular__message-input"], ["class", "str-chat__quoted-message-preview-header", 4, "ngIf"], ["notAllowed", ""], [1, "str-chat__quoted-message-preview-header"], [1, "str-chat__quoted-message-reply-to-message"], ["data-testid", "remove-quote", 1, "str-chat__quoted-message-remove", 3, "click", "keyup.enter"], ["icon", "close-no-outline"], [1, "str-chat__message-input-inner", "str-chat-angular__message-input-inner"], [1, "str-chat__message-textarea-container"], ["data-testid", "quoted-message-container", "class", "str-chat__quoted-message-preview", 4, "ngIf"], [1, "str-chat__message-textarea-with-emoji-picker"], ["streamTextarea", "", 3, "value", "componentRef", "areMentionsEnabled", "mentionScope", "inputMode", "autoFocus", "placeholder", "valueChange", "send", "userMentions"], [1, "str-chat__message-textarea-emoji-picker"], ["data-testid", "send-button", "class", "str-chat__send-button", 3, "disabled", "click", "keyup.enter", 4, "ngIf"], ["class", "str-chat__message-input-cooldown", "data-testid", "cooldown-timer", 4, "ngIf"], ["data-testid", "file-upload-button", 1, "str-chat__file-input-container"], ["type", "file", "data-testid", "file-input", 1, "str-chat__file-input", 3, "multiple", "id", "change"], [1, "str-chat__file-input-label", 3, "for"], ["icon", "attach"], ["data-testid", "quoted-message-container", 1, "str-chat__quoted-message-preview"], ["data-testid", "qouted-message-avatar", "type", "user", "location", "quoted-message-sender", 1, "str-chat-angular__avatar-host", "str-chat__message-sender-avatar", 3, "imageUrl", "name", "size", "user"], [1, "quoted-message-preview-content-inner", "str-chat__quoted-message-bubble"], ["data-testid", "quoted-message-text", 1, "str-chat__quoted-message-text", 3, "innerHTML"], [1, "str-chat__attachment-preview-list-angular-host", 3, "attachmentUploads$", "retryAttachmentUpload", "deleteAttachment"], ["data-testid", "send-button", 1, "str-chat__send-button", 3, "disabled", "click", "keyup.enter"], ["icon", "send"], ["data-testid", "cooldown-timer", 1, "str-chat__message-input-cooldown"], ["data-testid", "disabled-textarea", 1, "str-chat__message-input-not-allowed"]],
  template: function MessageInputComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, MessageInputComponent_div_0_Template, 16, 21, "div", 0)(1, MessageInputComponent_div_1_Template, 5, 3, "div", 1);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.themeVersion !== "2");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.themeVersion === "2");
    }
  },
  dependencies: [IconPlaceholderComponent, AvatarPlaceholderComponent, AttachmentListComponent, AttachmentPreviewListComponent, NgIf, NgTemplateOutlet, TextareaDirective, AsyncPipe, TranslatePipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MessageInputComponent, [{
    type: Component,
    args: [{
      selector: "stream-message-input",
      templateUrl: "./message-input.component.html",
      styles: [],
      providers: [AttachmentService, EmojiInputService]
    }]
  }], function() {
    return [{
      type: ChannelService
    }, {
      type: NotificationService
    }, {
      type: AttachmentService
    }, {
      type: MessageInputConfigService
    }, {
      type: Type,
      decorators: [{
        type: Inject,
        args: [textareaInjectionToken]
      }]
    }, {
      type: ComponentFactoryResolver$1
    }, {
      type: ChangeDetectorRef
    }, {
      type: ChatClientService
    }, {
      type: EmojiInputService
    }, {
      type: CustomTemplatesService
    }, {
      type: ThemeService
    }];
  }, {
    isFileUploadEnabled: [{
      type: Input
    }],
    areMentionsEnabled: [{
      type: Input
    }],
    mentionScope: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    isMultipleFileUploadEnabled: [{
      type: Input
    }],
    message: [{
      type: Input
    }],
    sendMessage$: [{
      type: Input
    }],
    inputMode: [{
      type: Input
    }],
    autoFocus: [{
      type: Input
    }],
    messageUpdate: [{
      type: Output
    }],
    class: [{
      type: HostBinding
    }],
    fileInput: [{
      type: ViewChild,
      args: ["fileInput"]
    }],
    textareaAnchor: [{
      type: ViewChild,
      args: [TextareaDirective, {
        static: false
      }]
    }]
  });
})();
var NotificationComponent = class {
  constructor() {
  }
};
NotificationComponent.ɵfac = function NotificationComponent_Factory(t2) {
  return new (t2 || NotificationComponent)();
};
NotificationComponent.ɵcmp = ɵɵdefineComponent({
  type: NotificationComponent,
  selectors: [["stream-notification"]],
  inputs: {
    type: "type",
    content: "content"
  },
  ngContentSelectors: _c4,
  decls: 4,
  vars: 5,
  consts: [["data-testid", "custom-notification"], [4, "ngIf", "ngIfElse"], ["elseContent", ""], [4, "ngTemplateOutlet"]],
  template: function NotificationComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0);
      ɵɵtemplate(1, NotificationComponent_ng_container_1_Template, 2, 1, "ng-container", 1)(2, NotificationComponent_ng_template_2_Template, 1, 0, "ng-template", null, 2, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r2 = ɵɵreference(3);
      ɵɵclassMapInterpolate1("str-chat__custom-notification notification-", ctx.type, " str-chat__notification");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.content)("ngIfElse", _r2);
    }
  },
  dependencies: [NgIf, NgTemplateOutlet],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NotificationComponent, [{
    type: Component,
    args: [{
      selector: "stream-notification",
      templateUrl: "./notification.component.html",
      styles: []
    }]
  }], function() {
    return [];
  }, {
    type: [{
      type: Input
    }],
    content: [{
      type: Input
    }]
  });
})();
var NotificationListComponent = class {
  constructor(customTemplatesService, notificationService, themeService) {
    this.customTemplatesService = customTemplatesService;
    this.notificationService = notificationService;
    this.themeService = themeService;
    this.notifications$ = this.notificationService.notifications$;
    this.theme$ = this.themeService.theme$;
    this.themeVersion = this.themeService.themeVersion;
  }
  trackById(_, item) {
    return item.id;
  }
  getNotificationContentContext(notification) {
    return Object.assign(Object.assign({}, notification.templateContext), {
      dismissFn: notification.dismissFn
    });
  }
};
NotificationListComponent.ɵfac = function NotificationListComponent_Factory(t2) {
  return new (t2 || NotificationListComponent)(ɵɵdirectiveInject(CustomTemplatesService), ɵɵdirectiveInject(NotificationService), ɵɵdirectiveInject(ThemeService));
};
NotificationListComponent.ɵcmp = ɵɵdefineComponent({
  type: NotificationListComponent,
  selectors: [["stream-notification-list"]],
  decls: 6,
  vars: 11,
  consts: [["data-testid", "notification-list"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["defaultNotification", ""], ["notificationContent", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["data-testclass", "notification-content", 4, "ngIf"], [4, "ngIf"], ["data-testclass", "notification-content"], [3, "type", "content"]],
  template: function NotificationListComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0);
      ɵɵpipe(1, "async");
      ɵɵtemplate(2, NotificationListComponent_ng_container_2_Template, 5, 7, "ng-container", 1);
      ɵɵpipe(3, "async");
      ɵɵelementEnd();
      ɵɵtemplate(4, NotificationListComponent_ng_template_4_Template, 1, 2, "ng-template", null, 2, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      ɵɵclassMapInterpolate1("str-chat__theme-", ɵɵpipeBind1(1, 7, ctx.theme$), " str-chat__list-notifications");
      ɵɵclassProp("str-chat", ctx.themeVersion === "2");
      ɵɵadvance(2);
      ɵɵproperty("ngForOf", ɵɵpipeBind1(3, 9, ctx.notifications$))("ngForTrackBy", ctx.trackById);
    }
  },
  dependencies: [NotificationComponent, NgForOf, NgIf, NgTemplateOutlet, AsyncPipe, TranslatePipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NotificationListComponent, [{
    type: Component,
    args: [{
      selector: "stream-notification-list",
      templateUrl: "./notification-list.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: CustomTemplatesService
    }, {
      type: NotificationService
    }, {
      type: ThemeService
    }];
  }, null);
})();
var MessageActionsBoxComponent = class {
  constructor(chatClientService, notificationService, channelService, customTemplatesService) {
    this.chatClientService = chatClientService;
    this.notificationService = notificationService;
    this.channelService = channelService;
    this.customTemplatesService = customTemplatesService;
    this.isOpen = false;
    this.isMine = false;
    this.enabledActions = [];
    this.customActions = [];
    this.displayedActionsCount = new EventEmitter();
    this.isEditing = new EventEmitter();
    this.isEditModalOpen = false;
    this.visibleMessageActionItems = [];
    this.sendMessageSubject = new Subject();
    this.modalClosed = () => {
      this.isEditModalOpen = false;
      this.isEditing.emit(false);
    };
    this.messageActionItems = [{
      actionName: "quote",
      actionLabelOrTranslationKey: "streamChat.Reply",
      actionHandler: (message) => this.channelService.selectMessageToQuote(message),
      isVisible: (enabledActions) => enabledActions.indexOf("quote-message") !== -1
    }, {
      actionName: "pin",
      actionLabelOrTranslationKey: (message) => message.pinned ? "streamChat.Unpin" : "streamChat.Pin",
      actionHandler: (message) => message.pinned ? this.channelService.unpinMessage(message) : this.channelService.pinMessage(message),
      isVisible: (enabledActions) => enabledActions.indexOf("pin-message") !== -1
    }, {
      actionName: "flag",
      actionLabelOrTranslationKey: "streamChat.Flag",
      actionHandler: (message) => __awaiter(this, void 0, void 0, function* () {
        try {
          yield this.chatClientService.flagMessage(message.id);
          this.notificationService.addTemporaryNotification("streamChat.Message has been successfully flagged", "success");
        } catch (err) {
          this.notificationService.addTemporaryNotification("streamChat.Error adding flag");
        }
      }),
      isVisible: (enabledActions, isMine) => enabledActions.indexOf("flag-message") !== -1 && !isMine
    }, {
      actionName: "edit",
      actionLabelOrTranslationKey: "streamChat.Edit Message",
      actionHandler: () => {
        this.isEditing.emit(true);
        this.isEditModalOpen = true;
      },
      isVisible: (enabledActions, isMine) => enabledActions.indexOf("update-own-message") !== -1 && isMine || enabledActions.indexOf("update-any-message") !== -1
    }, {
      actionName: "delete",
      actionLabelOrTranslationKey: "streamChat.Delete",
      actionHandler: (message) => __awaiter(this, void 0, void 0, function* () {
        try {
          yield this.channelService.deleteMessage(message);
        } catch (error) {
          this.notificationService.addTemporaryNotification("streamChat.Error deleting message");
        }
      }),
      isVisible: (enabledActions, isMine) => (enabledActions.indexOf("delete") !== -1 || enabledActions.indexOf("delete-own-message") !== -1) && isMine || enabledActions.indexOf("delete-any") !== -1 || enabledActions.indexOf("delete-any-message") !== -1
    }];
    this.sendMessage$ = this.sendMessageSubject.asObservable();
  }
  ngOnChanges(changes) {
    if (changes.isMine || changes.enabledActions || changes.message || changes.customActions) {
      this.visibleMessageActionItems = [...this.messageActionItems, ...this.customActions].filter((item) => item.isVisible(this.enabledActions, this.isMine, this.message));
      this.displayedActionsCount.emit(this.visibleMessageActionItems.length);
    }
  }
  getActionLabel(actionLabelOrTranslationKey) {
    return typeof actionLabelOrTranslationKey === "string" ? actionLabelOrTranslationKey : actionLabelOrTranslationKey(this.message);
  }
  getMessageActionTemplateContext(item) {
    return {
      actionHandler: item.actionHandler,
      isMine: this.isMine,
      actionName: item.actionName,
      message: this.message,
      actionLabelOrTranslationKey: item.actionLabelOrTranslationKey
    };
  }
  sendClicked() {
    this.sendMessageSubject.next();
  }
  getMessageInputContext() {
    return {
      message: this.message,
      messageUpdateHandler: this.modalClosed,
      isFileUploadEnabled: void 0,
      areMentionsEnabled: void 0,
      isMultipleFileUploadEnabled: void 0,
      mentionScope: void 0,
      mode: void 0,
      sendMessage$: this.sendMessage$
    };
  }
  getEditModalContext() {
    return {
      isOpen: this.isEditModalOpen,
      isOpenChangeHandler: (isOpen) => {
        this.isEditModalOpen = isOpen;
        if (!this.isEditModalOpen) {
          this.modalClosed();
        }
      },
      content: this.modalContent
    };
  }
  trackByActionName(_, item) {
    return item.actionName;
  }
};
MessageActionsBoxComponent.ɵfac = function MessageActionsBoxComponent_Factory(t2) {
  return new (t2 || MessageActionsBoxComponent)(ɵɵdirectiveInject(ChatClientService), ɵɵdirectiveInject(NotificationService), ɵɵdirectiveInject(ChannelService), ɵɵdirectiveInject(CustomTemplatesService));
};
MessageActionsBoxComponent.ɵcmp = ɵɵdefineComponent({
  type: MessageActionsBoxComponent,
  selectors: [["stream-message-actions-box"]],
  viewQuery: function MessageActionsBoxComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c5, 7);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.modalContent = _t.first);
    }
  },
  inputs: {
    isOpen: "isOpen",
    isMine: "isMine",
    message: "message",
    enabledActions: "enabledActions",
    customActions: "customActions"
  },
  outputs: {
    displayedActionsCount: "displayedActionsCount",
    isEditing: "isEditing"
  },
  features: [ɵɵNgOnChangesFeature],
  decls: 12,
  vars: 8,
  consts: [["data-testid", "action-box", 1, "str-chat__message-actions-box", "str-chat__message-actions-box-angular"], ["actionBox", ""], [1, "str-chat__message-actions-list"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["defaultMessageActionItem", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["defaultModal", ""], ["modalContent", ""], [1, "str-chat__message-actions-list-item-button", 3, "click"], [1, "str-chat__message-actions-list-item"], [3, "isOpen", "content", "isOpenChange"], ["class", "str-chat__edit-message-form", 4, "ngIf"], [1, "str-chat__edit-message-form"], ["defaultInput", ""], [1, "str-chat__message-team-form-footer", "str-chat__message-team-form-footer-angular"], [1, "str-chat__edit-message-form-options"], ["translate", "", "data-testid", "cancel-button", 1, "str-chat__edit-message-cancel", 3, "click"], ["type", "submit", "translate", "", "data-testid", "send-button", 1, "str-chat__edit-message-send", 3, "click", "keyup.enter"], [3, "message", "sendMessage$", "messageUpdate"]],
  template: function MessageActionsBoxComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0, 1)(2, "ul", 2);
      ɵɵtemplate(3, MessageActionsBoxComponent_ng_container_3_Template, 3, 4, "ng-container", 3);
      ɵɵelementEnd()();
      ɵɵtemplate(4, MessageActionsBoxComponent_ng_template_4_Template, 4, 4, "ng-template", null, 4, ɵɵtemplateRefExtractor)(6, MessageActionsBoxComponent_ng_container_6_Template, 1, 0, "ng-container", 5);
      ɵɵpipe(7, "async");
      ɵɵtemplate(8, MessageActionsBoxComponent_ng_template_8_Template, 1, 2, "ng-template", null, 6, ɵɵtemplateRefExtractor)(10, MessageActionsBoxComponent_ng_template_10_Template, 1, 1, "ng-template", null, 7, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r6 = ɵɵreference(9);
      ɵɵclassProp("str-chat__message-actions-box--open", true);
      ɵɵadvance(3);
      ɵɵproperty("ngForOf", ctx.visibleMessageActionItems)("ngForTrackBy", ctx.trackByActionName);
      ɵɵadvance(3);
      ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(7, 6, ctx.customTemplatesService.modalTemplate$) || _r6)("ngTemplateOutletContext", ctx.getEditModalContext());
    }
  },
  dependencies: [ModalComponent, MessageInputComponent, NotificationListComponent, NgForOf, NgTemplateOutlet, NgIf, TranslateDirective, AsyncPipe, TranslatePipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MessageActionsBoxComponent, [{
    type: Component,
    args: [{
      selector: "stream-message-actions-box",
      templateUrl: "./message-actions-box.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: ChatClientService
    }, {
      type: NotificationService
    }, {
      type: ChannelService
    }, {
      type: CustomTemplatesService
    }];
  }, {
    isOpen: [{
      type: Input
    }],
    isMine: [{
      type: Input
    }],
    message: [{
      type: Input
    }],
    enabledActions: [{
      type: Input
    }],
    customActions: [{
      type: Input
    }],
    displayedActionsCount: [{
      type: Output
    }],
    isEditing: [{
      type: Output
    }],
    modalContent: [{
      type: ViewChild,
      args: ["modalContent", {
        static: true
      }]
    }]
  });
})();
var ChannelComponent = class {
  constructor(channelService, themeService) {
    this.channelService = channelService;
    this.themeService = themeService;
    this.subscriptions = [];
    this.isError$ = combineLatest([this.channelService.channelQueryState$, this.channelService.activeChannel$]).pipe(map(([state, activeChannel]) => {
      return !activeChannel && (state === null || state === void 0 ? void 0 : state.state) === "error";
    }));
    this.isInitializing$ = combineLatest([this.channelService.channelQueryState$, this.channelService.activeChannel$]).pipe(map(([state, activeChannel]) => {
      return !activeChannel && (state === null || state === void 0 ? void 0 : state.state) === "in-progress";
    }));
    this.isActiveThread$ = this.channelService.activeParentMessageId$.pipe(map((id) => !!id));
    this.theme$ = this.themeService.theme$;
    this.isActiveChannel$ = this.channelService.activeChannel$.pipe(map((c) => !!c));
  }
};
ChannelComponent.ɵfac = function ChannelComponent_Factory(t2) {
  return new (t2 || ChannelComponent)(ɵɵdirectiveInject(ChannelService), ɵɵdirectiveInject(ThemeService));
};
ChannelComponent.ɵcmp = ɵɵdefineComponent({
  type: ChannelComponent,
  selectors: [["stream-channel"]],
  ngContentSelectors: _c15,
  decls: 8,
  vars: 13,
  consts: [["class", "str-chat__container", 4, "ngIf", "ngIfElse"], ["noChannel", ""], [1, "str-chat__container"], [1, "str-chat__main-panel"], [4, "ngIf"], ["class", "str-chat__empty-channel", 4, "ngIf"], ["class", "str-chat__loading-channel", 4, "ngIf"], [1, "str-chat__empty-channel"], ["icon", "chat-bubble"], [1, "str-chat__empty-channel-text"], [1, "str-chat__empty-channel-notifications"], [1, "str-chat__loading-channel"], [1, "str-chat__loading-channel-header"], [1, "str-chat__loading-channel-header-avatar"], [1, "str-chat__loading-channel-header-end"], [1, "str-chat__loading-channel-header-name"], [1, "str-chat__loading-channel-header-info"], [1, "str-chat__loading-channel-message-list"], [1, "str-chat__loading-channel-message"], [1, "str-chat__loading-channel-message-avatar"], [1, "str-chat__loading-channel-message-end"], [1, "str-chat__loading-channel-message-sender"], [1, "str-chat__loading-channel-message-last-row"], [1, "str-chat__loading-channel-message-text"], [1, "str-chat__loading-channel-message-date"], [1, "str-chat__loading-channel-message-input-row"], [1, "str-chat__loading-channel-message-input"], [1, "str-chat__loading-channel-message-send"]],
  template: function ChannelComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c14);
      ɵɵelementStart(0, "div");
      ɵɵpipe(1, "async");
      ɵɵtemplate(2, ChannelComponent_div_2_Template, 5, 3, "div", 0);
      ɵɵpipe(3, "async");
      ɵɵpipe(4, "async");
      ɵɵpipe(5, "async");
      ɵɵtemplate(6, ChannelComponent_ng_template_6_Template, 8, 14, "ng-template", null, 1, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r2 = ɵɵreference(7);
      ɵɵclassMapInterpolate1("str-chat str-chat-channel messaging str-chat__channel str-chat__theme-", ɵɵpipeBind1(1, 5, ctx.theme$), "");
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ɵɵpipeBind1(3, 7, ctx.isError$) === false && ɵɵpipeBind1(4, 9, ctx.isInitializing$) === false && ɵɵpipeBind1(5, 11, ctx.isActiveChannel$) === true)("ngIfElse", _r2);
    }
  },
  dependencies: [IconComponent, NotificationListComponent, NgIf, AsyncPipe, TranslatePipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChannelComponent, [{
    type: Component,
    args: [{
      selector: "stream-channel",
      templateUrl: "./channel.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: ChannelService
    }, {
      type: ThemeService
    }];
  }, null);
})();
var listUsers = (users) => {
  let outStr = "";
  const slicedArr = users.map((item) => item.name || item.id).slice(0, 5);
  const restLength = users.length - slicedArr.length;
  const commaSeparatedUsers = slicedArr.join(", ");
  outStr = commaSeparatedUsers;
  if (restLength > 0) {
    outStr += ` +${restLength}`;
  }
  return outStr;
};
var getChannelDisplayText = (channel, currentUser) => {
  var _a;
  if ((_a = channel.data) === null || _a === void 0 ? void 0 : _a.name) {
    return channel.data.name;
  }
  if (channel.state.members && Object.keys(channel.state.members).length > 0) {
    const members = Object.values(channel.state.members).map((m) => m.user || {
      id: m.user_id
    }).filter((m) => m.id !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id));
    return listUsers(members);
  }
  return channel.id;
};
var ChannelListToggleService = class {
  constructor() {
    this.isOpenSubject = new BehaviorSubject(false);
    this.isOpen$ = this.isOpenSubject.asObservable().pipe(distinctUntilChanged());
    this.isOpen$.pipe(filter((s2) => s2)).subscribe(() => {
      this.watchForOutsideClicks();
    });
  }
  /**
   * Opens the channel list.
   */
  open() {
    this.isOpenSubject.next(true);
  }
  /**
   * Closes the channel list.
   */
  close() {
    this.isOpenSubject.next(false);
  }
  /**
   * Opens the channel list if it was closed, and closes if it was opened.
   */
  toggle() {
    this.isOpenSubject.getValue() ? this.close() : this.open();
  }
  /**
   * Sets the channel list element, on mobile screen size if the user opens the channel list, and clicks outside, the service automatically closes the channel list if a reference to the HTML element is provided.
   * @param element
   */
  setMenuElement(element) {
    this.menuElement = element;
  }
  /**
   * This method should be called if a channel was selected, if on mobile, the channel list will be closed.
   */
  channelSelected() {
    this.close();
  }
  watchForOutsideClicks() {
    if (!this.menuElement) {
      return;
    }
    const eventHandler = (event) => {
      if (!this.menuElement.contains(event.target)) {
        this.close();
        window.removeEventListener("click", eventHandler);
      }
    };
    window.addEventListener("click", eventHandler);
    this.isOpen$.pipe(filter((s2) => !s2), first()).subscribe(() => window.removeEventListener("click", eventHandler));
  }
};
ChannelListToggleService.ɵfac = function ChannelListToggleService_Factory(t2) {
  return new (t2 || ChannelListToggleService)();
};
ChannelListToggleService.ɵprov = ɵɵdefineInjectable({
  token: ChannelListToggleService,
  factory: ChannelListToggleService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChannelListToggleService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [];
  }, null);
})();
var ChannelHeaderComponent = class {
  constructor(channelService, channelListToggleService, customTemplatesService, cdRef, chatClientService) {
    this.channelService = channelService;
    this.channelListToggleService = channelListToggleService;
    this.customTemplatesService = customTemplatesService;
    this.cdRef = cdRef;
    this.chatClientService = chatClientService;
    this.subscriptions = [];
    this.channelService.activeChannel$.subscribe((c) => {
      var _a, _b;
      this.activeChannel = c;
      const capabilities = (_b = (_a = this.activeChannel) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.own_capabilities;
      if (!capabilities) {
        return;
      }
      this.canReceiveConnectEvents = capabilities.indexOf("connect-events") !== -1;
    });
  }
  ngOnInit() {
    this.subscriptions.push(this.customTemplatesService.channelActionsTemplate$.subscribe((template) => {
      this.channelActionsTemplate = template;
      this.cdRef.detectChanges();
    }));
    this.subscriptions.push(this.customTemplatesService.channelHeaderInfoTemplate$.subscribe((template) => {
      this.channelHeaderInfoTemplate = template;
      this.cdRef.detectChanges();
    }));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((s2) => s2.unsubscribe());
  }
  toggleMenu(event) {
    event.stopPropagation();
    this.channelListToggleService.toggle();
  }
  getChannelActionsContext() {
    return {
      channel: this.activeChannel
    };
  }
  getChannelInfoContext() {
    return {
      channel: this.activeChannel
    };
  }
  get memberCountParam() {
    var _a, _b;
    return {
      memberCount: ((_b = (_a = this.activeChannel) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.member_count) || 0
    };
  }
  get watcherCountParam() {
    var _a, _b;
    return {
      watcherCount: ((_b = (_a = this.activeChannel) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.watcher_count) || 0
    };
  }
  get displayText() {
    if (!this.activeChannel) {
      return "";
    }
    return getChannelDisplayText(this.activeChannel, this.chatClientService.chatClient.user);
  }
  get avatarName() {
    var _a, _b;
    return (_b = (_a = this.activeChannel) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.name;
  }
};
ChannelHeaderComponent.ɵfac = function ChannelHeaderComponent_Factory(t2) {
  return new (t2 || ChannelHeaderComponent)(ɵɵdirectiveInject(ChannelService), ɵɵdirectiveInject(ChannelListToggleService), ɵɵdirectiveInject(CustomTemplatesService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ChatClientService));
};
ChannelHeaderComponent.ɵcmp = ɵɵdefineComponent({
  type: ChannelHeaderComponent,
  selectors: [["stream-channel-header"]],
  ngContentSelectors: _c4,
  decls: 12,
  vars: 8,
  consts: [[1, "str-chat__header-livestream", "str-chat__channel-header"], [1, "str-chat__header-hamburger", 3, "click", "keyup.enter"], ["icon", "menu"], ["type", "channel", "location", "channel-header", 3, "imageUrl", "name", "channel", "size"], [1, "str-chat__header-livestream-left", "str-chat__channel-header-end"], ["data-testid", "name", 1, "str-chat__header-livestream-left--title", "str-chat__channel-header-title"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["defaultChannelInfo", ""], [4, "ngIf"], ["data-testid", "info", 1, "str-chat__header-livestream-left--members", "str-chat__channel-header-info"]],
  template: function ChannelHeaderComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0)(1, "div", 1);
      ɵɵlistener("click", function ChannelHeaderComponent_Template_div_click_1_listener($event) {
        return ctx.toggleMenu($event);
      })("keyup.enter", function ChannelHeaderComponent_Template_div_keyup_enter_1_listener($event) {
        return ctx.toggleMenu($event);
      });
      ɵɵelement(2, "stream-icon-placeholder", 2);
      ɵɵelementEnd();
      ɵɵprojection(3);
      ɵɵelement(4, "stream-avatar-placeholder", 3);
      ɵɵelementStart(5, "div", 4)(6, "p", 5);
      ɵɵtext(7);
      ɵɵelementEnd();
      ɵɵtemplate(8, ChannelHeaderComponent_ng_container_8_Template, 1, 0, "ng-container", 6)(9, ChannelHeaderComponent_ng_template_9_Template, 4, 8, "ng-template", null, 7, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
      ɵɵtemplate(11, ChannelHeaderComponent_ng_container_11_Template, 2, 2, "ng-container", 8);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r2 = ɵɵreference(10);
      ɵɵadvance(4);
      ɵɵpropertyInterpolate("imageUrl", ctx.activeChannel == null ? null : ctx.activeChannel.data == null ? null : ctx.activeChannel.data.image);
      ɵɵpropertyInterpolate("name", ctx.avatarName);
      ɵɵproperty("channel", ctx.activeChannel)("size", 40);
      ɵɵadvance(3);
      ɵɵtextInterpolate1(" ", ctx.displayText, " ");
      ɵɵadvance(1);
      ɵɵproperty("ngTemplateOutlet", ctx.channelHeaderInfoTemplate || _r2)("ngTemplateOutletContext", ctx.getChannelInfoContext());
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.channelActionsTemplate);
    }
  },
  dependencies: [IconPlaceholderComponent, AvatarPlaceholderComponent, NgTemplateOutlet, NgIf, TranslatePipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChannelHeaderComponent, [{
    type: Component,
    args: [{
      selector: "stream-channel-header",
      templateUrl: "./channel-header.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: ChannelService
    }, {
      type: ChannelListToggleService
    }, {
      type: CustomTemplatesService
    }, {
      type: ChangeDetectorRef
    }, {
      type: ChatClientService
    }];
  }, null);
})();
var MessageService = class {
  constructor() {
    this.displayAs = "text";
  }
};
MessageService.ɵfac = function MessageService_Factory(t2) {
  return new (t2 || MessageService)();
};
MessageService.ɵprov = ɵɵdefineInjectable({
  token: MessageService,
  factory: MessageService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MessageService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [];
  }, null);
})();
var ChannelPreviewComponent = class {
  constructor(channelService, ngZone, chatClientService, messageService) {
    this.channelService = channelService;
    this.ngZone = ngZone;
    this.chatClientService = chatClientService;
    this.isActive = false;
    this.isUnread = false;
    this.latestMessage = "streamChat.Nothing yet...";
    this.subscriptions = [];
    this.canSendReadEvents = true;
    this.displayAs = messageService.displayAs;
  }
  ngOnInit() {
    var _a, _b, _c, _d;
    this.subscriptions.push(this.channelService.activeChannel$.subscribe((activeChannel) => {
      var _a2;
      return this.isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.id) === ((_a2 = this.channel) === null || _a2 === void 0 ? void 0 : _a2.id);
    }));
    const messages = (_b = (_a = this.channel) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.latestMessages;
    if (messages && messages.length > 0) {
      this.setLatestMessage(messages[messages.length - 1]);
    }
    this.updateUnreadState();
    const capabilities = ((_d = (_c = this.channel) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.own_capabilities) || [];
    this.canSendReadEvents = capabilities.indexOf("read-events") !== -1;
    this.subscriptions.push(this.channel.on("message.new", this.handleMessageEvent.bind(this)));
    this.subscriptions.push(this.channel.on("message.updated", this.handleMessageEvent.bind(this)));
    this.subscriptions.push(this.channel.on("message.deleted", this.handleMessageEvent.bind(this)));
    this.subscriptions.push(this.channel.on("channel.truncated", this.handleMessageEvent.bind(this)));
    this.subscriptions.push(this.channel.on("message.read", () => this.ngZone.run(() => {
      this.updateUnreadState();
    })));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((s2) => s2.unsubscribe());
  }
  get avatarImage() {
    var _a, _b;
    return (_b = (_a = this.channel) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.image;
  }
  get avatarName() {
    var _a, _b;
    return (_b = (_a = this.channel) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.name;
  }
  get title() {
    if (!this.channel) {
      return "";
    }
    return getChannelDisplayText(this.channel, this.chatClientService.chatClient.user);
  }
  setAsActiveChannel() {
    void this.channelService.setAsActiveChannel(this.channel);
  }
  handleMessageEvent(event) {
    this.ngZone.run(() => {
      var _a, _b, _c;
      if (((_a = this.channel) === null || _a === void 0 ? void 0 : _a.state.latestMessages.length) === 0) {
        this.latestMessage = "streamChat.Nothing yet...";
        return;
      }
      if (!event.message || ((_b = this.channel) === null || _b === void 0 ? void 0 : _b.state.latestMessages[((_c = this.channel) === null || _c === void 0 ? void 0 : _c.state.latestMessages.length) - 1].id) !== event.message.id) {
        return;
      }
      this.setLatestMessage(event.message);
      this.updateUnreadState();
    });
  }
  setLatestMessage(message) {
    if (message === null || message === void 0 ? void 0 : message.deleted_at) {
      this.latestMessage = "streamChat.Message deleted";
    } else if (message === null || message === void 0 ? void 0 : message.text) {
      this.latestMessage = getMessageTranslation(message, this.channel, this.chatClientService.chatClient.user) || message.text;
    } else if ((message === null || message === void 0 ? void 0 : message.attachments) && message.attachments.length) {
      this.latestMessage = "streamChat.🏙 Attachment...";
    }
  }
  updateUnreadState() {
    if (this.isActive || !this.canSendReadEvents) {
      this.unreadCount = 0;
      this.isUnread = false;
      return;
    }
    this.unreadCount = this.channel.countUnread();
    this.isUnread = !!this.unreadCount;
  }
};
ChannelPreviewComponent.ɵfac = function ChannelPreviewComponent_Factory(t2) {
  return new (t2 || ChannelPreviewComponent)(ɵɵdirectiveInject(ChannelService), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(ChatClientService), ɵɵdirectiveInject(MessageService));
};
ChannelPreviewComponent.ɵcmp = ɵɵdefineComponent({
  type: ChannelPreviewComponent,
  selectors: [["stream-channel-preview"]],
  inputs: {
    channel: "channel"
  },
  decls: 13,
  vars: 14,
  consts: [["data-testid", "channel-preview-container", 1, "str-chat__channel-preview-messenger", "str-chat__channel-preview", 3, "click"], [1, "str-chat__channel-preview-messenger--left"], ["type", "channel", "location", "channel-preview", 3, "name", "imageUrl", "channel", "size"], [1, "str-chat__channel-preview-messenger--right", "str-chat__channel-preview-end"], [1, "str-chat__channel-preview-end-first-row"], [1, "str-chat__channel-preview-messenger--name"], ["data-testid", "channel-preview-title"], ["data-testid", "unread-badge", "class", "str-chat__channel-preview-unread-badge", 4, "ngIf"], ["data-testid", "latest-message", 1, "str-chat__channel-preview-messenger--last-message"], [4, "ngIf", "ngIfElse"], ["asHTML", ""], ["data-testid", "unread-badge", 1, "str-chat__channel-preview-unread-badge"], ["data-testid", "html-content", 3, "innerHTML"]],
  template: function ChannelPreviewComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "button", 0);
      ɵɵlistener("click", function ChannelPreviewComponent_Template_button_click_0_listener() {
        return ctx.setAsActiveChannel();
      });
      ɵɵelementStart(1, "div", 1);
      ɵɵelement(2, "stream-avatar-placeholder", 2);
      ɵɵelementEnd();
      ɵɵelementStart(3, "div", 3)(4, "div", 4)(5, "div", 5)(6, "span", 6);
      ɵɵtext(7);
      ɵɵelementEnd()();
      ɵɵtemplate(8, ChannelPreviewComponent_div_8_Template, 2, 1, "div", 7);
      ɵɵelementEnd();
      ɵɵelementStart(9, "div", 8);
      ɵɵtemplate(10, ChannelPreviewComponent_ng_container_10_Template, 3, 3, "ng-container", 9)(11, ChannelPreviewComponent_ng_template_11_Template, 2, 3, "ng-template", null, 10, ɵɵtemplateRefExtractor);
      ɵɵelementEnd()()();
    }
    if (rf & 2) {
      const _r3 = ɵɵreference(12);
      ɵɵclassProp("str-chat__channel-preview-messenger--active", ctx.isActive)("str-chat__channel-preview--active", ctx.isActive)("str-chat__channel-preview-messenger--unread", ctx.isUnread);
      ɵɵadvance(2);
      ɵɵpropertyInterpolate("name", ctx.avatarName);
      ɵɵpropertyInterpolate("imageUrl", ctx.avatarImage);
      ɵɵproperty("channel", ctx.channel)("size", 49);
      ɵɵadvance(5);
      ɵɵtextInterpolate(ctx.title);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.unreadCount);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.displayAs === "text")("ngIfElse", _r3);
    }
  },
  dependencies: [AvatarPlaceholderComponent, NgIf, TranslatePipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChannelPreviewComponent, [{
    type: Component,
    args: [{
      selector: "stream-channel-preview",
      templateUrl: "./channel-preview.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: ChannelService
    }, {
      type: NgZone
    }, {
      type: ChatClientService
    }, {
      type: MessageService
    }];
  }, {
    channel: [{
      type: Input
    }]
  });
})();
var ChannelListComponent = class {
  constructor(channelService, channelListToggleService, customTemplatesService, themeService) {
    this.channelService = channelService;
    this.channelListToggleService = channelListToggleService;
    this.customTemplatesService = customTemplatesService;
    this.themeService = themeService;
    this.isLoadingMoreChannels = false;
    this.subscriptions = [];
    this.theme$ = this.themeService.theme$;
    this.isOpen$ = this.channelListToggleService.isOpen$;
    this.channels$ = this.channelService.channels$;
    this.hasMoreChannels$ = this.channelService.hasMoreChannels$;
    this.isError$ = this.channelService.channelQueryState$.pipe(map((s2) => !this.isLoadingMoreChannels && (s2 === null || s2 === void 0 ? void 0 : s2.state) === "error"));
    this.isInitializing$ = this.channelService.channelQueryState$.pipe(map((s2) => !this.isLoadingMoreChannels && (s2 === null || s2 === void 0 ? void 0 : s2.state) === "in-progress"));
    this.subscriptions.push(this.customTemplatesService.channelPreviewTemplate$.subscribe((template) => this.customChannelPreviewTemplate = template));
  }
  ngAfterViewInit() {
    this.channelListToggleService.setMenuElement(this.container.nativeElement);
  }
  ngOnDestroy() {
    this.subscriptions.forEach((s2) => s2.unsubscribe());
  }
  loadMoreChannels() {
    return __awaiter(this, void 0, void 0, function* () {
      this.isLoadingMoreChannels = true;
      yield this.channelService.loadMoreChannels();
      this.isLoadingMoreChannels = false;
    });
  }
  trackByChannelId(index, item) {
    return item.cid;
  }
  channelSelected() {
    this.channelListToggleService.channelSelected();
  }
};
ChannelListComponent.ɵfac = function ChannelListComponent_Factory(t2) {
  return new (t2 || ChannelListComponent)(ɵɵdirectiveInject(ChannelService), ɵɵdirectiveInject(ChannelListToggleService), ɵɵdirectiveInject(CustomTemplatesService), ɵɵdirectiveInject(ThemeService));
};
ChannelListComponent.ɵcmp = ɵɵdefineComponent({
  type: ChannelListComponent,
  selectors: [["stream-channel-list"]],
  viewQuery: function ChannelListComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c16, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.container = _t.first);
    }
  },
  ngContentSelectors: _c19,
  decls: 15,
  vars: 15,
  consts: [["data-testid", "channel-list-container", 2, "max-width", "unset"], ["container", ""], ["class", "str-chat__channel-list-messenger", 4, "ngIf", "ngIfElse"], ["statusIndicator", ""], ["chatDown", ""], ["loadingChannels", ""], ["loadingChannel", ""], [1, "str-chat__channel-list-messenger"], [1, "str-chat__channel-list-messenger__main", 2, "display", "flex", "flex-direction", "column"], ["class", "str-chat__channel-list-empty", 4, "ngIf"], ["class", "str-chat__channel-list-empty-v1", "data-testid", "empty-channel-list-indicator", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "str-chat__load-more-button", "data-testid", "load-more", 3, "click", "keyup.enter", 4, "ngIf"], [1, "str-chat__channel-list-empty"], ["icon", "chat-bubble"], ["data-testid", "empty-channel-list-indicator"], ["data-testid", "empty-channel-list-indicator", 1, "str-chat__channel-list-empty-v1"], ["defaultTemplate", ""], [3, "click", "keyup.enter"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["data-testclass", "channel-preview", 3, "channel"], ["data-testid", "load-more", 1, "str-chat__load-more-button", 3, "click", "keyup.enter"], ["data-testid", "load-more-button", 1, "str-chat__load-more-button__button", "str-chat__cta-button", 3, "disabled"], [4, "ngIf", "ngIfElse"], ["loadingIndicator", ""], [4, "ngIf"], [4, "ngTemplateOutlet"], ["data-testid", "chatdown-container", 1, "str-chat__down"], [1, "str-chat__down-main"], ["icon", "connection-error"], ["data-testid", "loading-indicator", 1, "str-chat__loading-channels"], [1, "str-chat__loading-channels-item", "str-chat__channel-preview-loading"], [1, "str-chat__loading-channels-avatar"], [1, "str-chat__loading-channels-meta", "str-chat__channel-preview-end-loading"], [1, "str-chat__loading-channels-username"], [1, "str-chat__loading-channels-status"]],
  template: function ChannelListComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c18);
      ɵɵelementStart(0, "div", 0, 1);
      ɵɵpipe(2, "async");
      ɵɵpipe(3, "async");
      ɵɵtemplate(4, ChannelListComponent_div_4_Template, 12, 13, "div", 2);
      ɵɵpipe(5, "async");
      ɵɵpipe(6, "async");
      ɵɵelementEnd();
      ɵɵtemplate(7, ChannelListComponent_ng_template_7_Template, 4, 6, "ng-template", null, 3, ɵɵtemplateRefExtractor)(9, ChannelListComponent_ng_template_9_Template, 10, 7, "ng-template", null, 4, ɵɵtemplateRefExtractor)(11, ChannelListComponent_ng_template_11_Template, 4, 3, "ng-template", null, 5, ɵɵtemplateRefExtractor)(13, ChannelListComponent_ng_template_13_Template, 5, 0, "ng-template", null, 6, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r3 = ɵɵreference(8);
      ɵɵclassMapInterpolate1("str-chat str-chat__channel-list str-chat-channel-list messaging str-chat__theme-", ɵɵpipeBind1(2, 7, ctx.theme$), "");
      ɵɵclassProp("str-chat-channel-list--open", ɵɵpipeBind1(3, 9, ctx.isOpen$) === true);
      ɵɵadvance(4);
      ɵɵproperty("ngIf", ɵɵpipeBind1(5, 11, ctx.isError$) === false && ɵɵpipeBind1(6, 13, ctx.isInitializing$) === false)("ngIfElse", _r3);
    }
  },
  dependencies: [IconComponent, ChannelPreviewComponent, LoadingIndicatorPlaceholderComponent, IconPlaceholderComponent, NgIf, NgForOf, NgTemplateOutlet, AsyncPipe, TranslatePipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChannelListComponent, [{
    type: Component,
    args: [{
      selector: "stream-channel-list",
      templateUrl: "./channel-list.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: ChannelService
    }, {
      type: ChannelListToggleService
    }, {
      type: CustomTemplatesService
    }, {
      type: ThemeService
    }];
  }, {
    container: [{
      type: ViewChild,
      args: ["container"]
    }]
  });
})();
import_dayjs.default.extend(import_calendar.default);
import_dayjs.default.extend(import_relativeTime.default);
var parseDate = (date, format = "date-time") => {
  const parsedTime = (0, import_dayjs.default)(date);
  return format === "date-time" ? parsedTime.calendar() : parsedTime.calendar(null, {
    sameDay: "[Today]",
    nextDay: "[Tomorrow]",
    nextWeek: "dddd",
    lastDay: "[Yesterday]",
    lastWeek: "[Last] dddd",
    sameElse: "DD/MM/YYYY"
    // Everything else ( 17/10/2011 )
  });
};
var DateParserService = class {
  constructor() {
  }
  /**
   * Return a user-friendly string representation of the date (year, month and date)
   * @param date
   * @returns The parsed date
   */
  parseDate(date) {
    if (this.customDateParser) {
      return this.customDateParser(date);
    }
    return parseDate(date, "date");
  }
  /**
   * Return a user-friendly string representation of the date and time
   * @param date
   * @returns The parsed date
   */
  parseDateTime(date) {
    if (this.customDateTimeParser) {
      return this.customDateTimeParser(date);
    }
    return parseDate(date, "date-time");
  }
};
DateParserService.ɵfac = function DateParserService_Factory(t2) {
  return new (t2 || DateParserService)();
};
DateParserService.ɵprov = ɵɵdefineInjectable({
  token: DateParserService,
  factory: DateParserService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DateParserService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [];
  }, null);
})();
var MessageReactionsService = class {
  constructor() {
    this.reactions$ = new BehaviorSubject({
      like: "👍",
      angry: "😠",
      love: "❤️",
      haha: "😂",
      wow: "😮",
      sad: "😞"
    });
  }
  /**
   * Sets the enabled reactions
   */
  set reactions(reactions) {
    this.reactions$.next(reactions);
  }
  /**
   * Get the currently enabled reactions
   */
  get reactions() {
    return this.reactions$.getValue();
  }
};
MessageReactionsService.ɵfac = function MessageReactionsService_Factory(t2) {
  return new (t2 || MessageReactionsService)();
};
MessageReactionsService.ɵprov = ɵɵdefineInjectable({
  token: MessageReactionsService,
  factory: MessageReactionsService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MessageReactionsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [];
  }, null);
})();
var MessageReactionsComponent = class {
  constructor(cdRef, channelService, messageReactionsService, customTemplatesService, themeService) {
    this.cdRef = cdRef;
    this.channelService = channelService;
    this.messageReactionsService = messageReactionsService;
    this.customTemplatesService = customTemplatesService;
    this.themeService = themeService;
    this.messageReactionCounts = {};
    this.isSelectorOpen = false;
    this.latestReactions = [];
    this.ownReactions = [];
    this.isSelectorOpenChange = new EventEmitter();
    this.popperTriggerHover = NgxPopperjsTriggers.hover;
    this.popperPlacementAuto = NgxPopperjsPlacements.AUTO;
    this.isLoading = true;
    this.reactions = [];
    this.shouldHandleReactionClick = true;
    this.isOpenChange = (isOpen) => {
      this.selectedReactionType = isOpen ? this.selectedReactionType : void 0;
    };
    this.eventHandler = (event) => {
      var _a;
      if (!((_a = this.selectorContainer) === null || _a === void 0 ? void 0 : _a.nativeElement.contains(event.target))) {
        this.isSelectorOpenChange.emit(false);
      }
    };
  }
  ngOnChanges(changes) {
    if (changes.isSelectorOpen) {
      this.isSelectorOpen ? setTimeout(() => this.watchForOutsideClicks()) : this.stopWatchForOutsideClicks();
    }
    if (changes.messageReactionCounts && this.messageReactionCounts) {
      const reactionsCount = Object.keys(this.messageReactionCounts).reduce((acc, key) => acc + (this.messageReactionCounts[key] || 0), 0);
      this.shouldHandleReactionClick = reactionsCount <= ChannelService.MAX_MESSAGE_REACTIONS_TO_FETCH || !!this.messageReactionsService.customReactionClickHandler;
    }
  }
  ngAfterViewChecked() {
    if (this.tooltipText && !this.tooltipPositions) {
      this.setTooltipPosition();
      this.cdRef.detectChanges();
    }
  }
  get existingReactions() {
    return Object.keys(this.messageReactionCounts).filter((k) => this.reactionOptions.indexOf(k) !== -1).filter((k) => this.messageReactionCounts[k] > 0);
  }
  get reactionsCount() {
    return this.existingReactions.reduce((total, reaction) => total + this.messageReactionCounts[reaction], 0);
  }
  get reactionOptions() {
    return Object.keys(this.messageReactionsService.reactions);
  }
  getLatestUserByReaction(reactionType) {
    var _a;
    return (_a = this.latestReactions.find((r) => r.type === reactionType && r.user)) === null || _a === void 0 ? void 0 : _a.user;
  }
  getEmojiByReaction(reactionType) {
    return this.messageReactionsService.reactions[reactionType];
  }
  reactionSelected(reactionType) {
    if (!this.shouldHandleReactionClick) {
      return;
    }
    if (this.themeService.themeVersion === "1") {
      return;
    }
    if (!this.messageId) {
      return;
    }
    if (this.messageReactionsService.customReactionClickHandler) {
      this.messageReactionsService.customReactionClickHandler({
        messageId: this.messageId,
        reactionType
      });
    } else {
      this.selectedReactionType = reactionType;
      void this.fetchAllReactions();
    }
  }
  getUsersByReaction(reactionType) {
    return this.latestReactions.filter((r) => r.type === reactionType).map((r) => {
      var _a, _b;
      return ((_a = r.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = r.user) === null || _b === void 0 ? void 0 : _b.id);
    }).filter((i) => !!i).join(", ");
  }
  getAllUsersByReaction(reactionType) {
    if (!reactionType) {
      return [];
    }
    const users = this.reactions.filter((r) => r.type === reactionType).map((r) => r.user).filter((i) => !!i);
    users.sort((u1, u2) => {
      var _a, _b;
      const name1 = (_a = u1.name) === null || _a === void 0 ? void 0 : _a.toLowerCase();
      const name2 = (_b = u2.name) === null || _b === void 0 ? void 0 : _b.toLowerCase();
      if (!name1) {
        return 1;
      }
      if (!name2) {
        return -1;
      }
      if (name1 === name2) {
        return 0;
      }
      if (name1 < name2) {
        return -1;
      } else {
        return 1;
      }
    });
    return users;
  }
  showTooltip(event, reactionType) {
    this.currentTooltipTarget = event.target;
    this.tooltipText = this.getUsersByReaction(reactionType);
  }
  hideTooltip() {
    this.tooltipText = void 0;
    this.currentTooltipTarget = void 0;
    this.tooltipPositions = void 0;
  }
  trackByMessageReaction(index, item) {
    return item;
  }
  trackByUserId(index, item) {
    return item.id;
  }
  react(type) {
    this.ownReactions.find((r) => r.type === type) ? void this.channelService.removeReaction(this.messageId, type) : void this.channelService.addReaction(this.messageId, type);
  }
  isOwnReaction(reactionType) {
    return !!this.ownReactions.find((r) => r.type === reactionType);
  }
  watchForOutsideClicks() {
    window.addEventListener("click", this.eventHandler);
  }
  stopWatchForOutsideClicks() {
    window.removeEventListener("click", this.eventHandler);
  }
  setTooltipPosition() {
    var _a, _b, _c;
    const tooltip = (_a = this.selectorTooltip) === null || _a === void 0 ? void 0 : _a.nativeElement.getBoundingClientRect();
    const target = (_b = this.currentTooltipTarget) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect();
    const container = (_c = this.selectorContainer) === null || _c === void 0 ? void 0 : _c.nativeElement.getBoundingClientRect();
    if (!tooltip || !target || !container)
      return;
    const tooltipPosition = tooltip.width === container.width || tooltip.x < container.x ? 0 : target.left + target.width / 2 - container.left - tooltip.width / 2;
    const arrowPosition = target.x - tooltip.x + target.width / 2 - tooltipPosition;
    this.tooltipPositions = {
      tooltip: tooltipPosition,
      arrow: arrowPosition
    };
  }
  fetchAllReactions() {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.messageId) {
        return;
      }
      this.isLoading = true;
      try {
        this.reactions = yield this.channelService.getMessageReactions(this.messageId);
      } catch (error) {
        this.selectedReactionType = void 0;
      } finally {
        this.isLoading = false;
        this.cdRef.detectChanges();
      }
    });
  }
};
MessageReactionsComponent.ɵfac = function MessageReactionsComponent_Factory(t2) {
  return new (t2 || MessageReactionsComponent)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ChannelService), ɵɵdirectiveInject(MessageReactionsService), ɵɵdirectiveInject(CustomTemplatesService), ɵɵdirectiveInject(ThemeService));
};
MessageReactionsComponent.ɵcmp = ɵɵdefineComponent({
  type: MessageReactionsComponent,
  selectors: [["stream-message-reactions"]],
  viewQuery: function MessageReactionsComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c20, 5);
      ɵɵviewQuery(_c21, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.selectorContainer = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.selectorTooltip = _t.first);
    }
  },
  inputs: {
    messageId: "messageId",
    messageReactionCounts: "messageReactionCounts",
    isSelectorOpen: "isSelectorOpen",
    latestReactions: "latestReactions",
    ownReactions: "ownReactions"
  },
  outputs: {
    isSelectorOpenChange: "isSelectorOpenChange"
  },
  features: [ɵɵNgOnChangesFeature],
  decls: 5,
  vars: 3,
  consts: [["class", "str-chat__reaction-list str-chat__message-reactions-container", "data-testid", "reaction-list", 3, "str-chat__reaction-list--reverse", "str-chat__reaction-list-hidden", 4, "ngIf"], ["class", "str-chat__reaction-selector str-chat__message-reaction-selector", "data-testid", "reaction-selector", 4, "ngIf"], [4, "ngIf"], ["defaultModal", ""], ["data-testid", "reaction-list", 1, "str-chat__reaction-list", "str-chat__message-reactions-container"], [1, "str-chat__message-reactions"], ["class", "str-chat__message-reaction", "data-testclass", "emoji", 3, "ngStyle", "str-chat__message-reaction-own", "click", "keyup.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["data-testid", "reactions-count", 1, "str-chat__reaction-list--counter"], ["data-testclass", "emoji", 1, "str-chat__message-reaction", 3, "ngStyle", "click", "keyup.enter"], [1, "emoji", "str-chat__message-reaction-emoji"], ["data-testclass", "reaction-list-reaction-count", 1, "str-chat__message-reaction-count"], ["data-testid", "reaction-selector", 1, "str-chat__reaction-selector", "str-chat__message-reaction-selector"], ["selectorContainer", ""], ["data-testid", "tooltip", "class", "str-chat__reaction-selector-tooltip", 3, "ngStyle", 4, "ngIf"], [1, "str-chat__message-reactions-list", "str-chat__message-reactions-options"], ["class", "\n        str-chat__message-reactions-option\n        str-chat__message-reactions-list-item\n        str-chat__emoji\n      ", "data-testclass", "emoji-option", 3, "str-chat__message-reactions-option-selected", "click", "keyup.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["data-testid", "tooltip", 1, "str-chat__reaction-selector-tooltip", 3, "ngStyle"], ["selectorTooltip", ""], [1, "arrow", 3, "ngStyle"], [1, "latest-user-username"], ["data-testclass", "emoji-option", 1, "str-chat__message-reactions-option", "str-chat__message-reactions-list-item", "str-chat__emoji", 3, "click", "keyup.enter"], ["class", "latest-user str-chat__message-reactions-last-user", 3, "click", "keyup.enter", "mouseenter", "mouseleave", 4, "ngIf"], [1, "emoji", "str-chat__emoji-selector-emoji-angular", "str-chat__message-reaction-emoji"], ["class", "str-chat__message-reactions-list-item__count", 4, "ngIf"], [1, "latest-user", "str-chat__message-reactions-last-user", 3, "click", "keyup.enter", "mouseenter", "mouseleave"], ["location", "reaction", 3, "imageUrl", "name", "size"], [1, "str-chat__message-reactions-list-item__count"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "str-chat__message-reactions-details-modal", 3, "isOpen", "isOpenChange"], [1, "str-chat__message-reactions-details"], [1, "str-chat__message-reactions-details-reaction-types"], ["class", "str-chat__message-reactions-details-reaction-type", 3, "ngStyle", "str-chat__message-reactions-details-reaction-type--selected", "click", "keyup.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "emoji", "str-chat__message-reaction-emoji", "str-chat__message-reaction-emoji-big"], ["data-testid", "all-reacting-users", 1, "str-chat__message-reactions-details-reacting-users"], ["allUsers", ""], [4, "ngIf", "ngIfElse"], ["reactions", ""], [1, "str-chat__message-reactions-details-reaction-type", 3, "ngStyle", "click", "keyup.enter"], [1, "str-chat__message-reaction-count"], ["class", "str-chat__message-reactions-details-reacting-user", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "str-chat__message-reactions-details-reacting-user"], ["data-testclass", "avatar", "type", "user", "location", "reaction", 1, "str-chat__avatar", "str-chat__avatar--circle", 2, "max-height", "100%", "overflow-y", "hidden", 3, "size", "imageUrl", "name", "user"], ["data-testclass", "reaction-user-username", 1, "str-chat__user-item--name"]],
  template: function MessageReactionsComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, MessageReactionsComponent_div_0_Template, 6, 7, "div", 0)(1, MessageReactionsComponent_div_1_Template, 5, 3, "div", 1)(2, MessageReactionsComponent_ng_container_2_Template, 3, 9, "ng-container", 2)(3, MessageReactionsComponent_ng_template_3_Template, 11, 6, "ng-template", null, 3, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.existingReactions.length > 0);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.isSelectorOpen);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.selectedReactionType);
    }
  },
  dependencies: [AvatarPlaceholderComponent, ModalComponent, LoadingIndicatorComponent, NgIf, NgForOf, NgStyle, NgTemplateOutlet, AsyncPipe],
  styles: [".emoji[_ngcontent-%COMP%] {position: relative; display: inline-block; }"]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MessageReactionsComponent, [{
    type: Component,
    args: [{
      selector: "stream-message-reactions",
      templateUrl: "./message-reactions.component.html",
      styles: [".emoji {position: relative; display: inline-block; }"]
    }]
  }], function() {
    return [{
      type: ChangeDetectorRef
    }, {
      type: ChannelService
    }, {
      type: MessageReactionsService
    }, {
      type: CustomTemplatesService
    }, {
      type: ThemeService
    }];
  }, {
    messageId: [{
      type: Input
    }],
    messageReactionCounts: [{
      type: Input
    }],
    isSelectorOpen: [{
      type: Input
    }],
    latestReactions: [{
      type: Input
    }],
    ownReactions: [{
      type: Input
    }],
    isSelectorOpenChange: [{
      type: Output
    }],
    selectorContainer: [{
      type: ViewChild,
      args: ["selectorContainer"]
    }],
    selectorTooltip: [{
      type: ViewChild,
      args: ["selectorTooltip"]
    }]
  });
})();
var MessageComponent = class {
  constructor(chatClientService, channelService, customTemplatesService, cdRef, themeService, dateParser, ngZone, messageService) {
    this.chatClientService = chatClientService;
    this.channelService = channelService;
    this.customTemplatesService = customTemplatesService;
    this.cdRef = cdRef;
    this.dateParser = dateParser;
    this.ngZone = ngZone;
    this.messageService = messageService;
    this.enabledMessageActions = [];
    this.mode = "main";
    this.isHighlighted = false;
    this.customActions = [];
    this.isActionBoxOpen = false;
    this.isReactionSelectorOpen = false;
    this.visibleMessageActionsCount = 0;
    this.messageTextParts = [];
    this.popperTriggerClick = NgxPopperjsTriggers.click;
    this.popperTriggerHover = NgxPopperjsTriggers.hover;
    this.popperPlacementAuto = NgxPopperjsPlacements.AUTO;
    this.shouldDisplayTranslationNotice = false;
    this.displayedMessageTextContent = "original";
    this.imageAttachmentModalState = "closed";
    this.shouldDisplayThreadLink = false;
    this.isSentByCurrentUser = false;
    this.readByText = "";
    this.lastReadUser = void 0;
    this.isOnlyReadByMe = false;
    this.isReadByMultipleUsers = false;
    this.isMessageDeliveredAndRead = false;
    this.parsedDate = "";
    this.areOptionsVisible = false;
    this.hasAttachment = false;
    this.hasReactions = false;
    this.replyCountParam = {
      replyCount: void 0
    };
    this.canDisplayReadStatus = false;
    this.optionsRenderTimeoutEnded = false;
    this.subscriptions = [];
    this.urlRegexp = /(?:(?:https?|ftp|file):\/\/|www\.|ftp\.)(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[A-Z0-9+&@#/%=~_|$])/gim;
    this.emojiRegexp = new RegExp(emoji_regex_default(), "g");
    this.themeVersion = themeService.themeVersion;
    this.displayAs = this.messageService.displayAs;
  }
  ngOnInit() {
    this.subscriptions.push(this.chatClientService.user$.subscribe((u) => {
      if (u !== this.user) {
        this.user = u;
        this.setIsSentByCurrentUser();
        this.setLastReadUser();
        this.cdRef.detectChanges();
      }
    }));
  }
  ngOnChanges(changes) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (changes.message) {
      this.shouldDisplayTranslationNotice = false;
      this.displayedMessageTextContent = "original";
      this.createMessageParts();
      const originalAttachments = (_b = (_a = this.message) === null || _a === void 0 ? void 0 : _a.quoted_message) === null || _b === void 0 ? void 0 : _b.attachments;
      this.quotedMessageAttachments = originalAttachments && originalAttachments.length ? [originalAttachments[0]] : [];
      this.setIsSentByCurrentUser();
      this.setLastReadUser();
      this.readByText = ((_c = this.message) === null || _c === void 0 ? void 0 : _c.readBy) ? listUsers(this.message.readBy) : "";
      this.isOnlyReadByMe = !!(this.message && this.message.readBy && this.message.readBy.length === 0);
      this.isReadByMultipleUsers = !!(this.message && this.message.readBy && this.message.readBy.length > 1);
      this.isMessageDeliveredAndRead = !!(this.message && this.message.readBy && this.message.status === "received" && this.message.readBy.length > 0);
      this.parsedDate = this.message && this.message.created_at && this.dateParser.parseDateTime(this.message.created_at) || "";
      this.hasAttachment = !!((_d = this.message) === null || _d === void 0 ? void 0 : _d.attachments) && !!this.message.attachments.length;
      this.hasReactions = !!((_e = this.message) === null || _e === void 0 ? void 0 : _e.reaction_counts) && Object.keys(this.message.reaction_counts).length > 0;
      this.replyCountParam = {
        replyCount: (_f = this.message) === null || _f === void 0 ? void 0 : _f.reply_count
      };
    }
    if (changes.enabledMessageActions) {
      this.canReactToMessage = this.enabledMessageActions.indexOf("send-reaction") !== -1;
      this.canReceiveReadEvents = this.enabledMessageActions.indexOf("read-events") !== -1;
      this.canDisplayReadStatus = this.canReceiveReadEvents !== false && this.enabledMessageActions.indexOf("read-events") !== -1;
    }
    if (changes.message || changes.enabledMessageActions || changes.mode) {
      this.shouldDisplayThreadLink = !!((_g = this.message) === null || _g === void 0 ? void 0 : _g.reply_count) && this.mode !== "thread";
    }
    if (changes.message || changes.mode) {
      this.areOptionsVisible = this.message ? !(!this.message.type || this.message.type === "error" || this.message.type === "system" || this.message.type === "ephemeral" || this.message.status === "failed" || this.message.status === "sending" || this.mode === "thread" && !this.message.parent_id) : false;
    }
  }
  ngAfterViewInit() {
    this.ngZone.runOutsideAngular(() => {
      var _a;
      (_a = this.container) === null || _a === void 0 ? void 0 : _a.nativeElement.addEventListener("mouseleave", () => this.mouseLeft());
    });
    setTimeout(() => {
      this.optionsRenderTimeoutEnded = true;
      this.cdRef.detectChanges();
    }, 0);
  }
  ngOnDestroy() {
    this.subscriptions.forEach((s2) => s2.unsubscribe());
  }
  getAttachmentListContext() {
    var _a, _b, _c;
    return {
      messageId: ((_a = this.message) === null || _a === void 0 ? void 0 : _a.id) || "",
      attachments: ((_b = this.message) === null || _b === void 0 ? void 0 : _b.attachments) || [],
      parentMessageId: (_c = this.message) === null || _c === void 0 ? void 0 : _c.parent_id,
      imageModalStateChangeHandler: (state) => this.imageAttachmentModalState = state
    };
  }
  getMessageContext() {
    return {
      message: this.message,
      enabledMessageActions: this.enabledMessageActions,
      isHighlighted: this.isHighlighted,
      isLastSentMessage: this.isLastSentMessage,
      mode: this.mode,
      customActions: this.customActions,
      parsedDate: this.parsedDate
    };
  }
  getQuotedMessageAttachmentListContext() {
    var _a, _b, _c, _d;
    return {
      messageId: ((_b = (_a = this.message) === null || _a === void 0 ? void 0 : _a.quoted_message) === null || _b === void 0 ? void 0 : _b.id) || "",
      attachments: this.quotedMessageAttachments,
      parentMessageId: (_d = (_c = this === null || this === void 0 ? void 0 : this.message) === null || _c === void 0 ? void 0 : _c.quoted_message) === null || _d === void 0 ? void 0 : _d.parent_id
    };
  }
  getMessageReactionsContext() {
    var _a, _b, _c, _d;
    return {
      messageReactionCounts: ((_a = this.message) === null || _a === void 0 ? void 0 : _a.reaction_counts) || {},
      latestReactions: ((_b = this.message) === null || _b === void 0 ? void 0 : _b.latest_reactions) || [],
      isSelectorOpen: this.isReactionSelectorOpen,
      isSelectorOpenChangeHandler: (isOpen) => this.isReactionSelectorOpen = isOpen,
      messageId: (_c = this.message) === null || _c === void 0 ? void 0 : _c.id,
      ownReactions: ((_d = this.message) === null || _d === void 0 ? void 0 : _d.own_reactions) || []
    };
  }
  resendMessage() {
    void this.channelService.resendMessage(this.message);
  }
  setAsActiveParentMessage() {
    void this.channelService.setAsActiveParentMessage(this.message);
  }
  getMentionContext(messagePart) {
    return {
      content: messagePart.content,
      user: messagePart.user
    };
  }
  getMessageActionsBoxContext() {
    return {
      isOpen: this.isActionBoxOpen,
      isMine: this.isSentByCurrentUser,
      enabledActions: this.enabledMessageActions,
      message: this.message,
      displayedActionsCountChaneHanler: (count) => {
        this.visibleMessageActionsCount = count;
        this.cdRef.detectChanges();
      },
      displayedActionsCountChangeHandler: (count) => {
        this.visibleMessageActionsCount = count;
        this.cdRef.detectChanges();
      },
      isEditingChangeHandler: (isEditing) => {
        this.isEditing = isEditing;
        this.isActionBoxOpen = !this.isEditing;
      },
      customActions: this.customActions || []
    };
  }
  getDeliveredStatusContext() {
    return {
      message: this.message
    };
  }
  getSendingStatusContext() {
    return {
      message: this.message
    };
  }
  getReadStatusContext() {
    return {
      message: this.message,
      readByText: this.readByText
    };
  }
  jumpToMessage(messageId, parentMessageId) {
    void this.channelService.jumpToMessage(messageId, parentMessageId);
  }
  displayTranslatedMessage() {
    this.createMessageParts(true);
  }
  displayOriginalMessage() {
    this.createMessageParts(false);
  }
  mouseLeft() {
    if (this.isActionBoxOpen) {
      this.ngZone.run(() => {
        this.isActionBoxOpen = false;
      });
    }
  }
  createMessageParts(shouldTranslate = true) {
    this.messageTextParts = void 0;
    this.messageText = void 0;
    let content = this.getMessageContent(shouldTranslate);
    if ((!this.message.mentioned_users || this.message.mentioned_users.length === 0) && !(content === null || content === void 0 ? void 0 : content.match(this.emojiRegexp)) && !(content === null || content === void 0 ? void 0 : content.match(this.urlRegexp))) {
      this.messageTextParts = void 0;
      this.messageText = content;
      return;
    }
    if (!content) {
      return;
    }
    if (!this.message.mentioned_users || this.message.mentioned_users.length === 0) {
      content = this.fixEmojiDisplay(content);
      content = this.wrapLinskWithAnchorTag(content);
      this.messageTextParts = [{
        content,
        type: "text"
      }];
    } else {
      this.messageTextParts = [];
      let text = content;
      this.message.mentioned_users.forEach((user) => {
        const mention = `@${user.name || user.id}`;
        const precedingText = text.substring(0, text.indexOf(mention));
        let formattedPrecedingText = this.fixEmojiDisplay(precedingText);
        formattedPrecedingText = this.wrapLinskWithAnchorTag(formattedPrecedingText);
        this.messageTextParts.push({
          content: formattedPrecedingText,
          type: "text"
        });
        this.messageTextParts.push({
          content: mention,
          type: "mention",
          user
        });
        text = text.replace(precedingText + mention, "");
      });
      if (text) {
        text = this.fixEmojiDisplay(text);
        text = this.wrapLinskWithAnchorTag(text);
        this.messageTextParts.push({
          content: text,
          type: "text"
        });
      }
    }
  }
  getMessageContent(shouldTranslate) {
    var _a, _b;
    const originalContent = (_a = this.message) === null || _a === void 0 ? void 0 : _a.text;
    if (shouldTranslate) {
      const translation = (_b = this.message) === null || _b === void 0 ? void 0 : _b.translation;
      if (translation) {
        this.shouldDisplayTranslationNotice = true;
        this.displayedMessageTextContent = "translation";
      }
      return translation || originalContent;
    } else {
      this.displayedMessageTextContent = "original";
      return originalContent;
    }
  }
  fixEmojiDisplay(content) {
    const isChrome = !!window.chrome && typeof window.opr === "undefined";
    content = content.replace(this.emojiRegexp, (match) => `<span ${isChrome ? 'class="str-chat__emoji-display-fix"' : ""}>${match}</span>`);
    return content;
  }
  wrapLinskWithAnchorTag(content) {
    if (this.displayAs === "html") {
      return content;
    }
    content = content.replace(this.urlRegexp, (match) => `<a href="${match}" rel="nofollow">${match}</a>`);
    return content;
  }
  setIsSentByCurrentUser() {
    var _a, _b, _c;
    this.isSentByCurrentUser = ((_b = (_a = this.message) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.id) === ((_c = this.user) === null || _c === void 0 ? void 0 : _c.id);
  }
  setLastReadUser() {
    var _a, _b;
    this.lastReadUser = (_b = (_a = this.message) === null || _a === void 0 ? void 0 : _a.readBy) === null || _b === void 0 ? void 0 : _b.filter((u) => {
      var _a2;
      return u.id !== ((_a2 = this.user) === null || _a2 === void 0 ? void 0 : _a2.id);
    })[0];
  }
};
MessageComponent.ɵfac = function MessageComponent_Factory(t2) {
  return new (t2 || MessageComponent)(ɵɵdirectiveInject(ChatClientService), ɵɵdirectiveInject(ChannelService), ɵɵdirectiveInject(CustomTemplatesService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ThemeService), ɵɵdirectiveInject(DateParserService), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(MessageService));
};
MessageComponent.ɵcmp = ɵɵdefineComponent({
  type: MessageComponent,
  selectors: [["stream-message"]],
  viewQuery: function MessageComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c16, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.container = _t.first);
    }
  },
  inputs: {
    message: "message",
    enabledMessageActions: "enabledMessageActions",
    isLastSentMessage: "isLastSentMessage",
    mode: "mode",
    isHighlighted: "isHighlighted",
    customActions: "customActions"
  },
  features: [ɵɵNgOnChangesFeature],
  decls: 17,
  vars: 23,
  consts: [["data-testid", "message-container"], ["container", ""], [4, "ngIf", "ngIfElse"], ["deletedMessage", ""], ["systemMessage", ""], ["quotedMessage", ""], ["messageDateAndSender", ""], ["messageStatus", ""], ["replyCountButton", ""], ["attachmentsTemplate", ""], [4, "ngIf"], ["data-testid", "avatar", "type", "user", "location", "message-sender", 1, "str-chat-angular__avatar-host", "str-chat__message-sender-avatar", 3, "imageUrl", "name", "user"], [1, "str-chat__message-inner"], ["class", "str-chat__message-simple__actions str-chat__message-options", "data-testid", "message-options", 3, "str-chat__message-edit-in-progress", 4, "ngIf"], [1, "str-chat__message-reactions-host"], ["defaultMessageReactions", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "str-chat__message-bubble"], ["class", "str-chat__message-text", "tabindex", "0", 4, "ngIf"], ["class", "str-chat__message-error-icon", "icon", "error", 4, "ngIf"], [4, "ngTemplateOutlet"], ["data-testid", "message-options", 1, "str-chat__message-simple__actions", "str-chat__message-options"], ["data-testid", "message-actions-container", 1, "str-chat__message-actions-container", "str-chat__message-simple__actions__action", "str-chat__message-simple__actions__action--options", 3, "popper", "popperTrigger", "popperPlacement", "popperHideOnScroll", "popperHideOnClickOutside", "popperHideOnMouseLeave", "popperDisableAnimation"], ["messageActionsToggle", ""], ["popperContent", ""], ["defaultMessageActionsBox", ""], ["class", "str-chat__message-actions-box-button", "data-testid", "action-icon", 3, "click", "keyup.enter", 4, "ngIf"], ["class", "\n              str-chat__message-simple__actions__action\n              str-chat__message-simple__actions__action--thread\n              str-chat__message-reply-in-thread-button\n            ", "data-testid", "reply-in-thread", 3, "click", "keyup.enter", 4, "ngIf"], ["class", "\n              str-chat__message-simple__actions__action\n              str-chat__message-simple__actions__action--reactions\n              str-chat__message-reactions-button\n            ", "data-testid", "reaction-icon", 3, "click", "keyup.enter", 4, "ngIf"], [3, "isOpen", "isMine", "enabledActions", "message", "customActions", "displayedActionsCount", "isEditing"], ["data-testid", "action-icon", 1, "str-chat__message-actions-box-button", 3, "click", "keyup.enter"], ["icon", "action-icon", 1, "str-chat__message-action-icon"], ["data-testid", "reply-in-thread", 1, "str-chat__message-simple__actions__action", "str-chat__message-simple__actions__action--thread", "str-chat__message-reply-in-thread-button", 3, "click", "keyup.enter"], ["icon", "reply-in-thread", 1, "str-chat__message-action-icon"], ["data-testid", "reaction-icon", 1, "str-chat__message-simple__actions__action", "str-chat__message-simple__actions__action--reactions", "str-chat__message-reactions-button", 3, "click", "keyup.enter"], ["icon", "reaction-icon", 1, "str-chat__message-action-icon"], [3, "messageReactionCounts", "latestReactions", "isSelectorOpen", "messageId", "ownReactions", "isSelectorOpenChange"], ["tabindex", "0", 1, "str-chat__message-text"], ["data-testid", "inner-message", 1, "str-chat__message-text-inner", "str-chat__message-simple-text-inner", 3, "click", "keyup.enter"], ["data-testid", "client-error-message", "class", "\n                  str-chat__simple-message--error-message\n                  str-chat__message--error-message\n                ", 4, "ngIf"], ["data-testid", "error-message", "class", "\n                  str-chat__simple-message--error-message\n                  str-chat__message--error-message\n                ", 4, "ngIf"], ["data-testid", "text"], ["defaultContent", ""], ["data-testid", "client-error-message", 1, "str-chat__simple-message--error-message", "str-chat__message--error-message"], ["data-testid", "error-message", 1, "str-chat__simple-message--error-message", "str-chat__message--error-message"], [4, "ngFor", "ngForOf"], [3, "innerHTML", 4, "ngIf", "ngIfElse"], ["mention", ""], [3, "innerHTML"], ["defaultMention", ""], [1, "str-chat__message-mention"], ["asHTML", ""], ["data-testid", "html-content", 3, "innerHTML"], ["icon", "error", 1, "str-chat__message-error-icon"], ["data-testid", "message-deleted-component"], ["translate", "", 1, "str-chat__message--deleted-inner"], ["defaultSystemMessage", ""], ["data-testid", "system-message", 1, "str-chat__message--system"], [1, "str-chat__message--system__text"], [1, "str-chat__message--system__line"], [1, "str-chat__message--system__date"], ["class", "quoted-message str-chat__quoted-message-preview", "data-testid", "quoted-message-container", 3, "mine", "click", "keyup.enter", 4, "ngIf"], ["data-testid", "quoted-message-container", 1, "quoted-message", "str-chat__quoted-message-preview", 3, "click", "keyup.enter"], ["data-testid", "qouted-message-avatar", "type", "user", "location", "quoted-message-sender", 1, "str-chat-angular__avatar-host", "str-chat__message-sender-avatar", 3, "imageUrl", "name", "size", "user"], [1, "quoted-message-inner", "str-chat__quoted-message-bubble"], ["data-testid", "quoted-message-text", 3, "innerHTML"], ["defaultAttachments", ""], [3, "messageId", "attachments", "parentMessageId", "imageModalStateChange"], ["class", "str-chat__translation-notice", "data-testid", "translation-notice", 4, "ngIf"], [1, "str-chat__message-data", "str-chat__message-simple-data", "str-chat__message-metadata"], ["data-testid", "sender", "class", "str-chat__message-simple-name str-chat__message-sender-name", 4, "ngIf"], ["data-testid", "date", 1, "str-chat__message-simple-timestamp"], ["data-testid", "translation-notice", 1, "str-chat__translation-notice"], ["data-testid", "see-original", "translate", "", 3, "click", "keyup.enter", 4, "ngIf"], ["data-testid", "see-translation", "translate", "", 3, "click", "keyup.enter", 4, "ngIf"], ["data-testid", "see-original", "translate", "", 3, "click", "keyup.enter"], ["data-testid", "see-translation", "translate", "", 3, "click", "keyup.enter"], ["data-testid", "sender", 1, "str-chat__message-simple-name", "str-chat__message-sender-name"], ["sentStatus", ""], ["deliveredStatus", ""], ["defaultDeliveredStatus", ""], ["sendingStatus", ""], ["defaultSendingStatus", ""], ["readStatus", ""], ["defaultReadStatus", ""], ["class", "\n          str-chat__message-simple-status\n          str-chat__message-simple-status-angular\n          str-chat__message-status\n        ", "data-testid", "delivered-indicator", "tabindex", "0", 3, "popper", "popperTrigger", "popperPlacement", "popperHideOnScroll", "popperHideOnClickOutside", "hover", 4, "ngIf"], ["data-testid", "delivered-indicator", "tabindex", "0", 1, "str-chat__message-simple-status", "str-chat__message-simple-status-angular", "str-chat__message-status", 3, "popper", "popperTrigger", "popperPlacement", "popperHideOnScroll", "popperHideOnClickOutside", "hover"], [1, "str-chat__tooltip", "str-chat__tooltip-angular"], ["data-testid", "delivered-icon", "icon", "delivered-icon"], ["data-testid", "sending-indicator", "tabindex", "0", 1, "str-chat__message-simple-status", "str-chat__message-simple-status-angular", "str-chat__message-status", 3, "popper", "popperTrigger", "popperPlacement", "popperHideOnScroll", "popperHideOnClickOutside", "hover"], ["data-testid", "loading-indicator"], ["data-testid", "read-indicator", "tabindex", "0", 1, "str-chat__message-simple-status", "str-chat__message-simple-status-angular", "str-chat__message-status", 3, "popper", "popperTrigger", "popperPlacement", "popperHideOnScroll", "popperHideOnClickOutside", "hover"], ["data-testid", "read-by-tooltip", 1, "str-chat__tooltip", "str-chat__tooltip-angular"], ["data-test-id", "last-read-user-avatar", "type", "user", "location", "message-reader", 1, "str-chat-angular__avatar-host", 3, "size", "imageUrl", "name", "user"], ["data-test-id", "read-by-length", "class", "str-chat__message-simple-status-number", 4, "ngIf"], ["data-test-id", "read-by-length", 1, "str-chat__message-simple-status-number"], ["class", "\n      str-chat__message-simple-reply-button\n      str-chat__message-replies-count-button-wrapper\n    ", 4, "ngIf"], [1, "str-chat__message-simple-reply-button", "str-chat__message-replies-count-button-wrapper"], ["class", "str-chat__message-replies-count-button", "data-testid", "reply-count-button", 3, "click", 4, "ngIf"], ["data-testid", "reply-count-button", 1, "str-chat__message-replies-count-button", 3, "click"], ["stream-icon-placeholder", "", "icon", "reply", 4, "ngIf"], ["stream-icon-placeholder", "", "icon", "reply"]],
  template: function MessageComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0, 1);
      ɵɵtemplate(2, MessageComponent_ng_container_2_Template, 2, 2, "ng-container", 2);
      ɵɵelementEnd();
      ɵɵtemplate(3, MessageComponent_ng_template_3_Template, 3, 0, "ng-template", null, 3, ɵɵtemplateRefExtractor)(5, MessageComponent_ng_template_5_Template, 4, 4, "ng-template", null, 4, ɵɵtemplateRefExtractor)(7, MessageComponent_ng_template_7_Template, 1, 1, "ng-template", null, 5, ɵɵtemplateRefExtractor)(9, MessageComponent_ng_template_9_Template, 1, 1, "ng-template", null, 6, ɵɵtemplateRefExtractor)(11, MessageComponent_ng_template_11_Template, 1, 1, "ng-template", null, 7, ɵɵtemplateRefExtractor)(13, MessageComponent_ng_template_13_Template, 1, 1, "ng-template", null, 8, ɵɵtemplateRefExtractor)(15, MessageComponent_ng_template_15_Template, 4, 4, "ng-template", null, 9, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r3 = ɵɵreference(4);
      ɵɵclassMapInterpolate3("str-chat__message-simple str-chat__message str-chat__message--", ctx.message == null ? null : ctx.message.type, " str-chat__message--", ctx.message == null ? null : ctx.message.status, " ", (ctx.message == null ? null : ctx.message.text) ? "str-chat__message--has-text" : "has-no-text", "");
      ɵɵclassProp("str-chat__message--me", ctx.isSentByCurrentUser)("str-chat__message--other", !ctx.isSentByCurrentUser)("str-chat__message-simple--me", ctx.isSentByCurrentUser)("str-chat__message--has-attachment", ctx.hasAttachment)("str-chat__message--with-reactions", ctx.hasReactions)("str-chat__message--highlighted", ctx.isHighlighted)("str-chat__message-with-thread-link", ctx.shouldDisplayThreadLink)("str-chat__message-send-can-be-retried", (ctx.message == null ? null : ctx.message.status) === "failed" && (ctx.message == null ? null : ctx.message.errorStatusCode) !== 403);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", !(ctx.message == null ? null : ctx.message.deleted_at))("ngIfElse", _r3);
    }
  },
  dependencies: [AvatarPlaceholderComponent, NgxPopperjsContentComponent, MessageActionsBoxComponent, IconPlaceholderComponent, MessageReactionsComponent, AttachmentListComponent, LoadingIndicatorPlaceholderComponent, NgIf, NgTemplateOutlet, NgxPopperjsDirective, NgForOf, TranslateDirective, AsyncPipe, TranslatePipe],
  encapsulation: 2,
  changeDetection: 0
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MessageComponent, [{
    type: Component,
    args: [{
      selector: "stream-message",
      templateUrl: "./message.component.html",
      styles: [],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: ChatClientService
    }, {
      type: ChannelService
    }, {
      type: CustomTemplatesService
    }, {
      type: ChangeDetectorRef
    }, {
      type: ThemeService
    }, {
      type: DateParserService
    }, {
      type: NgZone
    }, {
      type: MessageService
    }];
  }, {
    message: [{
      type: Input
    }],
    enabledMessageActions: [{
      type: Input
    }],
    isLastSentMessage: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    isHighlighted: [{
      type: Input
    }],
    customActions: [{
      type: Input
    }],
    container: [{
      type: ViewChild,
      args: ["container"]
    }]
  });
})();
var TextareaComponent = class {
  constructor(emojiInputService, themeService) {
    this.emojiInputService = emojiInputService;
    this.themeService = themeService;
    this.class = "str-chat__textarea str-chat__message-textarea-angular-host";
    this.value = "";
    this.placeholder = "";
    this.autoFocus = true;
    this.valueChange = new EventEmitter();
    this.send = new EventEmitter();
    this.subscriptions = [];
    this.subscriptions.push(this.emojiInputService.emojiInput$.subscribe((emoji) => {
      this.messageInput.nativeElement.focus();
      const {
        selectionStart
      } = this.messageInput.nativeElement;
      this.messageInput.nativeElement.setRangeText(emoji);
      this.messageInput.nativeElement.selectionStart = selectionStart + emoji.length;
      this.messageInput.nativeElement.selectionEnd = selectionStart + emoji.length;
      this.inputChanged();
    }));
  }
  ngOnChanges(changes) {
    if (changes.value && !this.value && this.messageInput) {
      this.messageInput.nativeElement.style.height = "auto";
    }
  }
  ngAfterViewInit() {
    if (this.messageInput.nativeElement.scrollHeight > 0) {
      this.adjustTextareaHeight();
    }
  }
  ngOnDestroy() {
    this.subscriptions.forEach((s2) => s2.unsubscribe());
  }
  inputChanged() {
    this.valueChange.emit(this.messageInput.nativeElement.value);
    this.adjustTextareaHeight();
  }
  enterHit(event) {
    if (this.inputMode === "desktop") {
      event.preventDefault();
      this.send.next();
    }
  }
  adjustTextareaHeight() {
    if (this.themeService.themeVersion === "2") {
      this.messageInput.nativeElement.style.height = "";
      this.messageInput.nativeElement.style.height = `${this.messageInput.nativeElement.scrollHeight}px`;
    }
  }
};
TextareaComponent.ɵfac = function TextareaComponent_Factory(t2) {
  return new (t2 || TextareaComponent)(ɵɵdirectiveInject(EmojiInputService), ɵɵdirectiveInject(ThemeService));
};
TextareaComponent.ɵcmp = ɵɵdefineComponent({
  type: TextareaComponent,
  selectors: [["stream-textarea"]],
  viewQuery: function TextareaComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c29, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.messageInput = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function TextareaComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassMap(ctx.class);
    }
  },
  inputs: {
    value: "value",
    placeholder: "placeholder",
    inputMode: "inputMode",
    autoFocus: "autoFocus"
  },
  outputs: {
    valueChange: "valueChange",
    send: "send"
  },
  features: [ɵɵNgOnChangesFeature],
  decls: 3,
  vars: 5,
  consts: [["data-testid", "textarea", "rows", "1", 1, "rta__textarea", "str-chat__textarea__textarea", "str-chat__angular-textarea", "str-chat__message-textarea", 3, "value", "autofocus", "placeholder", "input", "keydown.enter"], ["input", ""]],
  template: function TextareaComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "textarea", 0, 1);
      ɵɵlistener("input", function TextareaComponent_Template_textarea_input_0_listener() {
        return ctx.inputChanged();
      })("keydown.enter", function TextareaComponent_Template_textarea_keydown_enter_0_listener($event) {
        return ctx.enterHit($event);
      });
      ɵɵpipe(2, "translate");
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵpropertyInterpolate("placeholder", ɵɵpipeBind1(2, 3, ctx.placeholder));
      ɵɵproperty("value", ctx.value || "")("autofocus", ctx.autoFocus);
    }
  },
  dependencies: [TranslatePipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TextareaComponent, [{
    type: Component,
    args: [{
      selector: "stream-textarea",
      templateUrl: "./textarea.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: EmojiInputService
    }, {
      type: ThemeService
    }];
  }, {
    class: [{
      type: HostBinding
    }],
    value: [{
      type: Input
    }],
    placeholder: [{
      type: Input
    }],
    inputMode: [{
      type: Input
    }],
    autoFocus: [{
      type: Input
    }],
    valueChange: [{
      type: Output
    }],
    send: [{
      type: Output
    }],
    messageInput: [{
      type: ViewChild,
      args: ["input"]
    }]
  });
})();
var TransliterationService = class {
  constructor() {
  }
  /**
   *
   * @param s the string to be transliterated
   * @returns the result of the transliteration
   */
  transliterate(s2) {
    return h(s2);
  }
};
TransliterationService.ɵfac = function TransliterationService_Factory(t2) {
  return new (t2 || TransliterationService)();
};
TransliterationService.ɵprov = ɵɵdefineInjectable({
  token: TransliterationService,
  factory: TransliterationService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TransliterationService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [];
  }, null);
})();
var AutocompleteTextareaComponent = class {
  constructor(channelService, chatClientService, transliterationService, emojiInputService, customTemplatesService, themeService, cdRef) {
    this.channelService = channelService;
    this.chatClientService = chatClientService;
    this.transliterationService = transliterationService;
    this.emojiInputService = emojiInputService;
    this.customTemplatesService = customTemplatesService;
    this.themeService = themeService;
    this.cdRef = cdRef;
    this.class = "str-chat__textarea str-chat__message-textarea-angular-host";
    this.value = "";
    this.placeholder = "";
    this.areMentionsEnabled = true;
    this.mentionScope = "channel";
    this.autoFocus = true;
    this.valueChange = new EventEmitter();
    this.send = new EventEmitter();
    this.userMentions = new EventEmitter();
    this.autocompleteKey = "autocompleteLabel";
    this.mentionTriggerChar = "@";
    this.commandTriggerChar = "/";
    this.autocompleteConfig = {
      mentions: []
    };
    this.subscriptions = [];
    this.mentionedUsers = [];
    this.userMentionConfig = {
      triggerChar: this.mentionTriggerChar,
      dropUp: true,
      labelKey: this.autocompleteKey,
      returnTrigger: true,
      mentionFilter: (searchString, items) => this.filter(searchString, items),
      mentionSelect: (item, triggerChar) => this.itemSelectedFromAutocompleteList(item, triggerChar)
    };
    this.slashCommandConfig = {
      triggerChar: this.commandTriggerChar,
      dropUp: true,
      labelKey: "name",
      returnTrigger: true,
      mentionFilter: (searchString, items) => this.filter(searchString, items),
      mentionSelect: (item, triggerChar) => this.itemSelectedFromAutocompleteList(item, triggerChar)
    };
    this.searchTerm$ = new BehaviorSubject("");
    this.searchTerm$.pipe(debounceTime(300)).subscribe((searchTerm) => {
      if (searchTerm.startsWith(this.mentionTriggerChar)) {
        void this.updateMentionOptions(searchTerm);
      }
    });
    this.subscriptions.push(this.channelService.activeChannel$.subscribe((channel) => {
      var _a;
      const commands = ((_a = channel === null || channel === void 0 ? void 0 : channel.getConfig()) === null || _a === void 0 ? void 0 : _a.commands) || [];
      this.slashCommandConfig.items = commands.map((c) => Object.assign(Object.assign({}, c), {
        [this.autocompleteKey]: c.name,
        type: "command"
      }));
      this.mentionedUsers = [];
      this.userMentions.next([...this.mentionedUsers]);
      void this.updateMentionOptions(this.searchTerm$.getValue());
    }));
    this.subscriptions.push(this.emojiInputService.emojiInput$.subscribe((emoji) => {
      this.messageInput.nativeElement.focus();
      const {
        selectionStart
      } = this.messageInput.nativeElement;
      this.messageInput.nativeElement.setRangeText(emoji);
      this.messageInput.nativeElement.selectionStart = selectionStart + emoji.length;
      this.messageInput.nativeElement.selectionEnd = selectionStart + emoji.length;
      this.inputChanged();
    }));
    this.subscriptions.push(this.customTemplatesService.mentionAutocompleteItemTemplate$.subscribe((template) => this.mentionAutocompleteItemTemplate = template));
    this.subscriptions.push(this.customTemplatesService.commandAutocompleteItemTemplate$.subscribe((template) => this.commandAutocompleteItemTemplate = template));
    this.autocompleteConfig.mentions = [this.userMentionConfig, this.slashCommandConfig];
    this.themeVersion = this.themeService.themeVersion;
  }
  ngOnChanges(changes) {
    if (changes.areMentionsEnabled) {
      if (this.areMentionsEnabled) {
        this.autocompleteConfig.mentions = [this.userMentionConfig, this.slashCommandConfig];
        this.autocompleteConfig = Object.assign({}, this.autocompleteConfig);
      } else {
        this.autocompleteConfig.mentions = [this.slashCommandConfig];
        this.autocompleteConfig = Object.assign({}, this.autocompleteConfig);
      }
    }
    if (changes.mentionScope) {
      void this.updateMentionOptions(this.searchTerm$.getValue());
    }
    if (changes.value && !this.value && this.messageInput) {
      this.messageInput.nativeElement.style.height = "auto";
      this.updateMentionedUsersFromText();
    }
  }
  ngAfterViewInit() {
    if (this.messageInput.nativeElement.scrollHeight > 0) {
      this.adjustTextareaHeight();
    }
  }
  filter(searchString, items) {
    return items.filter((item) => this.transliterate(item.autocompleteLabel.toLowerCase()).includes(this.transliterate(searchString.toLowerCase())));
  }
  itemSelectedFromAutocompleteList(item, triggerChar = "") {
    if (triggerChar === this.mentionTriggerChar) {
      this.mentionedUsers.push(item.user ? item.user : item);
      this.userMentions.next([...this.mentionedUsers]);
    }
    return triggerChar + item.autocompleteLabel + (triggerChar === this.commandTriggerChar ? " " : "");
  }
  autcompleteSearchTermChanged(searchTerm) {
    if (searchTerm === this.mentionTriggerChar) {
      void this.updateMentionOptions();
    } else {
      this.searchTerm$.next(searchTerm);
    }
  }
  inputChanged() {
    this.valueChange.emit(this.messageInput.nativeElement.value);
    this.adjustTextareaHeight();
  }
  inputLeft() {
    this.updateMentionedUsersFromText();
  }
  enterHit(event) {
    if (this.inputMode === "desktop") {
      event.preventDefault();
      this.updateMentionedUsersFromText();
      this.send.next();
    }
  }
  adjustTextareaHeight() {
    if (this.themeVersion === "2") {
      this.messageInput.nativeElement.style.height = "";
      this.messageInput.nativeElement.style.height = `${this.messageInput.nativeElement.scrollHeight}px`;
    }
  }
  transliterate(s2) {
    if (this.transliterationService) {
      return this.transliterationService.transliterate(s2);
    } else {
      return s2;
    }
  }
  updateMentionOptions(searchTerm) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.areMentionsEnabled) {
        return;
      }
      searchTerm = searchTerm === null || searchTerm === void 0 ? void 0 : searchTerm.replace(this.mentionTriggerChar, "");
      const request = this.mentionScope === "application" ? (s2) => this.chatClientService.autocompleteUsers(s2) : (s2) => this.channelService.autocompleteMembers(s2);
      const result = yield request(searchTerm || "");
      const items = this.filter(searchTerm || "", result.map((i) => {
        const user = i.user ? i.user : i;
        return Object.assign(Object.assign({}, i), {
          autocompleteLabel: user.name || user.id,
          type: "mention"
        });
      }));
      this.userMentionConfig.items = items;
      this.autocompleteConfig.mentions = [this.userMentionConfig, this.slashCommandConfig];
      this.autocompleteConfig = Object.assign({}, this.autocompleteConfig);
      this.cdRef.detectChanges();
    });
  }
  updateMentionedUsersFromText() {
    const updatedMentionedUsers = [];
    this.mentionedUsers.forEach((u) => {
      const key = u.name || u.id;
      if (this.value.includes(`${this.mentionTriggerChar}${key}`)) {
        updatedMentionedUsers.push(u);
      }
    });
    if (updatedMentionedUsers.length !== this.mentionedUsers.length) {
      this.userMentions.next([...updatedMentionedUsers]);
      this.mentionedUsers = updatedMentionedUsers;
    }
  }
};
AutocompleteTextareaComponent.ɵfac = function AutocompleteTextareaComponent_Factory(t2) {
  return new (t2 || AutocompleteTextareaComponent)(ɵɵdirectiveInject(ChannelService), ɵɵdirectiveInject(ChatClientService), ɵɵdirectiveInject(TransliterationService), ɵɵdirectiveInject(EmojiInputService), ɵɵdirectiveInject(CustomTemplatesService), ɵɵdirectiveInject(ThemeService), ɵɵdirectiveInject(ChangeDetectorRef));
};
AutocompleteTextareaComponent.ɵcmp = ɵɵdefineComponent({
  type: AutocompleteTextareaComponent,
  selectors: [["stream-autocomplete-textarea"]],
  viewQuery: function AutocompleteTextareaComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c29, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.messageInput = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function AutocompleteTextareaComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassMap(ctx.class);
    }
  },
  inputs: {
    value: "value",
    placeholder: "placeholder",
    areMentionsEnabled: "areMentionsEnabled",
    inputMode: "inputMode",
    mentionScope: "mentionScope",
    autoFocus: "autoFocus"
  },
  outputs: {
    valueChange: "valueChange",
    send: "send",
    userMentions: "userMentions"
  },
  features: [ɵɵNgOnChangesFeature],
  decls: 9,
  vars: 7,
  consts: [["data-testid", "textarea", "rows", "1", 1, "rta__textarea", "str-chat__textarea__textarea", "str-chat__angular-textarea", "str-chat__message-textarea", 3, "value", "autofocus", "placeholder", "mentionConfig", "mentionListTemplate", "input", "keydown.enter", "searchTerm", "blur"], ["input", ""], ["autocompleteItem", ""], ["defaultCommandTemplate", ""], ["defaultMentionTemplate", ""], [1, "rta", "rta__item", "str-chat__emojisearch__item", 3, "ngSwitch"], ["class", "rta__entity", 4, "ngSwitchCase"], [1, "rta__entity"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "str-chat__slash-command"], [1, "str-chat__slash-command-header"], ["data-testclass", "command-name", 1, "str-chat__slash-command-name"], [1, "str-chat__slash-command-args"], [1, "str-chat__user-item"], ["data-testclass", "avatar", "type", "user", "location", "autocomplete-item", 1, "str-chat__avatar", "str-chat__avatar--circle", 3, "size", "imageUrl", "name", "user"], ["data-testclass", "username", 1, "str-chat__user-item--name"], ["class", "str-chat__user-item-at", 4, "ngIf"], [1, "str-chat__user-item-at"]],
  template: function AutocompleteTextareaComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "textarea", 0, 1);
      ɵɵlistener("input", function AutocompleteTextareaComponent_Template_textarea_input_0_listener() {
        return ctx.inputChanged();
      })("keydown.enter", function AutocompleteTextareaComponent_Template_textarea_keydown_enter_0_listener($event) {
        return ctx.enterHit($event);
      })("searchTerm", function AutocompleteTextareaComponent_Template_textarea_searchTerm_0_listener($event) {
        return ctx.autcompleteSearchTermChanged($event);
      })("blur", function AutocompleteTextareaComponent_Template_textarea_blur_0_listener() {
        return ctx.inputLeft();
      });
      ɵɵpipe(2, "translate");
      ɵɵelementEnd();
      ɵɵtemplate(3, AutocompleteTextareaComponent_ng_template_3_Template, 3, 3, "ng-template", null, 2, ɵɵtemplateRefExtractor)(5, AutocompleteTextareaComponent_ng_template_5_Template, 7, 3, "ng-template", null, 3, ɵɵtemplateRefExtractor)(7, AutocompleteTextareaComponent_ng_template_7_Template, 5, 8, "ng-template", null, 4, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r2 = ɵɵreference(4);
      ɵɵpropertyInterpolate("placeholder", ɵɵpipeBind1(2, 5, ctx.placeholder));
      ɵɵproperty("value", ctx.value || "")("autofocus", ctx.autoFocus)("mentionConfig", ctx.autocompleteConfig)("mentionListTemplate", _r2);
    }
  },
  dependencies: [AvatarPlaceholderComponent, MentionDirective, NgSwitch, NgSwitchCase, NgTemplateOutlet, NgIf, TranslatePipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AutocompleteTextareaComponent, [{
    type: Component,
    args: [{
      selector: "stream-autocomplete-textarea",
      templateUrl: "./autocomplete-textarea.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: ChannelService
    }, {
      type: ChatClientService
    }, {
      type: TransliterationService
    }, {
      type: EmojiInputService
    }, {
      type: CustomTemplatesService
    }, {
      type: ThemeService
    }, {
      type: ChangeDetectorRef
    }];
  }, {
    class: [{
      type: HostBinding
    }],
    value: [{
      type: Input
    }],
    placeholder: [{
      type: Input
    }],
    areMentionsEnabled: [{
      type: Input
    }],
    inputMode: [{
      type: Input
    }],
    mentionScope: [{
      type: Input
    }],
    autoFocus: [{
      type: Input
    }],
    valueChange: [{
      type: Output
    }],
    send: [{
      type: Output
    }],
    userMentions: [{
      type: Output
    }],
    messageInput: [{
      type: ViewChild,
      args: ["input"]
    }]
  });
})();
var getGroupStyles = (message, previousMessage, nextMessage, noGroupByUser = false) => {
  var _a, _b, _c, _d, _e, _f;
  if (noGroupByUser || message.attachments && message.attachments.length !== 0)
    return "single";
  const isTopMessage = !previousMessage || !isOnSameDay(previousMessage.created_at, message.created_at) || previousMessage.type === "system" || previousMessage.attachments && ((_a = previousMessage.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0 || ((_b = message.user) === null || _b === void 0 ? void 0 : _b.id) !== ((_c = previousMessage.user) === null || _c === void 0 ? void 0 : _c.id) || previousMessage.type === "error" || previousMessage.deleted_at || message.reaction_counts && Object.keys(message.reaction_counts).length > 0;
  const isBottomMessage = !nextMessage || !isOnSameDay(message.created_at, nextMessage.created_at) || nextMessage.type === "system" || nextMessage.attachments && ((_d = nextMessage.attachments) === null || _d === void 0 ? void 0 : _d.length) !== 0 || ((_e = message.user) === null || _e === void 0 ? void 0 : _e.id) !== ((_f = nextMessage.user) === null || _f === void 0 ? void 0 : _f.id) || nextMessage.type === "error" || nextMessage.deleted_at || nextMessage.reaction_counts && Object.keys(nextMessage.reaction_counts).length > 0;
  if (!isTopMessage && !isBottomMessage) {
    if (message.deleted_at || message.type === "error")
      return "single";
    return "middle";
  }
  if (isBottomMessage) {
    if (isTopMessage || message.deleted_at || message.type === "error")
      return "single";
    return "bottom";
  }
  if (isTopMessage)
    return "top";
  return "";
};
var isOnSameDay = (date1, date2) => {
  return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
};
var MessageListComponent = class {
  constructor(channelService, chatClientService, customTemplatesService, dateParser, ngZone, cdRef) {
    this.channelService = channelService;
    this.chatClientService = chatClientService;
    this.customTemplatesService = customTemplatesService;
    this.dateParser = dateParser;
    this.ngZone = ngZone;
    this.cdRef = cdRef;
    this.mode = "main";
    this.direction = "bottom-to-top";
    this.messageOptionsTrigger = "message-row";
    this.hideJumpToLatestButtonDuringScroll = false;
    this.customMessageActions = [];
    this.displayDateSeparator = true;
    this.dateSeparatorTextPos = "center";
    this.openMessageListAt = "last-message";
    this.displayLoadingIndicator = true;
    this.emptyMainMessageListTemplate = null;
    this.emptyThreadMessageListTemplate = null;
    this.enabledMessageActions = [];
    this.isEmpty = true;
    this.unreadMessageCount = 0;
    this.groupStyles = [];
    this.isNextMessageOnSeparateDate = [];
    this.isLoading = false;
    this.isJumpingToLatestUnreadMessage = false;
    this.subscriptions = [];
    this.isLatestMessageInList = true;
    this.parsedDates = /* @__PURE__ */ new Map();
    this.subscriptions.push(this.channelService.activeChannel$.subscribe((channel) => {
      var _a, _b, _c, _d, _e, _f, _g;
      (_b = (_a = this.chatClientService.chatClient) === null || _a === void 0 ? void 0 : _a.logger) === null || _b === void 0 ? void 0 : _b.call(_a, "info", `${(channel === null || channel === void 0 ? void 0 : channel.cid) || "undefined"} selected`, {
        tags: `message list ${this.mode}`
      });
      if (this.channelId !== (channel === null || channel === void 0 ? void 0 : channel.id)) {
        (_e = (_d = (_c = this.chatClientService) === null || _c === void 0 ? void 0 : _c.chatClient) === null || _d === void 0 ? void 0 : _d.logger) === null || _e === void 0 ? void 0 : _e.call(_d, "info", `new channel is different from prev channel, reseting scroll state`, {
          tags: `message list ${this.mode}`
        });
        this.parsedDates = /* @__PURE__ */ new Map();
        this.resetScrollState();
        this.channelId = channel === null || channel === void 0 ? void 0 : channel.id;
        if (this.openMessageListAt === "last-read-message" && this.mode === "main") {
          this.lastReadMessageId = this.channelService.activeChannelLastReadMessageId;
          if (this.lastReadMessageId) {
            this.isJumpingToLatestUnreadMessage = true;
            void this.channelService.jumpToMessage(this.lastReadMessageId);
          }
        } else {
          this.lastReadMessageId = void 0;
        }
      }
      const capabilites = (_f = channel === null || channel === void 0 ? void 0 : channel.data) === null || _f === void 0 ? void 0 : _f.own_capabilities;
      if (capabilites) {
        this.enabledMessageActions = capabilites;
      }
      (_g = this.newMessageSubscription) === null || _g === void 0 ? void 0 : _g.unsubscribe();
      if (channel) {
        this.newMessageSubscription = channel.on("message.new", (event) => {
          if (!event.message || channel.state.messages === channel.state.latestMessages || this.mode === "thread") {
            return;
          }
          this.newMessageReceived({
            id: event.message.id,
            user: event.message.user,
            created_at: new Date(event.message.created_at || "")
          });
        });
      }
    }));
    this.subscriptions.push(this.channelService.activeParentMessage$.subscribe((message) => {
      if (message && this.parentMessage && message.id !== this.parentMessage.id && this.mode === "thread") {
        this.resetScrollState();
      }
      this.parentMessage = message;
    }));
    this.subscriptions.push(this.customTemplatesService.messageTemplate$.subscribe((template) => this.messageTemplate = template));
    this.subscriptions.push(this.customTemplatesService.dateSeparatorTemplate$.subscribe((template) => this.customDateSeparatorTemplate = template));
    this.subscriptions.push(this.customTemplatesService.newMessagesIndicatorTemplate$.subscribe((template) => this.customnewMessagesIndicatorTemplate = template));
    this.subscriptions.push(this.customTemplatesService.typingIndicatorTemplate$.subscribe((template) => this.typingIndicatorTemplate = template));
    this.usersTypingInChannel$ = this.channelService.usersTypingInChannel$;
    this.usersTypingInThread$ = this.channelService.usersTypingInThread$;
  }
  get class() {
    return `str-chat-angular__main-panel-inner str-chat-angular__message-list-host str-chat__main-panel-inner ${this.isEmpty ? "str-chat-angular__message-list-host--empty" : ""}`;
  }
  ngOnInit() {
    this.setMessages$();
  }
  ngOnChanges(changes) {
    var _a;
    if (changes.mode || changes.direction) {
      this.setMessages$();
    }
    if (changes.direction) {
      if ((_a = this.scrollContainer) === null || _a === void 0 ? void 0 : _a.nativeElement) {
        this.jumpToLatestMessage();
      }
    }
  }
  ngAfterViewInit() {
    this.ngZone.runOutsideAngular(() => {
      this.scrollContainer.nativeElement.addEventListener("scroll", () => this.scrolled());
    });
    this.subscriptions.push(this.channelService.jumpToMessage$.pipe(filter((config) => !!config.id)).subscribe((config) => {
      var _a, _b;
      let messageId = void 0;
      if (this.mode === "main") {
        messageId = config.parentId || config.id;
      } else if (config.parentId) {
        messageId = config.id;
      }
      (_b = (_a = this.chatClientService.chatClient) === null || _a === void 0 ? void 0 : _a.logger) === null || _b === void 0 ? void 0 : _b.call(_a, "info", `Jumping to ${messageId || ""}`, {
        tags: `message list ${this.mode}`
      });
      if (messageId) {
        if (messageId === "latest") {
          this.scrollToLatestMessage();
        } else {
          this.scrollMessageIntoView(messageId);
          this.highlightedMessageId = messageId;
        }
      }
    }));
    this.subscriptions.push(this.customTemplatesService.emptyMainMessageListPlaceholder$.subscribe((template) => {
      const isChanged = this.emptyMainMessageListTemplate !== template;
      this.emptyMainMessageListTemplate = template || null;
      if (isChanged) {
        this.cdRef.detectChanges();
      }
    }));
    this.subscriptions.push(this.customTemplatesService.emptyThreadMessageListPlaceholder$.subscribe((template) => {
      const isChanged = this.emptyThreadMessageListTemplate !== template;
      this.emptyThreadMessageListTemplate = template || null;
      if (isChanged) {
        this.cdRef.detectChanges();
      }
    }));
  }
  ngAfterViewChecked() {
    var _a, _b, _c, _d, _e, _f;
    if (this.highlightedMessageId) {
      this.hasNewMessages = false;
      this.olderMassagesLoaded = false;
    }
    if (this.direction === "top-to-bottom") {
      if (this.hasNewMessages && (this.isNewMessageSentByUser || !this.isUserScrolled)) {
        this.isLatestMessageInList ? this.scrollToTop() : this.jumpToLatestMessage();
        this.hasNewMessages = false;
        this.containerHeight = this.scrollContainer.nativeElement.scrollHeight;
      }
    } else {
      if (this.hasNewMessages) {
        if (!this.isUserScrolled || this.isNewMessageSentByUser) {
          (_b = (_a = this.chatClientService.chatClient) === null || _a === void 0 ? void 0 : _a.logger) === null || _b === void 0 ? void 0 : _b.call(_a, "info", `User has new messages, and not scrolled or sent new messages, therefore we ${this.isLatestMessageInList ? "scroll" : "jump"} to latest message`, {
            tags: `message list ${this.mode}`
          });
          this.isLatestMessageInList ? this.scrollToBottom() : this.jumpToLatestMessage();
        }
        this.hasNewMessages = false;
        this.containerHeight = this.scrollContainer.nativeElement.scrollHeight;
      } else if (this.olderMassagesLoaded) {
        (_d = (_c = this.chatClientService.chatClient) === null || _c === void 0 ? void 0 : _c.logger) === null || _d === void 0 ? void 0 : _d.call(_c, "info", `Older messages are loaded, we preserve the scroll position`, {
          tags: `message list ${this.mode}`
        });
        this.preserveScrollbarPosition();
        this.containerHeight = this.scrollContainer.nativeElement.scrollHeight;
        this.olderMassagesLoaded = false;
      } else if (this.getScrollPosition() !== "bottom" && !this.isUserScrolled && !this.highlightedMessageId) {
        (_f = (_e = this.chatClientService.chatClient) === null || _e === void 0 ? void 0 : _e.logger) === null || _f === void 0 ? void 0 : _f.call(_e, "info", `Container grew and user didn't scroll therefore we ${this.isLatestMessageInList ? "scroll" : "jump"} to latest message`, {
          tags: `message list ${this.mode}`
        });
        this.isLatestMessageInList ? this.scrollToBottom() : this.jumpToLatestMessage();
        this.containerHeight = this.scrollContainer.nativeElement.scrollHeight;
      }
    }
  }
  ngOnDestroy() {
    var _a;
    this.subscriptions.forEach((s2) => s2.unsubscribe());
    (_a = this.newMessageSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    if (this.scrollEndTimeout) {
      clearTimeout(this.scrollEndTimeout);
    }
  }
  trackByMessageId(index, item) {
    return item.id;
  }
  trackByUserId(index, user) {
    return user.id;
  }
  jumpToLatestMessage() {
    var _a;
    void this.channelService.jumpToMessage("latest", this.mode === "thread" ? (_a = this.parentMessage) === null || _a === void 0 ? void 0 : _a.id : void 0);
  }
  scrollToBottom() {
    this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight + 0.1;
    this.forceRepaint();
  }
  scrollToTop() {
    this.scrollContainer.nativeElement.scrollTop = 0;
  }
  scrolled() {
    var _a, _b;
    if (this.scrollContainer.nativeElement.scrollHeight === this.scrollContainer.nativeElement.clientHeight) {
      return;
    }
    const scrollPosition = this.getScrollPosition();
    (_b = (_a = this.chatClientService.chatClient) === null || _a === void 0 ? void 0 : _a.logger) === null || _b === void 0 ? void 0 : _b.call(_a, "info", `Scrolled - scroll position: ${scrollPosition}, container height: ${this.scrollContainer.nativeElement.scrollHeight}`, {
      tags: `message list ${this.mode}`
    });
    const isUserScrolled = (this.direction === "bottom-to-top" ? scrollPosition !== "bottom" : scrollPosition !== "top") || !this.isLatestMessageInList;
    if (this.isUserScrolled !== isUserScrolled) {
      this.ngZone.run(() => {
        this.isUserScrolled = isUserScrolled;
        if (!this.isUserScrolled) {
          this.unreadMessageCount = 0;
        }
      });
    }
    if (this.shouldLoadMoreMessages(scrollPosition)) {
      this.ngZone.run(() => {
        var _a2, _b2;
        this.containerHeight = this.scrollContainer.nativeElement.scrollHeight;
        let direction;
        if (this.direction === "top-to-bottom") {
          direction = scrollPosition === "top" ? "newer" : "older";
        } else {
          direction = scrollPosition === "top" ? "older" : "newer";
        }
        const result = this.mode === "main" ? this.channelService.loadMoreMessages(direction) : this.channelService.loadMoreThreadReplies(direction);
        if (result) {
          (_b2 = (_a2 = this.chatClientService.chatClient) === null || _a2 === void 0 ? void 0 : _a2.logger) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, "info", `Displaying loading indicator`, {
            tags: `message list ${this.mode}`
          });
          this.isLoading = true;
        }
      });
    }
    this.prevScrollTop = this.scrollContainer.nativeElement.scrollTop;
  }
  getTypingIndicatorContext() {
    return {
      usersTyping$: this.usersTyping$
    };
  }
  getTypingIndicatorText(users) {
    const text = listUsers(users);
    return text;
  }
  isSentByCurrentUser(message) {
    var _a, _b;
    if (!message) {
      return false;
    }
    return ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = this.chatClientService.chatClient.user) === null || _b === void 0 ? void 0 : _b.id);
  }
  parseDate(date) {
    if (this.parsedDates.has(date)) {
      return this.parsedDates.get(date);
    }
    const parsedDate = this.dateParser.parseDate(date);
    this.parsedDates.set(date, parsedDate);
    return parsedDate;
  }
  get replyCountParam() {
    var _a;
    return {
      replyCount: (_a = this.parentMessage) === null || _a === void 0 ? void 0 : _a.reply_count
    };
  }
  get emptyListTemplate() {
    return this.mode === "main" ? this.emptyMainMessageListTemplate : this.emptyThreadMessageListTemplate;
  }
  preserveScrollbarPosition() {
    this.scrollContainer.nativeElement.scrollTop = (this.prevScrollTop || 0) + (this.scrollContainer.nativeElement.scrollHeight - this.containerHeight);
  }
  forceRepaint() {
    this.scrollContainer.nativeElement.style.display = "none";
    this.scrollContainer.nativeElement.offsetHeight;
    this.scrollContainer.nativeElement.style.display = "";
  }
  getScrollPosition() {
    var _a, _b;
    let position = "middle";
    if (Math.floor(this.scrollContainer.nativeElement.scrollTop) <= (((_a = this.parentMessageElement) === null || _a === void 0 ? void 0 : _a.nativeElement.clientHeight) || 0) && (this.prevScrollTop === void 0 || this.prevScrollTop > (((_b = this.parentMessageElement) === null || _b === void 0 ? void 0 : _b.nativeElement.clientHeight) || 0))) {
      position = "top";
    } else if (Math.ceil(this.scrollContainer.nativeElement.scrollTop) + this.scrollContainer.nativeElement.clientHeight >= this.scrollContainer.nativeElement.scrollHeight) {
      position = "bottom";
    }
    return position;
  }
  shouldLoadMoreMessages(scrollPosition) {
    return scrollPosition !== "middle" && !this.highlightedMessageId;
  }
  setMessages$() {
    this.messages$ = (this.mode === "main" ? this.channelService.activeChannelMessages$ : this.channelService.activeThreadMessages$).pipe(tap((messages) => {
      var _a, _b, _c, _d;
      this.isLoading = false;
      if (messages.length === 0) {
        (_b = (_a = this.chatClientService.chatClient) === null || _a === void 0 ? void 0 : _a.logger) === null || _b === void 0 ? void 0 : _b.call(_a, "info", `Empty messages array, reseting scroll state`, {
          tags: `message list ${this.mode}`
        });
        this.resetScrollState();
        return;
      }
      if (this.isEmpty) {
        setTimeout(() => this.isEmpty = false, 0);
      }
      (_d = (_c = this.chatClientService.chatClient) === null || _c === void 0 ? void 0 : _c.logger) === null || _d === void 0 ? void 0 : _d.call(_c, "info", `Received one or more messages`, {
        tags: `message list ${this.mode}`
      });
      const currentLatestMessage = messages[messages.length - 1];
      this.newMessageReceived(currentLatestMessage);
      const currentOldestMessage = messages[0];
      if (!this.oldestMessage || !messages.find((m) => m.id === this.oldestMessage.id)) {
        this.oldestMessage = currentOldestMessage;
      } else if (this.oldestMessage.created_at.getTime() > currentOldestMessage.created_at.getTime()) {
        this.oldestMessage = currentOldestMessage;
        this.olderMassagesLoaded = true;
      }
    }), tap((messages) => {
      var _a;
      return this.lastSentMessageId = (_a = [...messages].reverse().find((m) => {
        var _a2, _b, _c;
        return ((_a2 = m.user) === null || _a2 === void 0 ? void 0 : _a2.id) === ((_c = (_b = this.chatClientService.chatClient) === null || _b === void 0 ? void 0 : _b.user) === null || _c === void 0 ? void 0 : _c.id) && m.status !== "sending";
      })) === null || _a === void 0 ? void 0 : _a.id;
    }), tap((messages) => {
      this.isLatestMessageInList = !this.latestMessage || messages.length === 0 || messages[messages.length - 1].id === this.latestMessage.id;
      if (!this.isLatestMessageInList) {
        this.isUserScrolled = true;
      }
    }), tap(() => {
      var _a;
      if (this.isJumpingToLatestUnreadMessage && this.lastReadMessageId && this.lastReadMessageId === ((_a = this.latestMessage) === null || _a === void 0 ? void 0 : _a.id)) {
        this.lastReadMessageId = void 0;
      }
    }), map((messages) => this.direction === "bottom-to-top" ? messages : [...messages].reverse()), tap((messages) => {
      this.groupStyles = messages.map((m, i) => getGroupStyles(m, messages[i - 1], messages[i + 1]));
      this.isNextMessageOnSeparateDate = messages.map((m, i) => this.checkIfOnSeparateDates(m, messages[i + 1]));
    }));
  }
  resetScrollState() {
    this.isEmpty = true;
    this.latestMessage = void 0;
    this.hasNewMessages = true;
    this.isUserScrolled = false;
    this.containerHeight = void 0;
    this.olderMassagesLoaded = false;
    this.oldestMessage = void 0;
    this.unreadMessageCount = 0;
    this.prevScrollTop = void 0;
    this.isNewMessageSentByUser = void 0;
    this.isLatestMessageInList = true;
  }
  get usersTyping$() {
    return this.mode === "thread" ? this.usersTypingInThread$ : this.usersTypingInChannel$;
  }
  scrollMessageIntoView(messageId, withRetry = true) {
    const element = document.getElementById(messageId);
    if (!element && withRetry) {
      setTimeout(() => this.scrollMessageIntoView(messageId, false));
    } else if (element) {
      element.scrollIntoView({
        block: messageId === this.lastReadMessageId ? "start" : "center"
      });
      setTimeout(() => {
        this.highlightedMessageId = void 0;
        this.isJumpingToLatestUnreadMessage = false;
      }, 1e3);
    }
  }
  scrollToLatestMessage(withRetry = true) {
    if (document.getElementById(this.latestMessage.id)) {
      this.direction === "bottom-to-top" ? this.scrollToBottom() : this.scrollToTop();
    } else if (withRetry) {
      setTimeout(() => this.scrollToLatestMessage(false), 0);
    }
  }
  newMessageReceived(message) {
    var _a, _b, _c, _d, _e, _f;
    if (!this.latestMessage || ((_a = this.latestMessage.created_at) === null || _a === void 0 ? void 0 : _a.getTime()) < message.created_at.getTime()) {
      (_c = (_b = this.chatClientService.chatClient) === null || _b === void 0 ? void 0 : _b.logger) === null || _c === void 0 ? void 0 : _c.call(_b, "info", `Received new message`, {
        tags: `message list ${this.mode}`
      });
      this.latestMessage = message;
      this.hasNewMessages = true;
      this.isNewMessageSentByUser = ((_d = message.user) === null || _d === void 0 ? void 0 : _d.id) === ((_f = (_e = this.chatClientService.chatClient) === null || _e === void 0 ? void 0 : _e.user) === null || _f === void 0 ? void 0 : _f.id);
      if (this.isUserScrolled) {
        this.unreadMessageCount++;
      }
    }
  }
  checkIfOnSeparateDates(message, nextMessage) {
    if (!message || !nextMessage) {
      return false;
    }
    if (message.created_at.getDate() !== nextMessage.created_at.getDate()) {
      return true;
    } else if (message.created_at.getFullYear() !== nextMessage.created_at.getFullYear() || message.created_at.getMonth() !== nextMessage.created_at.getMonth()) {
      return true;
    }
    return false;
  }
};
MessageListComponent.ɵfac = function MessageListComponent_Factory(t2) {
  return new (t2 || MessageListComponent)(ɵɵdirectiveInject(ChannelService), ɵɵdirectiveInject(ChatClientService), ɵɵdirectiveInject(CustomTemplatesService), ɵɵdirectiveInject(DateParserService), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(ChangeDetectorRef));
};
MessageListComponent.ɵcmp = ɵɵdefineComponent({
  type: MessageListComponent,
  selectors: [["stream-message-list"]],
  viewQuery: function MessageListComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c31, 5);
      ɵɵviewQuery(_c32, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.scrollContainer = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.parentMessageElement = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function MessageListComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassMap(ctx.class);
    }
  },
  inputs: {
    mode: "mode",
    direction: "direction",
    messageOptionsTrigger: "messageOptionsTrigger",
    hideJumpToLatestButtonDuringScroll: "hideJumpToLatestButtonDuringScroll",
    customMessageActions: "customMessageActions",
    displayDateSeparator: "displayDateSeparator",
    dateSeparatorTextPos: "dateSeparatorTextPos",
    openMessageListAt: "openMessageListAt",
    displayLoadingIndicator: "displayLoadingIndicator"
  },
  features: [ɵɵNgOnChangesFeature],
  decls: 22,
  vars: 13,
  consts: [["data-testid", "scroll-container", 1, "str-chat__list", 2, "overscroll-behavior", "none"], ["scrollContainer", ""], [4, "ngIf"], [1, "str-chat__reverse-infinite-scroll", "str-chat__message-list-scroll"], [1, "str-chat__ul"], ["data-testid", "parent-message", "class", "str-chat__parent-message-li", 4, "ngIf"], ["data-testid", "top-loading-indicator", 4, "ngIf"], ["data-testid", "bottom-loading-indicator", 4, "ngIf"], ["defaultTypingIndicator", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "str-chat__jump-to-latest-message"], ["data-testid", "scroll-to-latest", "class", "\n      str-chat__message-notification-scroll-to-latest\n      str-chat__message-notification-scroll-to-latest-right\n      str-chat__circle-fab\n    ", 3, "keyup.enter", "click", 4, "ngIf"], ["messageTemplateContainer", ""], ["dateSeparator", ""], ["defaultNewMessagesIndicator", ""], [4, "ngTemplateOutlet"], ["data-testid", "parent-message", 1, "str-chat__parent-message-li"], ["parentMessageElement", ""], ["data-testid", "reply-count", 1, "str-chat__thread-start"], ["data-testid", "top-loading-indicator"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["tabindex", "0", "data-testclass", "message", 3, "id"], ["data-testid", "bottom-loading-indicator"], ["data-testid", "typing-indicator", "class", "str-chat__typing-indicator str-chat__typing-indicator--typing", 4, "ngIf"], ["data-testid", "typing-indicator", 1, "str-chat__typing-indicator", "str-chat__typing-indicator--typing"], [1, "str-chat__typing-indicator__dots"], [1, "str-chat__typing-indicator__dot"], ["data-testid", "typing-users", 1, "str-chat__typing-indicator__users"], ["data-testid", "scroll-to-latest", 1, "str-chat__message-notification-scroll-to-latest", "str-chat__message-notification-scroll-to-latest-right", "str-chat__circle-fab", 3, "keyup.enter", "click"], [1, "str-chat__jump-to-latest-icon", "str-chat__circle-fab-icon", 3, "icon"], ["class", "\n        str-chat__message-notification\n        str-chat__message-notification-scroll-to-latest-unread-count\n        str-chat__jump-to-latest-unread-count\n      ", 4, "ngIf"], [1, "str-chat__message-notification", "str-chat__message-notification-scroll-to-latest-unread-count", "str-chat__jump-to-latest-unread-count"], ["defaultMessageTemplate", ""], [3, "message", "isLastSentMessage", "enabledMessageActions", "mode", "isHighlighted", "customActions"], ["defaultDateSeparator", ""], ["data-testid", "date-separator", 1, "str-chat__date-separator"], ["class", "str-chat__date-separator-line", 4, "ngIf"], [1, "str-chat__date-separator-date"], ["data-testid", "new-messages-indicator-date-separator", 4, "ngIf"], [1, "str-chat__date-separator-line"], ["data-testid", "new-messages-indicator-date-separator"], ["data-testid", "new-messages-indicator", 1, "str-chat__date-separator"], ["translate", "", 1, "str-chat__date-separator-date"]],
  template: function MessageListComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0, 1);
      ɵɵtemplate(2, MessageListComponent_ng_container_2_Template, 2, 1, "ng-container", 2);
      ɵɵelementStart(3, "div", 3)(4, "ul", 4);
      ɵɵtemplate(5, MessageListComponent_li_5_Template, 7, 10, "li", 5)(6, MessageListComponent_ng_container_6_Template, 2, 1, "ng-container", 2)(7, MessageListComponent_stream_loading_indicator_7_Template, 1, 0, "stream-loading-indicator", 6)(8, MessageListComponent_ng_container_8_Template, 2, 2, "ng-container", 2);
      ɵɵpipe(9, "async");
      ɵɵtemplate(10, MessageListComponent_stream_loading_indicator_10_Template, 1, 0, "stream-loading-indicator", 7);
      ɵɵelementEnd();
      ɵɵtemplate(11, MessageListComponent_ng_template_11_Template, 2, 3, "ng-template", null, 8, ɵɵtemplateRefExtractor)(13, MessageListComponent_ng_container_13_Template, 1, 0, "ng-container", 9);
      ɵɵelementEnd()();
      ɵɵelementStart(14, "div", 10);
      ɵɵtemplate(15, MessageListComponent_button_15_Template, 3, 2, "button", 11);
      ɵɵelementEnd();
      ɵɵtemplate(16, MessageListComponent_ng_template_16_Template, 3, 9, "ng-template", null, 12, ɵɵtemplateRefExtractor)(18, MessageListComponent_ng_template_18_Template, 3, 1, "ng-template", null, 13, ɵɵtemplateRefExtractor)(20, MessageListComponent_ng_template_20_Template, 5, 2, "ng-template", null, 14, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r8 = ɵɵreference(12);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.mode === "main" && ctx.isEmpty && ctx.emptyListTemplate);
      ɵɵadvance(2);
      ɵɵclassProp("str-chat__message-options-in-bubble", ctx.messageOptionsTrigger === "message-bubble");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.mode === "thread" && ctx.parentMessage);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.mode === "thread" && ctx.isEmpty && ctx.emptyListTemplate);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.isLoading && ctx.direction === "bottom-to-top" && ctx.displayLoadingIndicator);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ɵɵpipeBind1(9, 11, ctx.messages$));
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.isLoading && ctx.direction === "top-to-bottom" && ctx.displayLoadingIndicator);
      ɵɵadvance(3);
      ɵɵproperty("ngTemplateOutlet", ctx.typingIndicatorTemplate || _r8)("ngTemplateOutletContext", ctx.getTypingIndicatorContext());
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.isUserScrolled);
    }
  },
  dependencies: [LoadingIndicatorComponent, IconComponent, MessageComponent, NgIf, NgTemplateOutlet, NgForOf, TranslateDirective, TranslatePipe, AsyncPipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MessageListComponent, [{
    type: Component,
    args: [{
      selector: "stream-message-list",
      templateUrl: "./message-list.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: ChannelService
    }, {
      type: ChatClientService
    }, {
      type: CustomTemplatesService
    }, {
      type: DateParserService
    }, {
      type: NgZone
    }, {
      type: ChangeDetectorRef
    }];
  }, {
    mode: [{
      type: Input
    }],
    direction: [{
      type: Input
    }],
    messageOptionsTrigger: [{
      type: Input
    }],
    hideJumpToLatestButtonDuringScroll: [{
      type: Input
    }],
    customMessageActions: [{
      type: Input
    }],
    displayDateSeparator: [{
      type: Input
    }],
    dateSeparatorTextPos: [{
      type: Input
    }],
    openMessageListAt: [{
      type: Input
    }],
    displayLoadingIndicator: [{
      type: Input
    }],
    scrollContainer: [{
      type: ViewChild,
      args: ["scrollContainer"]
    }],
    parentMessageElement: [{
      type: ViewChild,
      args: ["parentMessageElement"]
    }],
    class: [{
      type: HostBinding,
      args: ["class"]
    }]
  });
})();
var ImageLoadService = class {
  constructor() {
    this.imageLoad$ = new Subject();
  }
};
ImageLoadService.ɵfac = function ImageLoadService_Factory(t2) {
  return new (t2 || ImageLoadService)();
};
ImageLoadService.ɵprov = ɵɵdefineInjectable({
  token: ImageLoadService,
  factory: ImageLoadService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ImageLoadService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [];
  }, null);
})();
var ThreadComponent = class {
  constructor(customTemplatesService, channelService, chatClientService) {
    this.customTemplatesService = customTemplatesService;
    this.channelService = channelService;
    this.chatClientService = chatClientService;
    this.class = "str-chat__thread";
    this.subscriptions = [];
    this.subscriptions.push(this.channelService.activeParentMessage$.subscribe((parentMessage) => this.parentMessage = parentMessage));
    this.subscriptions.push(this.channelService.activeChannel$.subscribe((channel) => this.channel = channel));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((s2) => s2.unsubscribe());
  }
  getThreadHeaderContext() {
    return {
      parentMessage: this.parentMessage,
      closeThreadHandler: () => this.closeThread()
    };
  }
  closeThread() {
    void this.channelService.setAsActiveParentMessage(void 0);
  }
  get channelName() {
    if (!this.channel || !this.chatClientService.chatClient.user) {
      return "";
    }
    return getChannelDisplayText(this.channel, this.chatClientService.chatClient.user);
  }
};
ThreadComponent.ɵfac = function ThreadComponent_Factory(t2) {
  return new (t2 || ThreadComponent)(ɵɵdirectiveInject(CustomTemplatesService), ɵɵdirectiveInject(ChannelService), ɵɵdirectiveInject(ChatClientService));
};
ThreadComponent.ɵcmp = ɵɵdefineComponent({
  type: ThreadComponent,
  selectors: [["stream-thread"]],
  hostVars: 2,
  hostBindings: function ThreadComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassMap(ctx.class);
    }
  },
  ngContentSelectors: _c4,
  decls: 6,
  vars: 4,
  consts: [[1, "str-chat__thread-container"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["defaultThreadHeader", ""], [1, "str-chat__thread-header"], [1, "str-chat__thread-header-details"], ["translate", "", 1, "str-chat__thread-header-name"], ["data-testid", "channel-name", 1, "str-chat__thread-header-channel-name"], ["data-testid", "close-button", 1, "str-chat__square-button", "str-chat__close-thread-button", 3, "click"], ["icon", "close-no-outline"]],
  template: function ThreadComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0);
      ɵɵtemplate(1, ThreadComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
      ɵɵpipe(2, "async");
      ɵɵprojection(3);
      ɵɵelementEnd();
      ɵɵtemplate(4, ThreadComponent_ng_template_4_Template, 8, 1, "ng-template", null, 2, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r2 = ɵɵreference(5);
      ɵɵadvance(1);
      ɵɵproperty("ngTemplateOutlet", ɵɵpipeBind1(2, 2, ctx.customTemplatesService.threadHeaderTemplate$) || _r2)("ngTemplateOutletContext", ctx.getThreadHeaderContext());
    }
  },
  dependencies: [IconPlaceholderComponent, NgTemplateOutlet, TranslateDirective, AsyncPipe],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThreadComponent, [{
    type: Component,
    args: [{
      selector: "stream-thread",
      templateUrl: "./thread.component.html",
      styles: []
    }]
  }], function() {
    return [{
      type: CustomTemplatesService
    }, {
      type: ChannelService
    }, {
      type: ChatClientService
    }];
  }, {
    class: [{
      type: HostBinding,
      args: ["class"]
    }]
  });
})();
var StreamAvatarModule = class {
};
StreamAvatarModule.ɵfac = function StreamAvatarModule_Factory(t2) {
  return new (t2 || StreamAvatarModule)();
};
StreamAvatarModule.ɵmod = ɵɵdefineNgModule({
  type: StreamAvatarModule,
  declarations: [AvatarComponent, AvatarPlaceholderComponent],
  imports: [CommonModule, TranslateModule],
  exports: [AvatarComponent, AvatarPlaceholderComponent]
});
StreamAvatarModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TranslateModule]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StreamAvatarModule, [{
    type: NgModule,
    args: [{
      declarations: [AvatarComponent, AvatarPlaceholderComponent],
      imports: [CommonModule, TranslateModule],
      exports: [AvatarComponent, AvatarPlaceholderComponent]
    }]
  }], null, null);
})();
var StreamChatModule = class {
};
StreamChatModule.ɵfac = function StreamChatModule_Factory(t2) {
  return new (t2 || StreamChatModule)();
};
StreamChatModule.ɵmod = ɵɵdefineNgModule({
  type: StreamChatModule,
  declarations: [ChannelComponent, ChannelHeaderComponent, ChannelListComponent, ChannelPreviewComponent, MessageComponent, MessageInputComponent, MessageListComponent, LoadingIndicatorComponent, IconComponent, MessageActionsBoxComponent, AttachmentListComponent, MessageReactionsComponent, NotificationComponent, NotificationListComponent, AttachmentPreviewListComponent, ModalComponent, TextareaDirective, ThreadComponent, IconPlaceholderComponent, LoadingIndicatorPlaceholderComponent],
  imports: [CommonModule, TranslateModule, StreamAvatarModule, NgxPopperjsModule],
  exports: [ChannelComponent, ChannelHeaderComponent, ChannelListComponent, ChannelPreviewComponent, MessageComponent, MessageInputComponent, MessageListComponent, LoadingIndicatorComponent, IconComponent, MessageActionsBoxComponent, AttachmentListComponent, MessageReactionsComponent, NotificationComponent, NotificationListComponent, AttachmentPreviewListComponent, ModalComponent, StreamAvatarModule, ThreadComponent, IconPlaceholderComponent, LoadingIndicatorPlaceholderComponent]
});
StreamChatModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TranslateModule, StreamAvatarModule, NgxPopperjsModule], StreamAvatarModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StreamChatModule, [{
    type: NgModule,
    args: [{
      declarations: [ChannelComponent, ChannelHeaderComponent, ChannelListComponent, ChannelPreviewComponent, MessageComponent, MessageInputComponent, MessageListComponent, LoadingIndicatorComponent, IconComponent, MessageActionsBoxComponent, AttachmentListComponent, MessageReactionsComponent, NotificationComponent, NotificationListComponent, AttachmentPreviewListComponent, ModalComponent, TextareaDirective, ThreadComponent, IconPlaceholderComponent, LoadingIndicatorPlaceholderComponent],
      imports: [CommonModule, TranslateModule, StreamAvatarModule, NgxPopperjsModule],
      exports: [ChannelComponent, ChannelHeaderComponent, ChannelListComponent, ChannelPreviewComponent, MessageComponent, MessageInputComponent, MessageListComponent, LoadingIndicatorComponent, IconComponent, MessageActionsBoxComponent, AttachmentListComponent, MessageReactionsComponent, NotificationComponent, NotificationListComponent, AttachmentPreviewListComponent, ModalComponent, StreamAvatarModule, ThreadComponent, IconPlaceholderComponent, LoadingIndicatorPlaceholderComponent]
    }]
  }], null, null);
})();
var StreamAutocompleteTextareaModule = class {
};
StreamAutocompleteTextareaModule.ɵfac = function StreamAutocompleteTextareaModule_Factory(t2) {
  return new (t2 || StreamAutocompleteTextareaModule)();
};
StreamAutocompleteTextareaModule.ɵmod = ɵɵdefineNgModule({
  type: StreamAutocompleteTextareaModule,
  declarations: [AutocompleteTextareaComponent],
  imports: [CommonModule, TranslateModule, MentionModule, StreamAvatarModule],
  exports: [AutocompleteTextareaComponent]
});
StreamAutocompleteTextareaModule.ɵinj = ɵɵdefineInjector({
  providers: [{
    provide: textareaInjectionToken,
    useValue: AutocompleteTextareaComponent
  }],
  imports: [[CommonModule, TranslateModule, MentionModule, StreamAvatarModule]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StreamAutocompleteTextareaModule, [{
    type: NgModule,
    args: [{
      declarations: [AutocompleteTextareaComponent],
      imports: [CommonModule, TranslateModule, MentionModule, StreamAvatarModule],
      exports: [AutocompleteTextareaComponent],
      providers: [{
        provide: textareaInjectionToken,
        useValue: AutocompleteTextareaComponent
      }]
    }]
  }], null, null);
})();
var StreamTextareaModule = class {
};
StreamTextareaModule.ɵfac = function StreamTextareaModule_Factory(t2) {
  return new (t2 || StreamTextareaModule)();
};
StreamTextareaModule.ɵmod = ɵɵdefineNgModule({
  type: StreamTextareaModule,
  declarations: [TextareaComponent],
  imports: [CommonModule, TranslateModule],
  exports: [TextareaComponent]
});
StreamTextareaModule.ɵinj = ɵɵdefineInjector({
  providers: [{
    provide: textareaInjectionToken,
    useValue: TextareaComponent
  }],
  imports: [[CommonModule, TranslateModule]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StreamTextareaModule, [{
    type: NgModule,
    args: [{
      declarations: [TextareaComponent],
      imports: [CommonModule, TranslateModule],
      exports: [TextareaComponent],
      providers: [{
        provide: textareaInjectionToken,
        useValue: TextareaComponent
      }]
    }]
  }], null, null);
})();
export {
  AttachmentConfigurationService,
  AttachmentListComponent,
  AttachmentPreviewListComponent,
  AttachmentService,
  AutocompleteTextareaComponent,
  AvatarComponent,
  AvatarPlaceholderComponent,
  ChannelComponent,
  ChannelHeaderComponent,
  ChannelListComponent,
  ChannelListToggleService,
  ChannelPreviewComponent,
  ChannelService,
  ChatClientService,
  CustomTemplatesService,
  DateParserService,
  EmojiInputService,
  IconComponent,
  IconPlaceholderComponent,
  ImageLoadService,
  LoadingIndicatorComponent,
  LoadingIndicatorPlaceholderComponent,
  MessageActionsBoxComponent,
  MessageComponent,
  MessageInputComponent,
  MessageInputConfigService,
  MessageListComponent,
  MessageReactionsComponent,
  MessageReactionsService,
  MessageService,
  ModalComponent,
  NotificationComponent,
  NotificationListComponent,
  NotificationService,
  StreamAutocompleteTextareaModule,
  StreamAvatarModule,
  StreamChatModule,
  StreamI18nService,
  StreamTextareaModule,
  TextareaComponent,
  TextareaDirective,
  ThemeService,
  ThreadComponent,
  TransliterationService,
  createMessagePreview,
  getChannelDisplayText,
  getGroupStyles,
  getMessageTranslation,
  getReadBy,
  isImageAttachment,
  isImageFile,
  listUsers,
  parseDate,
  textareaInjectionToken
};
/*! Bundled license information:

@babel/runtime/helpers/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)
*/
//# sourceMappingURL=stream-chat-angular.js.map
